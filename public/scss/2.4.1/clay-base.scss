// This file is used to overwrite default Bootstrap 4 variables for the Clay
// Base Theme and should only be limited to the most destructive variables.

$enable-caret: false !default;

$input-border-width: 0.0625rem !default; // 1px
$input-height: 2.375rem !default; // 38px
$input-height-lg: 3rem !default; // 48px
$input-height-sm: 1.9375rem !default; // 31px

$form-check-inline-input-margin-x: !default;

$table-accent-bg: #F2F2F2 !default;
$table-hover-bg: #ECECEC !default;

$table-head-bg: #FFF !default;

// Variables
//
// Variables should follow the `$component-state-property-size` formula for
// consistent naming. Ex: $nav-link-disabled-color and $modal-content-box-shadow-xs.


//
// Color system
//

// stylelint-disable
$white:    #fff !default;
$gray-100: #f8f9fa !default;
$gray-200: #e9ecef !default;
$gray-300: #dee2e6 !default;
$gray-400: #ced4da !default;
$gray-500: #adb5bd !default;
$gray-600: #6c757d !default;
$gray-700: #495057 !default;
$gray-800: #343a40 !default;
$gray-900: #212529 !default;
$black:    #000 !default;

$grays: () !default;
$grays: map-merge((
  "100": $gray-100,
  "200": $gray-200,
  "300": $gray-300,
  "400": $gray-400,
  "500": $gray-500,
  "600": $gray-600,
  "700": $gray-700,
  "800": $gray-800,
  "900": $gray-900
), $grays);

$blue:    #007bff !default;
$indigo:  #6610f2 !default;
$purple:  #6f42c1 !default;
$pink:    #e83e8c !default;
$red:     #dc3545 !default;
$orange:  #fd7e14 !default;
$yellow:  #ffc107 !default;
$green:   #28a745 !default;
$teal:    #20c997 !default;
$cyan:    #17a2b8 !default;

$colors: () !default;
$colors: map-merge((
  "blue":       $blue,
  "indigo":     $indigo,
  "purple":     $purple,
  "pink":       $pink,
  "red":        $red,
  "orange":     $orange,
  "yellow":     $yellow,
  "green":      $green,
  "teal":       $teal,
  "cyan":       $cyan,
  "white":      $white,
  "gray":       $gray-600,
  "gray-dark":  $gray-800
), $colors);

$primary:       $blue !default;
$secondary:     $gray-600 !default;
$success:       $green !default;
$info:          $cyan !default;
$warning:       $yellow !default;
$danger:        $red !default;
$light:         $gray-100 !default;
$dark:          $gray-800 !default;

$theme-colors: () !default;
$theme-colors: map-merge((
  "primary":    $primary,
  "secondary":  $secondary,
  "success":    $success,
  "info":       $info,
  "warning":    $warning,
  "danger":     $danger,
  "light":      $light,
  "dark":       $dark
), $theme-colors);
// stylelint-enable

// Set a specific jump point for requesting color jumps
$theme-color-interval:      8% !default;

// The yiq lightness value that determines when the lightness of color changes from "dark" to "light". Acceptable values are between 0 and 255.
$yiq-contrasted-threshold: 150 !default;

// Customize the light and dark text colors for use in our YIQ color contrast function.
$yiq-text-dark: $gray-900 !default;
$yiq-text-light: $white !default;

// Options
//
// Quickly modify global styling by enabling or disabling optional features.

$enable-caret:              true !default;
$enable-rounded:            true !default;
$enable-shadows:            false !default;
$enable-gradients:          false !default;
$enable-transitions:        true !default;
$enable-hover-media-query:  false !default; // Deprecated, no longer affects any compiled CSS
$enable-grid-classes:       true !default;
$enable-print-styles:       true !default;


// Spacing
//
// Control the default styling of most Bootstrap elements by modifying these
// variables. Mostly focused on spacing.
// You can add more entries to the $spacers map, should you need more variation.

// stylelint-disable
$spacer: 1rem !default;
$spacers: () !default;
$spacers: map-merge((
  0: 0,
  1: ($spacer * .25),
  2: ($spacer * .5),
  3: $spacer,
  4: ($spacer * 1.5),
  5: ($spacer * 3)
), $spacers);

// This variable affects the `.h-*` and `.w-*` classes.
$sizes: () !default;
$sizes: map-merge((
  25: 25%,
  50: 50%,
  75: 75%,
  100: 100%
), $sizes);
// stylelint-enable

// Body
//
// Settings for the `<body>` element.

$body-bg:                   $white !default;
$body-color:                $gray-900 !default;

// Links
//
// Style anchor elements.

$link-color:                theme-color("primary") !default;
$link-decoration:           none !default;
$link-hover-color:          darken($link-color, 15%) !default;
$link-hover-decoration:     underline !default;

// Paragraphs
//
// Style p element.

$paragraph-margin-bottom:   1rem !default;


// Grid breakpoints
//
// Define the minimum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
) !default;

@include _assert-ascending($grid-breakpoints, "$grid-breakpoints");
@include _assert-starts-at-zero($grid-breakpoints);


// Grid containers
//
// Define the maximum width of `.container` for different screen sizes.

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px
) !default;

@include _assert-ascending($container-max-widths, "$container-max-widths");


// Grid columns
//
// Set the number of columns and specify the width of the gutters.

$grid-columns:                12 !default;
$grid-gutter-width:           30px !default;

// Components
//
// Define common padding and border radius sizes and more.

$line-height-lg:              1.5 !default;
$line-height-sm:              1.5 !default;

$border-width:                1px !default;
$border-color:                $gray-300 !default;

$border-radius:               .25rem !default;
$border-radius-lg:            .3rem !default;
$border-radius-sm:            .2rem !default;

$component-active-color:      $white !default;
$component-active-bg:         theme-color("primary") !default;

$caret-width:                 .3em !default;

$transition-base:             all .2s ease-in-out !default;
$transition-fade:             opacity .15s linear !default;
$transition-collapse:         height .35s ease !default;


// Fonts
//
// Font, line-height, and color for body text, headings, and more.

// stylelint-disable value-keyword-case
$font-family-sans-serif:      -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol" !default;
$font-family-monospace:       SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace !default;
$font-family-base:            $font-family-sans-serif !default;
// stylelint-enable value-keyword-case

$font-size-base:              1rem !default; // Assumes the browser default, typically `16px`
$font-size-lg:                ($font-size-base * 1.25) !default;
$font-size-sm:                ($font-size-base * .875) !default;

$font-weight-light:           300 !default;
$font-weight-normal:          400 !default;
$font-weight-bold:            700 !default;

$font-weight-base:            $font-weight-normal !default;
$line-height-base:            1.5 !default;

$h1-font-size:                $font-size-base * 2.5 !default;
$h2-font-size:                $font-size-base * 2 !default;
$h3-font-size:                $font-size-base * 1.75 !default;
$h4-font-size:                $font-size-base * 1.5 !default;
$h5-font-size:                $font-size-base * 1.25 !default;
$h6-font-size:                $font-size-base !default;

$headings-margin-bottom:      ($spacer / 2) !default;
$headings-font-family:        inherit !default;
$headings-font-weight:        500 !default;
$headings-line-height:        1.2 !default;
$headings-color:              inherit !default;

$display1-size:               6rem !default;
$display2-size:               5.5rem !default;
$display3-size:               4.5rem !default;
$display4-size:               3.5rem !default;

$display1-weight:             300 !default;
$display2-weight:             300 !default;
$display3-weight:             300 !default;
$display4-weight:             300 !default;
$display-line-height:         $headings-line-height !default;

$lead-font-size:              ($font-size-base * 1.25) !default;
$lead-font-weight:            300 !default;

$small-font-size:             80% !default;

$text-muted:                  $gray-600 !default;

$blockquote-small-color:      $gray-600 !default;
$blockquote-font-size:        ($font-size-base * 1.25) !default;

$hr-border-color:             rgba($black, .1) !default;
$hr-border-width:             $border-width !default;

$mark-padding:                .2em !default;

$dt-font-weight:              $font-weight-bold !default;

$kbd-box-shadow:              inset 0 -.1rem 0 rgba($black, .25) !default;
$nested-kbd-font-weight:      $font-weight-bold !default;

$list-inline-padding:         .5rem !default;

$mark-bg:                     #fcf8e3 !default;

$hr-margin-y:                 $spacer !default;


// Tables
//
// Customizes the `.table` component with basic values, each used across all table variations.

$table-cell-padding:          .75rem !default;
$table-cell-padding-sm:       .3rem !default;

$table-bg:                    transparent !default;
$table-accent-bg:             rgba($black, .05) !default;
$table-hover-bg:              rgba($black, .075) !default;
$table-active-bg:             $table-hover-bg !default;

$table-border-width:          $border-width !default;
$table-border-color:          $gray-300 !default;

$table-head-bg:               $gray-200 !default;
$table-head-color:            $gray-700 !default;

$table-dark-bg:               $gray-900 !default;
$table-dark-accent-bg:        rgba($white, .05) !default;
$table-dark-hover-bg:         rgba($white, .075) !default;
$table-dark-border-color:     lighten($gray-900, 7.5%) !default;
$table-dark-color:            $body-bg !default;


// Buttons + Forms
//
// Shared variables that are reassigned to `$input-` and `$btn-` specific variables.

$input-btn-padding-y:         .375rem !default;
$input-btn-padding-x:         .75rem !default;
$input-btn-line-height:       $line-height-base !default;

$input-btn-focus-width:       .2rem !default;
$input-btn-focus-color:       rgba($component-active-bg, .25) !default;
$input-btn-focus-box-shadow:  0 0 0 $input-btn-focus-width $input-btn-focus-color !default;

$input-btn-padding-y-sm:      .25rem !default;
$input-btn-padding-x-sm:      .5rem !default;
$input-btn-line-height-sm:    $line-height-sm !default;

$input-btn-padding-y-lg:      .5rem !default;
$input-btn-padding-x-lg:      1rem !default;
$input-btn-line-height-lg:    $line-height-lg !default;

$input-btn-border-width:      $border-width !default;


// Buttons
//
// For each of Bootstrap's buttons, define text, background, and border color.

$btn-padding-y:               $input-btn-padding-y !default;
$btn-padding-x:               $input-btn-padding-x !default;
$btn-line-height:             $input-btn-line-height !default;

$btn-padding-y-sm:            $input-btn-padding-y-sm !default;
$btn-padding-x-sm:            $input-btn-padding-x-sm !default;
$btn-line-height-sm:          $input-btn-line-height-sm !default;

$btn-padding-y-lg:            $input-btn-padding-y-lg !default;
$btn-padding-x-lg:            $input-btn-padding-x-lg !default;
$btn-line-height-lg:          $input-btn-line-height-lg !default;

$btn-border-width:            $input-btn-border-width !default;

$btn-font-weight:             $font-weight-normal !default;
$btn-box-shadow:              inset 0 1px 0 rgba($white, .15), 0 1px 1px rgba($black, .075) !default;
$btn-focus-width:             $input-btn-focus-width !default;
$btn-focus-box-shadow:        $input-btn-focus-box-shadow !default;
$btn-disabled-opacity:        .65 !default;
$btn-active-box-shadow:       inset 0 3px 5px rgba($black, .125) !default;

$btn-link-disabled-color:     $gray-600 !default;

$btn-block-spacing-y:         .5rem !default;

// Allows for customizing button radius independently from global border radius
$btn-border-radius:           $border-radius !default;
$btn-border-radius-lg:        $border-radius-lg !default;
$btn-border-radius-sm:        $border-radius-sm !default;

$btn-transition:              color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out !default;


// Forms

$input-padding-y:                       $input-btn-padding-y !default;
$input-padding-x:                       $input-btn-padding-x !default;
$input-line-height:                     $input-btn-line-height !default;

$input-padding-y-sm:                    $input-btn-padding-y-sm !default;
$input-padding-x-sm:                    $input-btn-padding-x-sm !default;
$input-line-height-sm:                  $input-btn-line-height-sm !default;

$input-padding-y-lg:                    $input-btn-padding-y-lg !default;
$input-padding-x-lg:                    $input-btn-padding-x-lg !default;
$input-line-height-lg:                  $input-btn-line-height-lg !default;

$input-bg:                              $white !default;
$input-disabled-bg:                     $gray-200 !default;

$input-color:                           $gray-700 !default;
$input-border-color:                    $gray-400 !default;
$input-border-width:                    $input-btn-border-width !default;
$input-box-shadow:                      inset 0 1px 1px rgba($black, .075) !default;

$input-border-radius:                   $border-radius !default;
$input-border-radius-lg:                $border-radius-lg !default;
$input-border-radius-sm:                $border-radius-sm !default;

$input-focus-bg:                        $input-bg !default;
$input-focus-border-color:              lighten($component-active-bg, 25%) !default;
$input-focus-color:                     $input-color !default;
$input-focus-width:                     $input-btn-focus-width !default;
$input-focus-box-shadow:                $input-btn-focus-box-shadow !default;

$input-placeholder-color:               $gray-600 !default;

$input-height-border:                   $input-border-width * 2 !default;

$input-height-inner:                    ($font-size-base * $input-btn-line-height) + ($input-btn-padding-y * 2) !default;
$input-height:                          calc(#{$input-height-inner} + #{$input-height-border}) !default;

$input-height-inner-sm:                 ($font-size-sm * $input-btn-line-height-sm) + ($input-btn-padding-y-sm * 2) !default;
$input-height-sm:                       calc(#{$input-height-inner-sm} + #{$input-height-border}) !default;

$input-height-inner-lg:                 ($font-size-lg * $input-btn-line-height-lg) + ($input-btn-padding-y-lg * 2) !default;
$input-height-lg:                       calc(#{$input-height-inner-lg} + #{$input-height-border}) !default;

$input-transition:                      border-color .15s ease-in-out, box-shadow .15s ease-in-out !default;

$form-text-margin-top:                  .25rem !default;

$form-check-input-gutter:               1.25rem !default;
$form-check-input-margin-y:             .3rem !default;
$form-check-input-margin-x:             .25rem !default;

$form-check-inline-margin-x:            .75rem !default;
$form-check-inline-input-margin-x:      .3125rem !default;

$form-group-margin-bottom:              1rem !default;

$input-group-addon-color:               $input-color !default;
$input-group-addon-bg:                  $gray-200 !default;
$input-group-addon-border-color:        $input-border-color !default;

$custom-control-gutter:                 1.5rem !default;
$custom-control-spacer-x:               1rem !default;

$custom-control-indicator-size:         1rem !default;
$custom-control-indicator-bg:           $gray-300 !default;
$custom-control-indicator-bg-size:      50% 50% !default;
$custom-control-indicator-box-shadow:   inset 0 .25rem .25rem rgba($black, .1) !default;

$custom-control-indicator-disabled-bg:          $gray-200 !default;
$custom-control-label-disabled-color:     $gray-600 !default;

$custom-control-indicator-checked-color:        $component-active-color !default;
$custom-control-indicator-checked-bg:           $component-active-bg !default;
$custom-control-indicator-checked-disabled-bg:  rgba(theme-color("primary"), .5) !default;
$custom-control-indicator-checked-box-shadow:   none !default;

$custom-control-indicator-focus-box-shadow:     0 0 0 1px $body-bg, $input-btn-focus-box-shadow !default;

$custom-control-indicator-active-color:         $component-active-color !default;
$custom-control-indicator-active-bg:            lighten($component-active-bg, 35%) !default;
$custom-control-indicator-active-box-shadow:    none !default;

$custom-checkbox-indicator-border-radius:       $border-radius !default;
$custom-checkbox-indicator-icon-checked:        str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='#{$custom-control-indicator-checked-color}' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3E%3C/svg%3E"), "#", "%23") !default;

$custom-checkbox-indicator-indeterminate-bg:    $component-active-bg !default;
$custom-checkbox-indicator-indeterminate-color: $custom-control-indicator-checked-color !default;
$custom-checkbox-indicator-icon-indeterminate:  str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3E%3Cpath stroke='#{$custom-checkbox-indicator-indeterminate-color}' d='M0 2h4'/%3E%3C/svg%3E"), "#", "%23") !default;
$custom-checkbox-indicator-indeterminate-box-shadow: none !default;

$custom-radio-indicator-border-radius:          50% !default;
$custom-radio-indicator-icon-checked:           str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='#{$custom-control-indicator-checked-color}'/%3E%3C/svg%3E"), "#", "%23") !default;

$custom-select-padding-y:           .375rem !default;
$custom-select-padding-x:          .75rem !default;
$custom-select-height:              $input-height !default;
$custom-select-indicator-padding:   1rem !default; // Extra padding to account for the presence of the background-image based indicator
$custom-select-line-height:         $input-btn-line-height !default;
$custom-select-color:               $input-color !default;
$custom-select-disabled-color:      $gray-600 !default;
$custom-select-bg:                  $white !default;
$custom-select-disabled-bg:         $gray-200 !default;
$custom-select-bg-size:             8px 10px !default; // In pixels because image dimensions
$custom-select-indicator-color:     $gray-800 !default;
$custom-select-indicator:           str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='#{$custom-select-indicator-color}' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E"), "#", "%23") !default;
$custom-select-border-width:        $input-btn-border-width !default;
$custom-select-border-color:        $input-border-color !default;
$custom-select-border-radius:       $border-radius !default;

$custom-select-focus-border-color:  $input-focus-border-color !default;
$custom-select-focus-box-shadow:    inset 0 1px 2px rgba($black, .075), 0 0 5px rgba($custom-select-focus-border-color, .5) !default;

$custom-select-font-size-sm:        75% !default;
$custom-select-height-sm:           $input-height-sm !default;

$custom-select-font-size-lg:        125% !default;
$custom-select-height-lg:           $input-height-lg !default;

$custom-file-height:                $input-height !default;
$custom-file-focus-border-color:    $input-focus-border-color !default;
$custom-file-focus-box-shadow:      $input-btn-focus-box-shadow !default;

$custom-file-padding-y:             $input-btn-padding-y !default;
$custom-file-padding-x:             $input-btn-padding-x !default;
$custom-file-line-height:           $input-btn-line-height !default;
$custom-file-color:                 $input-color !default;
$custom-file-bg:                    $input-bg !default;
$custom-file-border-width:          $input-btn-border-width !default;
$custom-file-border-color:          $input-border-color !default;
$custom-file-border-radius:         $input-border-radius !default;
$custom-file-box-shadow:            $input-box-shadow !default;
$custom-file-button-color:          $custom-file-color !default;
$custom-file-button-bg:             $input-group-addon-bg !default;
$custom-file-text: (
  en: "Browse"
) !default;


// Form validation
$form-feedback-margin-top:          $form-text-margin-top !default;
$form-feedback-font-size:           $small-font-size !default;
$form-feedback-valid-color:         theme-color("success") !default;
$form-feedback-invalid-color:       theme-color("danger") !default;


// Dropdowns
//
// Dropdown menu container and contents.

$dropdown-min-width:                10rem !default;
$dropdown-padding-y:                .5rem !default;
$dropdown-spacer:                   .125rem !default;
$dropdown-bg:                       $white !default;
$dropdown-border-color:             rgba($black, .15) !default;
$dropdown-border-radius:            $border-radius !default;
$dropdown-border-width:             $border-width !default;
$dropdown-divider-bg:               $gray-200 !default;
$dropdown-box-shadow:               0 .5rem 1rem rgba($black, .175) !default;

$dropdown-link-color:               $gray-900 !default;
$dropdown-link-hover-color:         darken($gray-900, 5%) !default;
$dropdown-link-hover-bg:            $gray-100 !default;

$dropdown-link-active-color:        $component-active-color !default;
$dropdown-link-active-bg:           $component-active-bg !default;

$dropdown-link-disabled-color:      $gray-600 !default;

$dropdown-item-padding-y:           .25rem !default;
$dropdown-item-padding-x:           1.5rem !default;

$dropdown-header-color:             $gray-600 !default;


// Z-index master list
//
// Warning: Avoid customizing these values. They're used for a bird's eye view
// of components dependent on the z-axis and are designed to all work together.

$zindex-dropdown:                   1000 !default;
$zindex-sticky:                     1020 !default;
$zindex-fixed:                      1030 !default;
$zindex-modal-backdrop:             1040 !default;
$zindex-modal:                      1050 !default;
$zindex-popover:                    1060 !default;
$zindex-tooltip:                    1070 !default;

// Navs

$nav-link-padding-y:                .5rem !default;
$nav-link-padding-x:                1rem !default;
$nav-link-disabled-color:           $gray-600 !default;

$nav-tabs-border-color:             $gray-300 !default;
$nav-tabs-border-width:             $border-width !default;
$nav-tabs-border-radius:            $border-radius !default;
$nav-tabs-link-hover-border-color:  $gray-200 $gray-200 $nav-tabs-border-color !default;
$nav-tabs-link-active-color:        $gray-700 !default;
$nav-tabs-link-active-bg:           $body-bg !default;
$nav-tabs-link-active-border-color: $gray-300 $gray-300 $nav-tabs-link-active-bg !default;

$nav-pills-border-radius:           $border-radius !default;
$nav-pills-link-active-color:       $component-active-color !default;
$nav-pills-link-active-bg:          $component-active-bg !default;

// Navbar

$navbar-padding-y:                  ($spacer / 2) !default;
$navbar-padding-x:                  $spacer !default;

$navbar-nav-link-padding-x:         .5rem !default;

$navbar-brand-font-size:            $font-size-lg !default;
// Compute the navbar-brand padding-y so the navbar-brand will have the same height as navbar-text and nav-link
$nav-link-height:                   ($font-size-base * $line-height-base + $nav-link-padding-y * 2) !default;
$navbar-brand-height:               $navbar-brand-font-size * $line-height-base !default;
$navbar-brand-padding-y:            ($nav-link-height - $navbar-brand-height) / 2 !default;

$navbar-toggler-padding-y:          .25rem !default;
$navbar-toggler-padding-x:          .75rem !default;
$navbar-toggler-font-size:          $font-size-lg !default;
$navbar-toggler-border-radius:      $btn-border-radius !default;

$navbar-dark-color:                 rgba($white, .5) !default;
$navbar-dark-hover-color:           rgba($white, .75) !default;
$navbar-dark-active-color:          $white !default;
$navbar-dark-disabled-color:        rgba($white, .25) !default;
$navbar-dark-toggler-icon-bg:       str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='#{$navbar-dark-color}' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E"), "#", "%23") !default;
$navbar-dark-toggler-border-color:  rgba($white, .1) !default;

$navbar-light-color:                rgba($black, .5) !default;
$navbar-light-hover-color:          rgba($black, .7) !default;
$navbar-light-active-color:         rgba($black, .9) !default;
$navbar-light-disabled-color:       rgba($black, .3) !default;
$navbar-light-toggler-icon-bg:      str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='#{$navbar-light-color}' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E"), "#", "%23") !default;
$navbar-light-toggler-border-color: rgba($black, .1) !default;

// Pagination

$pagination-padding-y:              .5rem !default;
$pagination-padding-x:              .75rem !default;
$pagination-padding-y-sm:           .25rem !default;
$pagination-padding-x-sm:           .5rem !default;
$pagination-padding-y-lg:           .75rem !default;
$pagination-padding-x-lg:           1.5rem !default;
$pagination-line-height:            1.25 !default;

$pagination-color:                  $link-color !default;
$pagination-bg:                     $white !default;
$pagination-border-width:           $border-width !default;
$pagination-border-color:           $gray-300 !default;

$pagination-focus-box-shadow:       $input-btn-focus-box-shadow !default;

$pagination-hover-color:            $link-hover-color !default;
$pagination-hover-bg:               $gray-200 !default;
$pagination-hover-border-color:     $gray-300 !default;

$pagination-active-color:           $component-active-color !default;
$pagination-active-bg:              $component-active-bg !default;
$pagination-active-border-color:    $pagination-active-bg !default;

$pagination-disabled-color:         $gray-600 !default;
$pagination-disabled-bg:            $white !default;
$pagination-disabled-border-color:  $gray-300 !default;


// Jumbotron

$jumbotron-padding:                 2rem !default;
$jumbotron-bg:                      $gray-200 !default;


// Cards

$card-spacer-y:                     .75rem !default;
$card-spacer-x:                     1.25rem !default;
$card-border-width:                 $border-width !default;
$card-border-radius:                $border-radius !default;
$card-border-color:                 rgba($black, .125) !default;
$card-inner-border-radius:          calc(#{$card-border-radius} - #{$card-border-width}) !default;
$card-cap-bg:                       rgba($black, .03) !default;
$card-bg:                           $white !default;

$card-img-overlay-padding:          1.25rem !default;

$card-group-margin:                 ($grid-gutter-width / 2) !default;
$card-deck-margin:                  $card-group-margin !default;

$card-columns-count:                3 !default;
$card-columns-gap:                  1.25rem !default;
$card-columns-margin:               $card-spacer-y !default;


// Tooltips

$tooltip-font-size:           $font-size-sm !default;
$tooltip-max-width:           200px !default;
$tooltip-color:               $white !default;
$tooltip-bg:                  $black !default;
$tooltip-border-radius:        $border-radius !default;
$tooltip-opacity:             .9 !default;
$tooltip-padding-y:           .25rem !default;
$tooltip-padding-x:           .5rem !default;
$tooltip-margin:              0 !default;

$tooltip-arrow-width:         .8rem !default;
$tooltip-arrow-height:        .4rem !default;
$tooltip-arrow-color:         $tooltip-bg !default;


// Popovers

$popover-font-size:                 $font-size-sm !default;
$popover-bg:                        $white !default;
$popover-max-width:                 276px !default;
$popover-border-width:              $border-width !default;
$popover-border-color:              rgba($black, .2) !default;
$popover-border-radius:             $border-radius-lg !default;
$popover-box-shadow:                0 .25rem .5rem rgba($black, .2) !default;

$popover-header-bg:                 darken($popover-bg, 3%) !default;
$popover-header-color:              $headings-color !default;
$popover-header-padding-y:          .5rem !default;
$popover-header-padding-x:          .75rem !default;

$popover-body-color:                $body-color !default;
$popover-body-padding-y:            $popover-header-padding-y !default;
$popover-body-padding-x:            $popover-header-padding-x !default;

$popover-arrow-width:               1rem !default;
$popover-arrow-height:              .5rem !default;
$popover-arrow-color:               $popover-bg !default;

$popover-arrow-outer-color:         fade-in($popover-border-color, .05) !default;


// Badges

$badge-font-size:                   75% !default;
$badge-font-weight:                 $font-weight-bold !default;
$badge-padding-y:                   .25em !default;
$badge-padding-x:                   .4em !default;
$badge-border-radius:               $border-radius !default;

$badge-pill-padding-x:              .6em !default;
// Use a higher than normal value to ensure completely rounded edges when
// customizing padding or font-size on labels.
$badge-pill-border-radius:          10rem !default;


// Modals

// Padding applied to the modal body
$modal-inner-padding:         1rem !default;

$modal-dialog-margin:         .5rem !default;
$modal-dialog-margin-y-sm-up: 1.75rem !default;

$modal-title-line-height:           $line-height-base !default;

$modal-content-bg:               $white !default;
$modal-content-border-color:     rgba($black, .2) !default;
$modal-content-border-width:     $border-width !default;
$modal-content-box-shadow-xs:    0 .25rem .5rem rgba($black, .5) !default;
$modal-content-box-shadow-sm-up: 0 .5rem 1rem rgba($black, .5) !default;

$modal-backdrop-bg:           $black !default;
$modal-backdrop-opacity:      .5 !default;
$modal-header-border-color:   $gray-200 !default;
$modal-footer-border-color:   $modal-header-border-color !default;
$modal-header-border-width:   $modal-content-border-width !default;
$modal-footer-border-width:   $modal-header-border-width !default;
$modal-header-padding:        1rem !default;

$modal-lg:                          800px !default;
$modal-md:                          500px !default;
$modal-sm:                          300px !default;

$modal-transition:                  transform .3s ease-out !default;


// Alerts
//
// Define alert colors, border radius, and padding.

$alert-padding-y:                   .75rem !default;
$alert-padding-x:                   1.25rem !default;
$alert-margin-bottom:               1rem !default;
$alert-border-radius:               $border-radius !default;
$alert-link-font-weight:            $font-weight-bold !default;
$alert-border-width:                $border-width !default;

$alert-bg-level:                    -10 !default;
$alert-border-level:                -9 !default;
$alert-color-level:                 6 !default;


// Progress bars

$progress-height:                   1rem !default;
$progress-font-size:                ($font-size-base * .75) !default;
$progress-bg:                       $gray-200 !default;
$progress-border-radius:            $border-radius !default;
$progress-box-shadow:               inset 0 .1rem .1rem rgba($black, .1) !default;
$progress-bar-color:                $white !default;
$progress-bar-bg:                   theme-color("primary") !default;
$progress-bar-animation-timing:     1s linear infinite !default;
$progress-bar-transition:           width .6s ease !default;

// List group

$list-group-bg:                     $white !default;
$list-group-border-color:           rgba($black, .125) !default;
$list-group-border-width:           $border-width !default;
$list-group-border-radius:          $border-radius !default;

$list-group-item-padding-y:         .75rem !default;
$list-group-item-padding-x:         1.25rem !default;

$list-group-hover-bg:               $gray-100 !default;
$list-group-active-color:           $component-active-color !default;
$list-group-active-bg:              $component-active-bg !default;
$list-group-active-border-color:    $list-group-active-bg !default;

$list-group-disabled-color:         $gray-600 !default;
$list-group-disabled-bg:            $list-group-bg !default;

$list-group-action-color:           $gray-700 !default;
$list-group-action-hover-color:     $list-group-action-color !default;

$list-group-action-active-color:    $body-color !default;
$list-group-action-active-bg:       $gray-200 !default;


// Image thumbnails

$thumbnail-padding:                 .25rem !default;
$thumbnail-bg:                      $body-bg !default;
$thumbnail-border-width:            $border-width !default;
$thumbnail-border-color:            $gray-300 !default;
$thumbnail-border-radius:           $border-radius !default;
$thumbnail-box-shadow:              0 1px 2px rgba($black, .075) !default;


// Figures

$figure-caption-font-size:          90% !default;
$figure-caption-color:              $gray-600 !default;


// Breadcrumbs

$breadcrumb-padding-y:              .75rem !default;
$breadcrumb-padding-x:              1rem !default;
$breadcrumb-item-padding:           .5rem !default;

$breadcrumb-margin-bottom:          1rem !default;

$breadcrumb-bg:                     $gray-200 !default;
$breadcrumb-divider-color:          $gray-600 !default;
$breadcrumb-active-color:           $gray-600 !default;
$breadcrumb-divider:                "/" !default;


// Carousel

$carousel-control-color:            $white !default;
$carousel-control-width:            15% !default;
$carousel-control-opacity:          .5 !default;

$carousel-indicator-width:          30px !default;
$carousel-indicator-height:         3px !default;
$carousel-indicator-spacer:         3px !default;
$carousel-indicator-active-bg:      $white !default;

$carousel-caption-width:            70% !default;
$carousel-caption-color:            $white !default;

$carousel-control-icon-width:       20px !default;

$carousel-control-prev-icon-bg:     str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='#{$carousel-control-color}' viewBox='0 0 8 8'%3E%3Cpath d='M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z'/%3E%3C/svg%3E"), "#", "%23") !default;
$carousel-control-next-icon-bg:     str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='#{$carousel-control-color}' viewBox='0 0 8 8'%3E%3Cpath d='M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z'/%3E%3C/svg%3E"), "#", "%23") !default;

$carousel-transition:               transform .6s ease !default;


// Close

$close-font-size:                   $font-size-base * 1.5 !default;
$close-font-weight:                 $font-weight-bold !default;
$close-color:                       $black !default;
$close-text-shadow:                 0 1px 0 $white !default;

// Code

$code-font-size:                    87.5% !default;
$code-color:                        $pink !default;

$kbd-padding-y:                     .2rem !default;
$kbd-padding-x:                     .4rem !default;
$kbd-font-size:                     $code-font-size !default;
$kbd-color:                         $white !default;
$kbd-bg:                            $gray-900 !default;

$pre-color:                         $gray-900 !default;
$pre-scrollable-max-height:         340px !default;


// Printing
$print-page-size:                   a3 !default;
$print-body-min-width:              map-get($grid-breakpoints, "lg") !default;

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

// stylelint-disable indentation

// Hover mixin and `$enable-hover-media-query` are deprecated.
//
// Origally added during our alphas and maintained during betas, this mixin was
// designed to prevent `:hover` stickiness on iOS—an issue where hover styles
// would persist after initial touch.
//
// For backward compatibility, we've kept these mixins and updated them to
// always return their regular psuedo-classes instead of a shimmed media query.
//
// Issue: https://github.com/twbs/bootstrap/issues/25195

@mixin hover {
  &:hover { @content; }
}

@mixin hover-focus {
  &:hover,
  &:focus {
    @content;
  }
}

@mixin plain-hover-focus {
  &,
  &:hover,
  &:focus {
    @content;
  }
}

@mixin hover-focus-active {
  &:hover,
  &:focus,
  &:active {
    @content;
  }
}

// Image Mixins
// - Responsive image
// - Retina image


// Responsive image
//
// Keep images from scaling beyond the width of their parents.

@mixin img-fluid {
  // Part 1: Set a maximum relative to the parent
  max-width: 100%;
  // Part 2: Override the height to auto, otherwise images will be stretched
  // when setting a width and height attribute on the img element.
  height: auto;
}


// Retina image
//
// Short retina mixin for setting background-image and -size.

// stylelint-disable indentation, media-query-list-comma-newline-after
@mixin img-retina($file-1x, $file-2x, $width-1x, $height-1x) {
  background-image: url($file-1x);

  // Autoprefixer takes care of adding -webkit-min-device-pixel-ratio and -o-min-device-pixel-ratio,
  // but doesn't convert dppx=>dpi.
  // There's no such thing as unprefixed min-device-pixel-ratio since it's nonstandard.
  // Compatibility info: https://caniuse.com/#feat=css-media-resolution
  @media only screen and (min-resolution: 192dpi), // IE9-11 don't support dppx
  only screen and (min-resolution: 2dppx) { // Standardized
    background-image: url($file-2x);
    background-size: $width-1x $height-1x;
  }
}

@mixin badge-variant($bg) {
  color: color-yiq($bg);
  background-color: $bg;

  &[href] {
    @include hover-focus {
      color: color-yiq($bg);
      text-decoration: none;
      background-color: darken($bg, 10%);
    }
  }
}

// Resize anything

@mixin resizable($direction) {
  overflow: auto; // Per CSS3 UI, `resize` only applies when `overflow` isn't `visible`
  resize: $direction; // Options: horizontal, vertical, both
}

// Only display content to screen readers
//
// See: http://a11yproject.com/posts/how-to-hide-content/
// See: https://hugogiraudel.com/2016/10/13/css-hide-and-seek/

@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  clip-path: inset(50%);
  border: 0;
}

// Use in conjunction with .sr-only to only display content when it's focused.
//
// Useful for "Skip to main content" links; see https://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
//
// Credit: HTML5 Boilerplate

@mixin sr-only-focusable {
  &:active,
  &:focus {
    position: static;
    width: auto;
    height: auto;
    overflow: visible;
    clip: auto;
    white-space: normal;
    clip-path: none;
  }
}

// Sizing shortcuts

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin reset-text {
  font-family: $font-family-base;
  // We deliberately do NOT reset font-size or word-wrap.
  font-style: normal;
  font-weight: $font-weight-normal;
  line-height: $line-height-base;
  text-align: left; // Fallback for where `start` is not supported
  text-align: start; // stylelint-disable-line declaration-block-no-duplicate-properties
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  word-spacing: normal;
  white-space: normal;
  line-break: auto;
}

// stylelint-disable declaration-no-important

// Typography

@mixin text-emphasis-variant($parent, $color) {
  #{$parent} {
    color: $color !important;
  }
  a#{$parent} {
    @include hover-focus {
      color: darken($color, 10%) !important;
    }
  }
}

// CSS image replacement
@mixin text-hide() {
  // stylelint-disable-next-line font-family-no-missing-generic-family-keyword
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

// Text truncate
// Requires inline-block or block for proper styling

@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// stylelint-disable declaration-no-important

// Visibility

@mixin invisible($visibility) {
  visibility: $visibility !important;
}

@mixin alert-variant($background, $border, $color) {
  color: $color;
  @include gradient-bg($background);
  border-color: $border;

  hr {
    border-top-color: darken($border, 5%);
  }

  .alert-link {
    color: darken($color, 10%);
  }
}

// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($background, $border, $hover-background: darken($background, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%)) {
  color: color-yiq($background);
  @include gradient-bg($background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);

  @include hover {
    color: color-yiq($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
  }

  &:focus,
  &.focus {
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
    } @else {
      box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq($background);
    background-color: $background;
    border-color: $border;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
      }
    }
  }
}

@mixin button-outline-variant($color, $color-hover: color-yiq($color), $active-background: $color, $active-border: $color) {
  color: $color;
  background-color: transparent;
  background-image: none;
  border-color: $color;

  &:hover {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
  }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow != none {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
      }
    }
  }
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  line-height: $line-height;
  // Manually declare to provide an override to the browser default
  @if $enable-rounded {
    border-radius: $border-radius;
  } @else {
    border-radius: 0;
  }
}

@mixin caret-down {
  border-top: $caret-width solid;
  border-right: $caret-width solid transparent;
  border-bottom: 0;
  border-left: $caret-width solid transparent;
}

@mixin caret-up {
  border-top: 0;
  border-right: $caret-width solid transparent;
  border-bottom: $caret-width solid;
  border-left: $caret-width solid transparent;
}

@mixin caret-right {
  border-top: $caret-width solid transparent;
  border-bottom: $caret-width solid transparent;
  border-left: $caret-width solid;
}

@mixin caret-left {
  border-top: $caret-width solid transparent;
  border-right: $caret-width solid;
  border-bottom: $caret-width solid transparent;
}

@mixin caret($direction: down) {
  @if $enable-caret {
    &::after {
      display: inline-block;
      width: 0;
      height: 0;
      margin-left: $caret-width * .85;
      vertical-align: $caret-width * .85;
      content: "";
      @if $direction == down {
        @include caret-down;
      } @else if $direction == up {
        @include caret-up;
      } @else if $direction == right {
        @include caret-right;
      }
    }

    @if $direction == left {
      &::after {
        display: none;
      }

      &::before {
        display: inline-block;
        width: 0;
        height: 0;
        margin-right: $caret-width * .85;
        vertical-align: $caret-width * .85;
        content: "";
        @include caret-left;
      }
    }

    &:empty::after {
      margin-left: 0;
    }
  }
}

// Pagination

@mixin pagination-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  .page-link {
    padding: $padding-y $padding-x;
    font-size: $font-size;
    line-height: $line-height;
  }

  .page-item {
    &:first-child {
      .page-link {
        @include border-left-radius($border-radius);
      }
    }
    &:last-child {
      .page-link {
        @include border-right-radius($border-radius);
      }
    }
  }
}

// Lists

// Unstyled keeps list items block level, just removes default browser padding and list-style
@mixin list-unstyled {
  padding-left: 0;
  list-style: none;
}

// List Groups

@mixin list-group-item-variant($state, $background, $color) {
  .list-group-item-#{$state} {
    color: $color;
    background-color: $background;

    &.list-group-item-action {
      @include hover-focus {
        color: $color;
        background-color: darken($background, 5%);
      }

      &.active {
        color: #fff;
        background-color: $color;
        border-color: $color;
      }
    }
  }
}

// Horizontal dividers
//
// Dividers (basically an hr) within dropdowns and nav lists

@mixin nav-divider($color: #e5e5e5) {
  height: 0;
  margin: ($spacer / 2) 0;
  overflow: hidden;
  border-top: 1px solid $color;
}

// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `$input-focus-border-color` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.
@mixin form-control-focus() {
  &:focus {
    color: $input-focus-color;
    background-color: $input-focus-bg;
    border-color: $input-focus-border-color;
    outline: 0;
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $input-box-shadow, $input-focus-box-shadow;
    } @else {
      box-shadow: $input-focus-box-shadow;
    }
  }
}


@mixin form-validation-state($state, $color) {
  .#{$state}-feedback {
    display: none;
    width: 100%;
    margin-top: $form-feedback-margin-top;
    font-size: $form-feedback-font-size;
    color: $color;
  }

  .#{$state}-tooltip {
    position: absolute;
    top: 100%;
    z-index: 5;
    display: none;
    max-width: 100%; // Contain to parent when possible
    padding: .5rem;
    margin-top: .1rem;
    font-size: .875rem;
    line-height: 1;
    color: #fff;
    background-color: rgba($color, .8);
    border-radius: .2rem;
  }

  .form-control,
  .custom-select {
    .was-validated &:#{$state},
    &.is-#{$state} {
      border-color: $color;

      &:focus {
        border-color: $color;
        box-shadow: 0 0 0 $input-focus-width rgba($color, .25);
      }

      ~ .#{$state}-feedback,
      ~ .#{$state}-tooltip {
        display: block;
      }
    }
  }

  .form-check-input {
    .was-validated &:#{$state},
    &.is-#{$state} {
      ~ .form-check-label {
        color: $color;
      }

      ~ .#{$state}-feedback,
      ~ .#{$state}-tooltip {
        display: block;
      }
    }
  }

  .custom-control-input {
    .was-validated &:#{$state},
    &.is-#{$state} {
      ~ .custom-control-label {
        color: $color;

        &::before {
          background-color: lighten($color, 25%);
        }
      }

      ~ .#{$state}-feedback,
      ~ .#{$state}-tooltip {
        display: block;
      }

      &:checked {
        ~ .custom-control-label::before {
          @include gradient-bg(lighten($color, 10%));
        }
      }

      &:focus {
        ~ .custom-control-label::before {
          box-shadow: 0 0 0 1px $body-bg, 0 0 0 $input-focus-width rgba($color, .25);
        }
      }
    }
  }

  // custom file
  .custom-file-input {
    .was-validated &:#{$state},
    &.is-#{$state} {
      ~ .custom-file-label {
        border-color: $color;

        &::before { border-color: inherit; }
      }

      ~ .#{$state}-feedback,
      ~ .#{$state}-tooltip {
        display: block;
      }

      &:focus {
        ~ .custom-file-label {
          box-shadow: 0 0 0 $input-focus-width rgba($color, .25);
        }
      }
    }
  }
}

// Tables

@mixin table-row-variant($state, $background) {
  // Exact selectors below required to override `.table-striped` and prevent
  // inheritance to nested tables.
  .table-#{$state} {
    &,
    > th,
    > td {
      background-color: $background;
    }
  }

  // Hover states for `.table-hover`
  // Note: this is not available for cells or rows within `thead` or `tfoot`.
  .table-hover {
    $hover-background: darken($background, 5%);

    .table-#{$state} {
      @include hover {
        background-color: $hover-background;

        > td,
        > th {
          background-color: $hover-background;
        }
      }
    }
  }
}

// stylelint-disable declaration-no-important

// Contextual backgrounds

@mixin bg-variant($parent, $color) {
  #{$parent} {
    background-color: $color !important;
  }
  a#{$parent},
  button#{$parent} {
    @include hover-focus {
      background-color: darken($color, 10%) !important;
    }
  }
}

@mixin bg-gradient-variant($parent, $color) {
  #{$parent} {
    background: $color linear-gradient(180deg, mix($body-bg, $color, 15%), $color) repeat-x !important;
  }
}

// Single side border-radius

@mixin border-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-radius: $radius;
  }
}

@mixin border-top-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
  }
}

@mixin border-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
  }
}

@mixin border-bottom-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

@mixin border-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

@mixin box-shadow($shadow...) {
  @if $enable-shadows {
    box-shadow: $shadow;
  }
}

// Gradients

@mixin gradient-bg($color) {
  @if $enable-gradients {
    background: $color linear-gradient(180deg, mix($body-bg, $color, 15%), $color) repeat-x;
  } @else {
    background-color: $color;
  }
}

// Horizontal gradient, from left to right
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
@mixin gradient-x($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
  background-repeat: repeat-x;
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
@mixin gradient-y($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
  background-repeat: repeat-x;
}

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
  background-image: linear-gradient($deg, $start-color, $end-color);
  background-repeat: repeat-x;
}
@mixin gradient-x-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
}
@mixin gradient-y-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
}
@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}
@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}

@mixin transition($transition...) {
  @if $enable-transitions {
    @if length($transition) == 0 {
      transition: $transition-base;
    } @else {
      transition: $transition;
    }
  }
}

@mixin clearfix() {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty
    padding-right: ($gutter / 2);
    padding-left: ($gutter / 2);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .order#{$infix}-first { order: -1; }

      .order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} { order: $i; }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container() {
  width: 100%;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
  margin-right: auto;
  margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-right: ($grid-gutter-width / -2);
  margin-left: ($grid-gutter-width / -2);
}

@mixin make-col-ready() {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  min-height: 1px; // Prevent collapsing
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

// stylelint-disable declaration-no-important

@mixin float-left {
  float: left !important;
}
@mixin float-right {
  float: right !important;
}
@mixin float-none {
  float: none !important;
}

:root {
  // Custom variable values only support SassScript inside `#{}`.
  @each $color, $value in $colors {
    --#{$color}: #{$value};
  }

  @each $color, $value in $theme-colors {
    --#{$color}: #{$value};
  }

  @each $bp, $value in $grid-breakpoints {
    --breakpoint-#{$bp}: #{$value};
  }

  // Use `inspect` for lists so that quoted items keep the quotes.
  // See https://github.com/sass/sass/issues/2383#issuecomment-336349172
  --font-family-sans-serif: #{inspect($font-family-sans-serif)};
  --font-family-monospace: #{inspect($font-family-monospace)};
}

// stylelint-disable at-rule-no-vendor-prefix, declaration-no-important, selector-no-qualifying-type, property-no-vendor-prefix

// Reboot
//
// Normalization of HTML elements, manually forked from Normalize.css to remove
// styles targeting irrelevant browsers while applying new styles.
//
// Normalize is licensed MIT. https://github.com/necolas/normalize.css


// Document
//
// 1. Change from `box-sizing: content-box` so that `width` is not affected by `padding` or `border`.
// 2. Change the default font family in all browsers.
// 3. Correct the line height in all browsers.
// 4. Prevent adjustments of font size after orientation changes in IE on Windows Phone and in iOS.
// 5. Setting @viewport causes scrollbars to overlap content in IE11 and Edge, so
//    we force a non-overlapping, non-auto-hiding scrollbar to counteract.
// 6. Change the default tap highlight to be completely transparent in iOS.

*,
*::before,
*::after {
  box-sizing: border-box; // 1
}

html {
  font-family: sans-serif; // 2
  line-height: 1.15; // 3
  -webkit-text-size-adjust: 100%; // 4
  -ms-text-size-adjust: 100%; // 4
  -ms-overflow-style: scrollbar; // 5
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0); // 6
}

// IE10+ doesn't honor `<meta name="viewport">` in some cases.
@at-root {
  @-ms-viewport {
    width: device-width;
  }
}

// stylelint-disable selector-list-comma-newline-after
// Shim for "new" HTML5 structural elements to display correctly (IE10, older browsers)
article, aside, dialog, figcaption, figure, footer, header, hgroup, main, nav, section {
  display: block;
}
// stylelint-enable selector-list-comma-newline-after

// Body
//
// 1. Remove the margin in all browsers.
// 2. As a best practice, apply a default `background-color`.
// 3. Set an explicit initial text-align value so that we can later use the
//    the `inherit` value on things like `<th>` elements.

body {
  margin: 0; // 1
  font-family: $font-family-base;
  font-size: $font-size-base;
  font-weight: $font-weight-base;
  line-height: $line-height-base;
  color: $body-color;
  text-align: left; // 3
  background-color: $body-bg; // 2
}

// Suppress the focus outline on elements that cannot be accessed via keyboard.
// This prevents an unwanted focus outline from appearing around elements that
// might still respond to pointer events.
//
// Credit: https://github.com/suitcss/base
[tabindex="-1"]:focus {
  outline: 0 !important;
}


// Content grouping
//
// 1. Add the correct box sizing in Firefox.
// 2. Show the overflow in Edge and IE.

hr {
  box-sizing: content-box; // 1
  height: 0; // 1
  overflow: visible; // 2
}


//
// Typography
//

// Remove top margins from headings
//
// By default, `<h1>`-`<h6>` all receive top and bottom margins. We nuke the top
// margin for easier control within type scales as it avoids margin collapsing.
// stylelint-disable selector-list-comma-newline-after
h1, h2, h3, h4, h5, h6 {
  margin-top: 0;
  margin-bottom: $headings-margin-bottom;
}
// stylelint-enable selector-list-comma-newline-after

// Reset margins on paragraphs
//
// Similarly, the top margin on `<p>`s get reset. However, we also reset the
// bottom margin to use `rem` units instead of `em`.
p {
  margin-top: 0;
  margin-bottom: $paragraph-margin-bottom;
}

// Abbreviations
//
// 1. Remove the bottom border in Firefox 39-.
// 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
// 3. Add explicit cursor to indicate changed behavior.
// 4. Duplicate behavior to the data-* attribute for our tooltip plugin

abbr[title],
abbr[data-original-title] { // 4
  text-decoration: underline; // 2
  text-decoration: underline dotted; // 2
  cursor: help; // 3
  border-bottom: 0; // 1
}

address {
  margin-bottom: 1rem;
  font-style: normal;
  line-height: inherit;
}

ol,
ul,
dl {
  margin-top: 0;
  margin-bottom: 1rem;
}

ol ol,
ul ul,
ol ul,
ul ol {
  margin-bottom: 0;
}

dt {
  font-weight: $dt-font-weight;
}

dd {
  margin-bottom: .5rem;
  margin-left: 0; // Undo browser default
}

blockquote {
  margin: 0 0 1rem;
}

dfn {
  font-style: italic; // Add the correct font style in Android 4.3-
}

// stylelint-disable font-weight-notation
b,
strong {
  font-weight: bolder; // Add the correct font weight in Chrome, Edge, and Safari
}
// stylelint-enable font-weight-notation

small {
  font-size: 80%; // Add the correct font size in all browsers
}

//
// Prevent `sub` and `sup` elements from affecting the line height in
// all browsers.
//

sub,
sup {
  position: relative;
  font-size: 75%;
  line-height: 0;
  vertical-align: baseline;
}

sub { bottom: -.25em; }
sup { top: -.5em; }


//
// Links
//

a {
  color: $link-color;
  text-decoration: $link-decoration;
  background-color: transparent; // Remove the gray background on active links in IE 10.
  -webkit-text-decoration-skip: objects; // Remove gaps in links underline in iOS 8+ and Safari 8+.

  @include hover {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
  }
}

// And undo these styles for placeholder links/named anchors (without href)
// which have not been made explicitly keyboard-focusable (without tabindex).
// It would be more straightforward to just use a[href] in previous block, but that
// causes specificity issues in many other styles that are too complex to fix.
// See https://github.com/twbs/bootstrap/issues/19402

a:not([href]):not([tabindex]) {
  color: inherit;
  text-decoration: none;

  @include hover-focus {
    color: inherit;
    text-decoration: none;
  }

  &:focus {
    outline: 0;
  }
}


//
// Code
//

// stylelint-disable font-family-no-duplicate-names
pre,
code,
kbd,
samp {
  font-family: monospace, monospace; // Correct the inheritance and scaling of font size in all browsers.
  font-size: 1em; // Correct the odd `em` font sizing in all browsers.
}
// stylelint-enable font-family-no-duplicate-names

pre {
  // Remove browser default top margin
  margin-top: 0;
  // Reset browser default of `1em` to use `rem`s
  margin-bottom: 1rem;
  // Don't allow content to break outside
  overflow: auto;
  // We have @viewport set which causes scrollbars to overlap content in IE11 and Edge, so
  // we force a non-overlapping, non-auto-hiding scrollbar to counteract.
  -ms-overflow-style: scrollbar;
}


//
// Figures
//

figure {
  // Apply a consistent margin strategy (matches our type styles).
  margin: 0 0 1rem;
}


//
// Images and content
//

img {
  vertical-align: middle;
  border-style: none; // Remove the border on images inside links in IE 10-.
}

svg:not(:root) {
  overflow: hidden; // Hide the overflow in IE
}


//
// Tables
//

table {
  border-collapse: collapse; // Prevent double borders
}

caption {
  padding-top: $table-cell-padding;
  padding-bottom: $table-cell-padding;
  color: $text-muted;
  text-align: left;
  caption-side: bottom;
}

th {
  // Matches default `<td>` alignment by inheriting from the `<body>`, or the
  // closest parent with a set `text-align`.
  text-align: inherit;
}


//
// Forms
//

label {
  // Allow labels to use `margin` for spacing.
  display: inline-block;
  margin-bottom: .5rem;
}

// Remove the default `border-radius` that macOS Chrome adds.
//
// Details at https://github.com/twbs/bootstrap/issues/24093
button {
  border-radius: 0;
}

// Work around a Firefox/IE bug where the transparent `button` background
// results in a loss of the default `button` focus styles.
//
// Credit: https://github.com/suitcss/base/
button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color;
}

input,
button,
select,
optgroup,
textarea {
  margin: 0; // Remove the margin in Firefox and Safari
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}

button,
input {
  overflow: visible; // Show the overflow in Edge
}

button,
select {
  text-transform: none; // Remove the inheritance of text transform in Firefox
}

// 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
//    controls in Android 4.
// 2. Correct the inability to style clickable types in iOS and Safari.
button,
html [type="button"], // 1
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; // 2
}

// Remove inner border and padding from Firefox, but don't restore the outline like Normalize.
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  padding: 0;
  border-style: none;
}

input[type="radio"],
input[type="checkbox"] {
  box-sizing: border-box; // 1. Add the correct box sizing in IE 10-
  padding: 0; // 2. Remove the padding in IE 10-
}


input[type="date"],
input[type="time"],
input[type="datetime-local"],
input[type="month"] {
  // Remove the default appearance of temporal inputs to avoid a Mobile Safari
  // bug where setting a custom line-height prevents text from being vertically
  // centered within the input.
  // See https://bugs.webkit.org/show_bug.cgi?id=139848
  // and https://github.com/twbs/bootstrap/issues/11266
  -webkit-appearance: listbox;
}

textarea {
  overflow: auto; // Remove the default vertical scrollbar in IE.
  // Textareas should really only resize vertically so they don't break their (horizontal) containers.
  resize: vertical;
}

fieldset {
  // Browsers set a default `min-width: min-content;` on fieldsets,
  // unlike e.g. `<div>`s, which have `min-width: 0;` by default.
  // So we reset that to ensure fieldsets behave more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359
  // and https://html.spec.whatwg.org/multipage/#the-fieldset-and-legend-elements
  min-width: 0;
  // Reset the default outline behavior of fieldsets so they don't affect page layout.
  padding: 0;
  margin: 0;
  border: 0;
}

// 1. Correct the text wrapping in Edge and IE.
// 2. Correct the color inheritance from `fieldset` elements in IE.
legend {
  display: block;
  width: 100%;
  max-width: 100%; // 1
  padding: 0;
  margin-bottom: .5rem;
  font-size: 1.5rem;
  line-height: inherit;
  color: inherit; // 2
  white-space: normal; // 1
}

progress {
  vertical-align: baseline; // Add the correct vertical alignment in Chrome, Firefox, and Opera.
}

// Correct the cursor style of increment and decrement buttons in Chrome.
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

[type="search"] {
  // This overrides the extra rounded corners on search inputs in iOS so that our
  // `.form-control` class can properly style them. Note that this cannot simply
  // be added to `.form-control` as it's not specific enough. For details, see
  // https://github.com/twbs/bootstrap/issues/11586.
  outline-offset: -2px; // 2. Correct the outline style in Safari.
  -webkit-appearance: none;
}

//
// Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
//

[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

//
// 1. Correct the inability to style clickable types in iOS and Safari.
// 2. Change font properties to `inherit` in Safari.
//

::-webkit-file-upload-button {
  font: inherit; // 2
  -webkit-appearance: button; // 1
}

//
// Correct element displays
//

output {
  display: inline-block;
}

summary {
  display: list-item; // Add the correct display in all browsers
  cursor: pointer;
}

template {
  display: none; // Add the correct display in IE
}

// Always hide an element with the `hidden` HTML attribute (from PureCSS).
// Needed for proper display in IE 10-.
[hidden] {
  display: none !important;
}

// stylelint-disable declaration-no-important, selector-list-comma-newline-after

//
// Headings
//

h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3, .h4, .h5, .h6 {
  margin-bottom: $headings-margin-bottom;
  font-family: $headings-font-family;
  font-weight: $headings-font-weight;
  line-height: $headings-line-height;
  color: $headings-color;
}

h1, .h1 { font-size: $h1-font-size; }
h2, .h2 { font-size: $h2-font-size; }
h3, .h3 { font-size: $h3-font-size; }
h4, .h4 { font-size: $h4-font-size; }
h5, .h5 { font-size: $h5-font-size; }
h6, .h6 { font-size: $h6-font-size; }

.lead {
  font-size: $lead-font-size;
  font-weight: $lead-font-weight;
}

// Type display classes
.display-1 {
  font-size: $display1-size;
  font-weight: $display1-weight;
  line-height: $display-line-height;
}
.display-2 {
  font-size: $display2-size;
  font-weight: $display2-weight;
  line-height: $display-line-height;
}
.display-3 {
  font-size: $display3-size;
  font-weight: $display3-weight;
  line-height: $display-line-height;
}
.display-4 {
  font-size: $display4-size;
  font-weight: $display4-weight;
  line-height: $display-line-height;
}


//
// Horizontal rules
//

hr {
  margin-top: $hr-margin-y;
  margin-bottom: $hr-margin-y;
  border: 0;
  border-top: $hr-border-width solid $hr-border-color;
}


//
// Emphasis
//

small,
.small {
  font-size: $small-font-size;
  font-weight: $font-weight-normal;
}

mark,
.mark {
  padding: $mark-padding;
  background-color: $mark-bg;
}


//
// Lists
//

.list-unstyled {
  @include list-unstyled;
}

// Inline turns list items into inline-block
.list-inline {
  @include list-unstyled;
}
.list-inline-item {
  display: inline-block;

  &:not(:last-child) {
    margin-right: $list-inline-padding;
  }
}


//
// Misc
//

// Builds on `abbr`
.initialism {
  font-size: 90%;
  text-transform: uppercase;
}

// Blockquotes
.blockquote {
  margin-bottom: $spacer;
  font-size: $blockquote-font-size;
}

.blockquote-footer {
  display: block;
  font-size: 80%; // back to default font-size
  color: $blockquote-small-color;

  &::before {
    content: "\2014 \00A0"; // em dash, nbsp
  }
}

// Responsive images (ensure images don't scale beyond their parents)
//
// This is purposefully opt-in via an explicit class rather than being the default for all `<img>`s.
// We previously tried the "images are responsive by default" approach in Bootstrap v2,
// and abandoned it in Bootstrap v3 because it breaks lots of third-party widgets (including Google Maps)
// which weren't expecting the images within themselves to be involuntarily resized.
// See also https://github.com/twbs/bootstrap/issues/18178
.img-fluid {
  @include img-fluid;
}


// Image thumbnails
.img-thumbnail {
  padding: $thumbnail-padding;
  background-color: $thumbnail-bg;
  border: $thumbnail-border-width solid $thumbnail-border-color;
  @include border-radius($thumbnail-border-radius);
  @include box-shadow($thumbnail-box-shadow);

  // Keep them at most 100% wide
  @include img-fluid;
}

//
// Figures
//

.figure {
  // Ensures the caption's text aligns with the image.
  display: inline-block;
}

.figure-img {
  margin-bottom: ($spacer / 2);
  line-height: 1;
}

.figure-caption {
  font-size: $figure-caption-font-size;
  color: $figure-caption-color;
}

// Inline and block code styles
code,
kbd,
pre,
samp {
  font-family: $font-family-monospace;
}

// Inline code
code {
  font-size: $code-font-size;
  color: $code-color;
  word-break: break-word;

  // Streamline the style when inside anchors to avoid broken underline and more
  a > & {
    color: inherit;
  }
}

// User input typically entered via keyboard
kbd {
  padding: $kbd-padding-y $kbd-padding-x;
  font-size: $kbd-font-size;
  color: $kbd-color;
  background-color: $kbd-bg;
  @include border-radius($border-radius-sm);
  @include box-shadow($kbd-box-shadow);

  kbd {
    padding: 0;
    font-size: 100%;
    font-weight: $nested-kbd-font-weight;
    @include box-shadow(none);
  }
}

// Blocks of code
pre {
  display: block;
  font-size: $code-font-size;
  color: $pre-color;

  // Account for some code outputs that place code tags in pre tags
  code {
    font-size: inherit;
    color: inherit;
    word-break: normal;
  }
}

// Enable scrollable blocks of code
.pre-scrollable {
  max-height: $pre-scrollable-max-height;
  overflow-y: scroll;
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
  .container {
    @include make-container();
    @include make-container-max-widths();
  }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but with 100% width for
// fluid, full width layouts.

@if $enable-grid-classes {
  .container-fluid {
    @include make-container();
  }
}

// Row
//
// Rows contain and clear the floats of your columns.

@if $enable-grid-classes {
  .row {
    @include make-row();
  }

  // Remove the negative margin from default .row, then the horizontal padding
  // from all immediate children columns (to prevent runaway style inheritance).
  .no-gutters {
    margin-right: 0;
    margin-left: 0;

    > .col,
    > [class*="col-"] {
      padding-right: 0;
      padding-left: 0;
    }
  }
}

// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
  @include make-grid-columns();
}

//
// Basic Bootstrap table
//

.table {
  width: 100%;
  max-width: 100%;
  margin-bottom: $spacer;
  background-color: $table-bg; // Reset for nesting within parents with `background-color`.

  th,
  td {
    padding: $table-cell-padding;
    vertical-align: top;
    border-top: $table-border-width solid $table-border-color;
  }

  thead th {
    vertical-align: bottom;
    border-bottom: (2 * $table-border-width) solid $table-border-color;
  }

  tbody + tbody {
    border-top: (2 * $table-border-width) solid $table-border-color;
  }

  .table {
    background-color: $body-bg;
  }
}


//
// Condensed table w/ half padding
//

.table-sm {
  th,
  td {
    padding: $table-cell-padding-sm;
  }
}


// Bordered version
//
// Add borders all around the table and between all the columns.

.table-bordered {
  border: $table-border-width solid $table-border-color;

  th,
  td {
    border: $table-border-width solid $table-border-color;
  }

  thead {
    th,
    td {
      border-bottom-width: (2 * $table-border-width);
    }
  }
}


// Zebra-striping
//
// Default zebra-stripe styles (alternating gray and transparent backgrounds)

.table-striped {
  tbody tr:nth-of-type(odd) {
    background-color: $table-accent-bg;
  }
}


// Hover effect
//
// Placed here since it has to come after the potential zebra striping

.table-hover {
  tbody tr {
    @include hover {
      background-color: $table-hover-bg;
    }
  }
}


// Table backgrounds
//
// Exact selectors below required to override `.table-striped` and prevent
// inheritance to nested tables.

@each $color, $value in $theme-colors {
  @include table-row-variant($color, theme-color-level($color, -9));
}

@include table-row-variant(active, $table-active-bg);


// Dark styles
//
// Same table markup, but inverted color scheme: dark background and light text.

// stylelint-disable-next-line no-duplicate-selectors
.table {
  .thead-dark {
    th {
      color: $table-dark-color;
      background-color: $table-dark-bg;
      border-color: $table-dark-border-color;
    }
  }

  .thead-light {
    th {
      color: $table-head-color;
      background-color: $table-head-bg;
      border-color: $table-border-color;
    }
  }
}

.table-dark {
  color: $table-dark-color;
  background-color: $table-dark-bg;

  th,
  td,
  thead th {
    border-color: $table-dark-border-color;
  }

  &.table-bordered {
    border: 0;
  }

  &.table-striped {
    tbody tr:nth-of-type(odd) {
      background-color: $table-dark-accent-bg;
    }
  }

  &.table-hover {
    tbody tr {
      @include hover {
        background-color: $table-dark-hover-bg;
      }
    }
  }
}


// Responsive tables
//
// Generate series of `.table-responsive-*` classes for configuring the screen
// size of where your table will overflow.

.table-responsive {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $next: breakpoint-next($breakpoint, $grid-breakpoints);
    $infix: breakpoint-infix($next, $grid-breakpoints);

    &#{$infix} {
      @include media-breakpoint-down($breakpoint) {
        display: block;
        width: 100%;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        -ms-overflow-style: -ms-autohiding-scrollbar; // See https://github.com/twbs/bootstrap/pull/10057

        // Prevent double border on horizontal scroll due to use of `display: block;`
        > .table-bordered {
          border: 0;
        }
      }
    }
  }
}

// stylelint-disable selector-no-qualifying-type

//
// Textual form controls
//

.form-control {
  display: block;
  width: 100%;
  padding: $input-padding-y $input-padding-x;
  font-size: $font-size-base;
  line-height: $input-line-height;
  color: $input-color;
  background-color: $input-bg;
  background-clip: padding-box;
  border: $input-border-width solid $input-border-color;

  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  @if $enable-rounded {
    // Manually use the if/else instead of the mixin to account for iOS override
    border-radius: $input-border-radius;
  } @else {
    // Otherwise undo the iOS default
    border-radius: 0;
  }

  @include box-shadow($input-box-shadow);
  @include transition($input-transition);

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus();

  // Placeholder
  &::placeholder {
    color: $input-placeholder-color;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: $input-disabled-bg;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }
}

select.form-control {
  &:not([size]):not([multiple]) {
    height: $input-height;
  }

  &:focus::-ms-value {
    // Suppress the nested default white text on blue background highlight given to
    // the selected option text when the (still closed) <select> receives focus
    // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
    // match the appearance of the native widget.
    // See https://github.com/twbs/bootstrap/issues/19398.
    color: $input-color;
    background-color: $input-bg;
  }
}

// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {
  display: block;
  width: 100%;
}


//
// Labels
//

// For use with horizontal and inline forms, when you need the label (or legend)
// text to align with the form controls.
.col-form-label {
  padding-top: calc(#{$input-padding-y} + #{$input-border-width});
  padding-bottom: calc(#{$input-padding-y} + #{$input-border-width});
  margin-bottom: 0; // Override the `<label>/<legend>` default
  font-size: inherit; // Override the `<legend>` default
  line-height: $input-line-height;
}

.col-form-label-lg {
  padding-top: calc(#{$input-padding-y-lg} + #{$input-border-width});
  padding-bottom: calc(#{$input-padding-y-lg} + #{$input-border-width});
  font-size: $font-size-lg;
  line-height: $input-line-height-lg;
}

.col-form-label-sm {
  padding-top: calc(#{$input-padding-y-sm} + #{$input-border-width});
  padding-bottom: calc(#{$input-padding-y-sm} + #{$input-border-width});
  font-size: $font-size-sm;
  line-height: $input-line-height-sm;
}


// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.form-control-plaintext {
  display: block;
  width: 100%;
  padding-top: $input-padding-y;
  padding-bottom: $input-padding-y;
  margin-bottom: 0; // match inputs if this class comes on inputs with default margins
  line-height: $input-line-height;
  background-color: transparent;
  border: solid transparent;
  border-width: $input-border-width 0;

  &.form-control-sm,
  &.form-control-lg {
    padding-right: 0;
    padding-left: 0;
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

.form-control-sm {
  padding: $input-padding-y-sm $input-padding-x-sm;
  font-size: $font-size-sm;
  line-height: $input-line-height-sm;
  @include border-radius($input-border-radius-sm);
}

select.form-control-sm {
  &:not([size]):not([multiple]) {
    height: $input-height-sm;
  }
}

.form-control-lg {
  padding: $input-padding-y-lg $input-padding-x-lg;
  font-size: $font-size-lg;
  line-height: $input-line-height-lg;
  @include border-radius($input-border-radius-lg);
}

select.form-control-lg {
  &:not([size]):not([multiple]) {
    height: $input-height-lg;
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: $form-group-margin-bottom;
}

.form-text {
  display: block;
  margin-top: $form-text-margin-top;
}


// Form grid
//
// Special replacement for our grid system's `.row` for tighter form layouts.

.form-row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -5px;
  margin-left: -5px;

  > .col,
  > [class*="col-"] {
    padding-right: 5px;
    padding-left: 5px;
  }
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.form-check {
  position: relative;
  display: block;
  padding-left: $form-check-input-gutter;
}

.form-check-input {
  position: absolute;
  margin-top: $form-check-input-margin-y;
  margin-left: -$form-check-input-gutter;

  &:disabled ~ .form-check-label {
    color: $text-muted;
  }
}

.form-check-label {
  margin-bottom: 0; // Override default `<label>` bottom margin
}

.form-check-inline {
  display: inline-flex;
  align-items: center;
  padding-left: 0; // Override base .form-check
  margin-right: $form-check-inline-margin-x;

  // Undo .form-check-input defaults and add some `margin-right`.
  .form-check-input {
    position: static;
    margin-top: 0;
    margin-right: $form-check-inline-input-margin-x;
    margin-left: 0;
  }
}


// Form validation
//
// Provide feedback to users when form field values are valid or invalid. Works
// primarily for client-side validation via scoped `:invalid` and `:valid`
// pseudo-classes but also includes `.is-invalid` and `.is-valid` classes for
// server side validation.

@include form-validation-state("valid", $form-feedback-valid-color);
@include form-validation-state("invalid", $form-feedback-invalid-color);

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).

.form-inline {
  display: flex;
  flex-flow: row wrap;
  align-items: center; // Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height)

  // Because we use flex, the initial sizing of checkboxes is collapsed and
  // doesn't occupy the full-width (which is what we want for xs grid tier),
  // so we force that here.
  .form-check {
    width: 100%;
  }

  // Kick in the inline
  @include media-breakpoint-up(sm) {
    label {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 0;
    }

    // Inline-block all the things for "inline"
    .form-group {
      display: flex;
      flex: 0 0 auto;
      flex-flow: row wrap;
      align-items: center;
      margin-bottom: 0;
    }

    // Allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .form-control-plaintext {
      display: inline-block;
    }

    .input-group {
      width: auto;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .form-check {
      display: flex;
      align-items: center;
      justify-content: center;
      width: auto;
      padding-left: 0;
    }
    .form-check-input {
      position: relative;
      margin-top: 0;
      margin-right: $form-check-input-margin-x;
      margin-left: 0;
    }

    .custom-control {
      align-items: center;
      justify-content: center;
    }
    .custom-control-label {
      margin-bottom: 0;
    }
  }
}

// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

.btn {
  display: inline-block;
  font-weight: $btn-font-weight;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: $btn-border-width solid transparent;
  @include button-size($btn-padding-y, $btn-padding-x, $font-size-base, $btn-line-height, $btn-border-radius);
  @include transition($btn-transition);

  // Share hover and focus styles
  @include hover-focus {
    text-decoration: none;
  }

  &:focus,
  &.focus {
    outline: 0;
    box-shadow: $btn-focus-box-shadow;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    opacity: $btn-disabled-opacity;
    @include box-shadow(none);
  }

  // Opinionated: add "hand" cursor to non-disabled .btn elements
  &:not(:disabled):not(.disabled) {
    cursor: pointer;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    background-image: none;
    @include box-shadow($btn-active-box-shadow);

    &:focus {
      @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);
    }
  }
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset:disabled a.btn {
  pointer-events: none;
}


//
// Alternate buttons
//

@each $color, $value in $theme-colors {
  .btn-#{$color} {
    @include button-variant($value, $value);
  }
}

@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    @include button-outline-variant($value);
  }
}


//
// Link buttons
//

// Make a button look and behave like a link
.btn-link {
  font-weight: $font-weight-normal;
  color: $link-color;
  background-color: transparent;

  @include hover {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
    background-color: transparent;
    border-color: transparent;
  }

  &:focus,
  &.focus {
    text-decoration: $link-hover-decoration;
    border-color: transparent;
    box-shadow: none;
  }

  &:disabled,
  &.disabled {
    color: $btn-link-disabled-color;
  }

  // No need for an active state here
}


//
// Button Sizes
//

.btn-lg {
  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $font-size-lg, $btn-line-height-lg, $btn-border-radius-lg);
}

.btn-sm {
  @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $font-size-sm, $btn-line-height-sm, $btn-border-radius-sm);
}


//
// Block button
//

.btn-block {
  display: block;
  width: 100%;

  // Vertically space out multiple block buttons
  + .btn-block {
    margin-top: $btn-block-spacing-y;
  }
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btn-block {
    width: 100%;
  }
}

// stylelint-disable selector-no-qualifying-type

.fade {
  opacity: 0;
  @include transition($transition-fade);

  &.show {
    opacity: 1;
  }
}

.collapse {
  display: none;
  &.show {
    display: block;
  }
}

tr {
  &.collapse.show {
    display: table-row;
  }
}

tbody {
  &.collapse.show {
    display: table-row-group;
  }
}

.collapsing {
  position: relative;
  height: 0;
  overflow: hidden;
  @include transition($transition-collapse);
}

// The dropdown wrapper (`<div>`)
.dropup,
.dropdown {
  position: relative;
}

.dropdown-toggle {
  // Generate the caret automatically
  @include caret;
}

// The dropdown menu
.dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  z-index: $zindex-dropdown;
  display: none; // none by default, but block on "open" of the menu
  float: left;
  min-width: $dropdown-min-width;
  padding: $dropdown-padding-y 0;
  margin: $dropdown-spacer 0 0; // override default ul
  font-size: $font-size-base; // Redeclare because nesting can cause inheritance issues
  color: $body-color;
  text-align: left; // Ensures proper alignment if parent has it changed (e.g., modal footer)
  list-style: none;
  background-color: $dropdown-bg;
  background-clip: padding-box;
  border: $dropdown-border-width solid $dropdown-border-color;
  @include border-radius($dropdown-border-radius);
  @include box-shadow($dropdown-box-shadow);
}

// Allow for dropdowns to go bottom up (aka, dropup-menu)
// Just add .dropup after the standard .dropdown class and you're set.
.dropup {
  .dropdown-menu {
    margin-top: 0;
    margin-bottom: $dropdown-spacer;
  }

  .dropdown-toggle {
    @include caret(up);
  }
}

.dropright {
  .dropdown-menu {
    margin-top: 0;
    margin-left: $dropdown-spacer;
  }

  .dropdown-toggle {
    @include caret(right);
    &::after {
      vertical-align: 0;
    }
  }
}

.dropleft {
  .dropdown-menu {
    margin-top: 0;
    margin-right: $dropdown-spacer;
  }

  .dropdown-toggle {
    @include caret(left);
    &::before {
      vertical-align: 0;
    }
  }
}

// Dividers (basically an `<hr>`) within the dropdown
.dropdown-divider {
  @include nav-divider($dropdown-divider-bg);
}

// Links, buttons, and more within the dropdown menu
//
// `<button>`-specific styles are denoted with `// For <button>s`
.dropdown-item {
  display: block;
  width: 100%; // For `<button>`s
  padding: $dropdown-item-padding-y $dropdown-item-padding-x;
  clear: both;
  font-weight: $font-weight-normal;
  color: $dropdown-link-color;
  text-align: inherit; // For `<button>`s
  white-space: nowrap; // prevent links from randomly breaking onto new lines
  background-color: transparent; // For `<button>`s
  border: 0; // For `<button>`s

  @include hover-focus {
    color: $dropdown-link-hover-color;
    text-decoration: none;
    @include gradient-bg($dropdown-link-hover-bg);
  }

  &.active,
  &:active {
    color: $dropdown-link-active-color;
    text-decoration: none;
    @include gradient-bg($dropdown-link-active-bg);
  }

  &.disabled,
  &:disabled {
    color: $dropdown-link-disabled-color;
    background-color: transparent;
    // Remove CSS gradients if they're enabled
    @if $enable-gradients {
      background-image: none;
    }
  }
}

.dropdown-menu.show {
  display: block;
}

// Dropdown section headers
.dropdown-header {
  display: block;
  padding: $dropdown-padding-y $dropdown-item-padding-x;
  margin-bottom: 0; // for use with heading elements
  font-size: $font-size-sm;
  color: $dropdown-header-color;
  white-space: nowrap; // as with > li > a
}

// stylelint-disable selector-no-qualifying-type

// Make the div behave like a button
.btn-group,
.btn-group-vertical {
  position: relative;
  display: inline-flex;
  vertical-align: middle; // match .btn alignment given font-size hack above

  > .btn {
    position: relative;
    flex: 0 1 auto;

    // Bring the hover, focused, and "active" buttons to the front to overlay
    // the borders properly
    @include hover {
      z-index: 1;
    }
    &:focus,
    &:active,
    &.active {
      z-index: 1;
    }
  }

  // Prevent double borders when buttons are next to each other
  .btn + .btn,
  .btn + .btn-group,
  .btn-group + .btn,
  .btn-group + .btn-group {
    margin-left: -$btn-border-width;
  }
}

// Optional: Group multiple button groups together for a toolbar
.btn-toolbar {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;

  .input-group {
    width: auto;
  }
}

.btn-group {
  > .btn:first-child {
    margin-left: 0;
  }

  // Reset rounded corners
  > .btn:not(:last-child):not(.dropdown-toggle),
  > .btn-group:not(:last-child) > .btn {
    @include border-right-radius(0);
  }

  > .btn:not(:first-child),
  > .btn-group:not(:first-child) > .btn {
    @include border-left-radius(0);
  }
}

// Sizing
//
// Remix the default button sizing classes into new ones for easier manipulation.

.btn-group-sm > .btn { @extend .btn-sm; }
.btn-group-lg > .btn { @extend .btn-lg; }


//
// Split button dropdowns
//

.dropdown-toggle-split {
  padding-right: $btn-padding-x * .75;
  padding-left: $btn-padding-x * .75;

  &::after {
    margin-left: 0;
  }
}

.btn-sm + .dropdown-toggle-split {
  padding-right: $btn-padding-x-sm * .75;
  padding-left: $btn-padding-x-sm * .75;
}

.btn-lg + .dropdown-toggle-split {
  padding-right: $btn-padding-x-lg * .75;
  padding-left: $btn-padding-x-lg * .75;
}


// The clickable button for toggling the menu
// Set the same inset shadow as the :active state
.btn-group.show .dropdown-toggle {
  @include box-shadow($btn-active-box-shadow);

  // Show no shadow for `.btn-link` since it has no other button styles.
  &.btn-link {
    @include box-shadow(none);
  }
}


//
// Vertical button groups
//

.btn-group-vertical {
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;

  .btn,
  .btn-group {
    width: 100%;
  }

  > .btn + .btn,
  > .btn + .btn-group,
  > .btn-group + .btn,
  > .btn-group + .btn-group {
    margin-top: -$btn-border-width;
    margin-left: 0;
  }

  // Reset rounded corners
  > .btn:not(:last-child):not(.dropdown-toggle),
  > .btn-group:not(:last-child) > .btn {
    @include border-bottom-radius(0);
  }

  > .btn:not(:first-child),
  > .btn-group:not(:first-child) > .btn {
    @include border-top-radius(0);
  }
}


// Checkbox and radio options
//
// In order to support the browser's form validation feedback, powered by the
// `required` attribute, we have to "hide" the inputs via `clip`. We cannot use
// `display: none;` or `visibility: hidden;` as that also hides the popover.
// Simply visually hiding the inputs via `opacity` would leave them clickable in
// certain cases which is prevented by using `clip` and `pointer-events`.
// This way, we ensure a DOM element is visible to position the popover from.
//
// See https://github.com/twbs/bootstrap/pull/12794 and
// https://github.com/twbs/bootstrap/pull/14559 for more information.

.btn-group-toggle {
  > .btn,
  > .btn-group > .btn {
    margin-bottom: 0; // Override default `<label>` value

    input[type="radio"],
    input[type="checkbox"] {
      position: absolute;
      clip: rect(0, 0, 0, 0);
      pointer-events: none;
    }
  }
}

// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

.input-group {
  position: relative;
  display: flex;
  flex-wrap: wrap; // For form validation feedback
  align-items: stretch;
  width: 100%;

  > .form-control,
  > .custom-select,
  > .custom-file {
    position: relative; // For focus state's z-index
    flex: 1 1 auto;
    // Add width 1% and flex-basis auto to ensure that button will not wrap out
    // the column. Applies to IE Edge+ and Firefox. Chrome does not require this.
    width: 1%;
    margin-bottom: 0;

    // Bring the "active" form control to the top of surrounding elements
    &:focus {
      z-index: 3;
    }

    + .form-control,
    + .custom-select,
    + .custom-file {
      margin-left: -$input-border-width;
    }
  }

  > .form-control,
  > .custom-select {
    &:not(:last-child) { @include border-right-radius(0); }
    &:not(:first-child) { @include border-left-radius(0); }
  }

  // Custom file inputs have more complex markup, thus requiring different
  // border-radius overrides.
  > .custom-file {
    display: flex;
    align-items: center;

    &:not(:last-child) .custom-file-label,
    &:not(:last-child) .custom-file-label::before { @include border-right-radius(0); }
    &:not(:first-child) .custom-file-label,
    &:not(:first-child) .custom-file-label::before { @include border-left-radius(0); }
  }
}


// Prepend and append
//
// While it requires one extra layer of HTML for each, dedicated prepend and
// append elements allow us to 1) be less clever, 2) simplify our selectors, and
// 3) support HTML5 form validation.

.input-group-prepend,
.input-group-append {
  display: flex;

  // Ensure buttons are always above inputs for more visually pleasing borders.
  // This isn't needed for `.input-group-text` since it shares the same border-color
  // as our inputs.
  .btn {
    position: relative;
    z-index: 2;
  }

  .btn + .btn,
  .btn + .input-group-text,
  .input-group-text + .input-group-text,
  .input-group-text + .btn {
    margin-left: -$input-border-width;
  }
}

.input-group-prepend { margin-right: -$input-border-width; }
.input-group-append { margin-left: -$input-border-width; }


// Textual addons
//
// Serves as a catch-all element for any text or radio/checkbox input you wish
// to prepend or append to an input.

.input-group-text {
  display: flex;
  align-items: center;
  padding: $input-padding-y $input-padding-x;
  margin-bottom: 0; // Allow use of <label> elements by overriding our default margin-bottom
  font-size: $font-size-base; // Match inputs
  font-weight: $font-weight-normal;
  line-height: $input-line-height;
  color: $input-group-addon-color;
  text-align: center;
  white-space: nowrap;
  background-color: $input-group-addon-bg;
  border: $input-border-width solid $input-group-addon-border-color;
  @include border-radius($input-border-radius);

  // Nuke default margins from checkboxes and radios to vertically center within.
  input[type="radio"],
  input[type="checkbox"] {
    margin-top: 0;
  }
}


// Sizing
//
// Remix the default form control sizing classes into new ones for easier
// manipulation.

.input-group-lg > .form-control,
.input-group-lg > .input-group-prepend > .input-group-text,
.input-group-lg > .input-group-append > .input-group-text,
.input-group-lg > .input-group-prepend > .btn,
.input-group-lg > .input-group-append > .btn {
  @extend .form-control-lg;
}

.input-group-sm > .form-control,
.input-group-sm > .input-group-prepend > .input-group-text,
.input-group-sm > .input-group-append > .input-group-text,
.input-group-sm > .input-group-prepend > .btn,
.input-group-sm > .input-group-append > .btn {
  @extend .form-control-sm;
}


// Prepend and append rounded corners
//
// These rulesets must come after the sizing ones to properly override sm and lg
// border-radius values when extending. They're more specific than we'd like
// with the `.input-group >` part, but without it, we cannot override the sizing.


.input-group > .input-group-prepend > .btn,
.input-group > .input-group-prepend > .input-group-text,
.input-group > .input-group-append:not(:last-child) > .btn,
.input-group > .input-group-append:not(:last-child) > .input-group-text,
.input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),
.input-group > .input-group-append:last-child > .input-group-text:not(:last-child) {
  @include border-right-radius(0);
}

.input-group > .input-group-append > .btn,
.input-group > .input-group-append > .input-group-text,
.input-group > .input-group-prepend:not(:first-child) > .btn,
.input-group > .input-group-prepend:not(:first-child) > .input-group-text,
.input-group > .input-group-prepend:first-child > .btn:not(:first-child),
.input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child) {
  @include border-left-radius(0);
}

// Embedded icons from Open Iconic.
// Released under MIT and copyright 2014 Waybury.
// https://useiconic.com/open


// Checkboxes and radios
//
// Base class takes care of all the key behavioral aspects.

.custom-control {
  position: relative;
  display: block;
  min-height: (1rem * $line-height-base);
  padding-left: $custom-control-gutter;
}

.custom-control-inline {
  display: inline-flex;
  margin-right: $custom-control-spacer-x;
}

.custom-control-input {
  position: absolute;
  z-index: -1; // Put the input behind the label so it doesn't overlay text
  opacity: 0;

  &:checked ~ .custom-control-label::before {
    color: $custom-control-indicator-checked-color;
    @include gradient-bg($custom-control-indicator-checked-bg);
    @include box-shadow($custom-control-indicator-checked-box-shadow);
  }

  &:focus ~ .custom-control-label::before {
    // the mixin is not used here to make sure there is feedback
    box-shadow: $custom-control-indicator-focus-box-shadow;
  }

  &:active ~ .custom-control-label::before {
    color: $custom-control-indicator-active-color;
    background-color: $custom-control-indicator-active-bg;
    @include box-shadow($custom-control-indicator-active-box-shadow);
  }

  &:disabled {
    ~ .custom-control-label {
      color: $custom-control-label-disabled-color;

      &::before {
        background-color: $custom-control-indicator-disabled-bg;
      }
    }
  }
}

// Custom control indicators
//
// Build the custom controls out of psuedo-elements.

.custom-control-label {
  margin-bottom: 0;

  // Background-color and (when enabled) gradient
  &::before {
    position: absolute;
    top: (($line-height-base - $custom-control-indicator-size) / 2);
    left: 0;
    display: block;
    width: $custom-control-indicator-size;
    height: $custom-control-indicator-size;
    pointer-events: none;
    content: "";
    user-select: none;
    background-color: $custom-control-indicator-bg;
    @include box-shadow($custom-control-indicator-box-shadow);
  }

  // Foreground (icon)
  &::after {
    position: absolute;
    top: (($line-height-base - $custom-control-indicator-size) / 2);
    left: 0;
    display: block;
    width: $custom-control-indicator-size;
    height: $custom-control-indicator-size;
    content: "";
    background-repeat: no-repeat;
    background-position: center center;
    background-size: $custom-control-indicator-bg-size;
  }
}


// Checkboxes
//
// Tweak just a few things for checkboxes.

.custom-checkbox {
  .custom-control-label::before {
    @include border-radius($custom-checkbox-indicator-border-radius);
  }

  .custom-control-input:checked ~ .custom-control-label {
    &::before {
      @include gradient-bg($custom-control-indicator-checked-bg);
    }
    &::after {
      background-image: $custom-checkbox-indicator-icon-checked;
    }
  }

  .custom-control-input:indeterminate ~ .custom-control-label {
    &::before {
      @include gradient-bg($custom-checkbox-indicator-indeterminate-bg);
      @include box-shadow($custom-checkbox-indicator-indeterminate-box-shadow);
    }
    &::after {
      background-image: $custom-checkbox-indicator-icon-indeterminate;
    }
  }

  .custom-control-input:disabled {
    &:checked ~ .custom-control-label::before {
      background-color: $custom-control-indicator-checked-disabled-bg;
    }
    &:indeterminate ~ .custom-control-label::before {
      background-color: $custom-control-indicator-checked-disabled-bg;
    }
  }
}

// Radios
//
// Tweak just a few things for radios.

.custom-radio {
  .custom-control-label::before {
    border-radius: $custom-radio-indicator-border-radius;
  }

  .custom-control-input:checked ~ .custom-control-label {
    &::before {
      @include gradient-bg($custom-control-indicator-checked-bg);
    }
    &::after {
      background-image: $custom-radio-indicator-icon-checked;
    }
  }

  .custom-control-input:disabled {
    &:checked ~ .custom-control-label::before {
      background-color: $custom-control-indicator-checked-disabled-bg;
    }
  }
}


// Select
//
// Replaces the browser default select with a custom one, mostly pulled from
// http://primercss.io.
//

.custom-select {
  display: inline-block;
  width: 100%;
  height: $custom-select-height;
  padding: $custom-select-padding-y ($custom-select-padding-x + $custom-select-indicator-padding) $custom-select-padding-y $custom-select-padding-x;
  line-height: $custom-select-line-height;
  color: $custom-select-color;
  vertical-align: middle;
  background: $custom-select-bg $custom-select-indicator no-repeat right $custom-select-padding-x center;
  background-size: $custom-select-bg-size;
  border: $custom-select-border-width solid $custom-select-border-color;
  @if $enable-rounded {
    border-radius: $custom-select-border-radius;
  } @else {
    border-radius: 0;
  }
  appearance: none;

  &:focus {
    border-color: $custom-select-focus-border-color;
    outline: 0;
    box-shadow: $custom-select-focus-box-shadow;

    &::-ms-value {
      // For visual consistency with other platforms/browsers,
      // suppress the default white text on blue background highlight given to
      // the selected option text when the (still closed) <select> receives focus
      // in IE and (under certain conditions) Edge.
      // See https://github.com/twbs/bootstrap/issues/19398.
      color: $input-color;
      background-color: $input-bg;
    }
  }

  &[multiple],
  &[size]:not([size="1"]) {
    height: auto;
    padding-right: $custom-select-padding-x;
    background-image: none;
  }

  &:disabled {
    color: $custom-select-disabled-color;
    background-color: $custom-select-disabled-bg;
  }

  // Hides the default caret in IE11
  &::-ms-expand {
    opacity: 0;
  }
}

.custom-select-sm {
  height: $custom-select-height-sm;
  padding-top: $custom-select-padding-y;
  padding-bottom: $custom-select-padding-y;
  font-size: $custom-select-font-size-sm;
}

.custom-select-lg {
  height: $custom-select-height-lg;
  padding-top: $custom-select-padding-y;
  padding-bottom: $custom-select-padding-y;
  font-size: $custom-select-font-size-lg;
}


// File
//
// Custom file input.

.custom-file {
  position: relative;
  display: inline-block;
  width: 100%;
  height: $custom-file-height;
  margin-bottom: 0;
}

.custom-file-input {
  position: relative;
  z-index: 2;
  width: 100%;
  height: $custom-file-height;
  margin: 0;
  opacity: 0;

  &:focus ~ .custom-file-control {
    border-color: $custom-file-focus-border-color;
    box-shadow: $custom-file-focus-box-shadow;

    &::before {
      border-color: $custom-file-focus-border-color;
    }
  }

  @each $lang, $value in $custom-file-text {
    &:lang(#{$lang}) ~ .custom-file-label::after {
      content: $value;
    }
  }
}

.custom-file-label {
  position: absolute;
  top: 0;
  right: 0;
  left: 0;
  z-index: 1;
  height: $custom-file-height;
  padding: $custom-file-padding-y $custom-file-padding-x;
  line-height: $custom-file-line-height;
  color: $custom-file-color;
  background-color: $custom-file-bg;
  border: $custom-file-border-width solid $custom-file-border-color;
  @include border-radius($custom-file-border-radius);
  @include box-shadow($custom-file-box-shadow);

  &::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    z-index: 3;
    display: block;
    height: calc(#{$custom-file-height} - #{$custom-file-border-width} * 2);
    padding: $custom-file-padding-y $custom-file-padding-x;
    line-height: $custom-file-line-height;
    color: $custom-file-button-color;
    content: "Browse";
    @include gradient-bg($custom-file-button-bg);
    border-left: $custom-file-border-width solid $custom-file-border-color;
    @include border-radius(0 $custom-file-border-radius $custom-file-border-radius 0);
  }
}

// Base class
//
// Kickstart any navigation component with a set of style resets. Works with
// `<nav>`s or `<ul>`s.

.nav {
  display: flex;
  flex-wrap: wrap;
  padding-left: 0;
  margin-bottom: 0;
  list-style: none;
}

.nav-link {
  display: block;
  padding: $nav-link-padding-y $nav-link-padding-x;

  @include hover-focus {
    text-decoration: none;
  }

  // Disabled state lightens text
  &.disabled {
    color: $nav-link-disabled-color;
  }
}

//
// Tabs
//

.nav-tabs {
  border-bottom: $nav-tabs-border-width solid $nav-tabs-border-color;

  .nav-item {
    margin-bottom: -$nav-tabs-border-width;
  }

  .nav-link {
    border: $nav-tabs-border-width solid transparent;
    @include border-top-radius($nav-tabs-border-radius);

    @include hover-focus {
      border-color: $nav-tabs-link-hover-border-color;
    }

    &.disabled {
      color: $nav-link-disabled-color;
      background-color: transparent;
      border-color: transparent;
    }
  }

  .nav-link.active,
  .nav-item.show .nav-link {
    color: $nav-tabs-link-active-color;
    background-color: $nav-tabs-link-active-bg;
    border-color: $nav-tabs-link-active-border-color;
  }

  .dropdown-menu {
    // Make dropdown border overlap tab border
    margin-top: -$nav-tabs-border-width;
    // Remove the top rounded corners here since there is a hard edge above the menu
    @include border-top-radius(0);
  }
}


//
// Pills
//

.nav-pills {
  .nav-link {
    @include border-radius($nav-pills-border-radius);
  }

  .nav-link.active,
  .show > .nav-link {
    color: $nav-pills-link-active-color;
    background-color: $nav-pills-link-active-bg;
  }
}


//
// Justified variants
//

.nav-fill {
  .nav-item {
    flex: 1 1 auto;
    text-align: center;
  }
}

.nav-justified {
  .nav-item {
    flex-basis: 0;
    flex-grow: 1;
    text-align: center;
  }
}


// Tabbable tabs
//
// Hide tabbable panes to start, show them when `.active`

.tab-content {
  > .tab-pane {
    display: none;
  }
  > .active {
    display: block;
  }
}

// Contents
//
// Navbar
// Navbar brand
// Navbar nav
// Navbar text
// Navbar divider
// Responsive navbar
// Navbar position
// Navbar themes


// Navbar
//
// Provide a static navbar from which we expand to create full-width, fixed, and
// other navbar variations.

.navbar {
  position: relative;
  display: flex;
  flex-wrap: wrap; // allow us to do the line break for collapsing content
  align-items: center;
  justify-content: space-between; // space out brand from logo
  padding: $navbar-padding-y $navbar-padding-x;

  // Because flex properties aren't inherited, we need to redeclare these first
  // few properities so that content nested within behave properly.
  > .container,
  > .container-fluid {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: space-between;
  }
}


// Navbar brand
//
// Used for brand, project, or site names.

.navbar-brand {
  display: inline-block;
  padding-top: $navbar-brand-padding-y;
  padding-bottom: $navbar-brand-padding-y;
  margin-right: $navbar-padding-x;
  font-size: $navbar-brand-font-size;
  line-height: inherit;
  white-space: nowrap;

  @include hover-focus {
    text-decoration: none;
  }
}


// Navbar nav
//
// Custom navbar navigation (doesn't require `.nav`, but does make use of `.nav-link`).

.navbar-nav {
  display: flex;
  flex-direction: column; // cannot use `inherit` to get the `.navbar`s value
  padding-left: 0;
  margin-bottom: 0;
  list-style: none;

  .nav-link {
    padding-right: 0;
    padding-left: 0;
  }

  .dropdown-menu {
    position: static;
    float: none;
  }
}


// Navbar text
//
//

.navbar-text {
  display: inline-block;
  padding-top: $nav-link-padding-y;
  padding-bottom: $nav-link-padding-y;
}


// Responsive navbar
//
// Custom styles for responsive collapsing and toggling of navbar contents.
// Powered by the collapse Bootstrap JavaScript plugin.

// When collapsed, prevent the toggleable navbar contents from appearing in
// the default flexbox row orienation. Requires the use of `flex-wrap: wrap`
// on the `.navbar` parent.
.navbar-collapse {
  flex-basis: 100%;
  flex-grow: 1;
  // For always expanded or extra full navbars, ensure content aligns itself
  // properly vertically. Can be easily overridden with flex utilities.
  align-items: center;
}

// Button for toggling the navbar when in its collapsed state
.navbar-toggler {
  padding: $navbar-toggler-padding-y $navbar-toggler-padding-x;
  font-size: $navbar-toggler-font-size;
  line-height: 1;
  background-color: transparent; // remove default button style
  border: $border-width solid transparent; // remove default button style
  @include border-radius($navbar-toggler-border-radius);

  @include hover-focus {
    text-decoration: none;
  }

  // Opinionated: add "hand" cursor to non-disabled .navbar-toggler elements
  &:not(:disabled):not(.disabled) {
    cursor: pointer;
  }
}

// Keep as a separate element so folks can easily override it with another icon
// or image file as needed.
.navbar-toggler-icon {
  display: inline-block;
  width: 1.5em;
  height: 1.5em;
  vertical-align: middle;
  content: "";
  background: no-repeat center center;
  background-size: 100% 100%;
}

// Generate series of `.navbar-expand-*` responsive classes for configuring
// where your navbar collapses.
.navbar-expand {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $next: breakpoint-next($breakpoint, $grid-breakpoints);
    $infix: breakpoint-infix($next, $grid-breakpoints);

    &#{$infix} {
      @include media-breakpoint-down($breakpoint) {
        > .container,
        > .container-fluid {
          padding-right: 0;
          padding-left: 0;
        }
      }

      @include media-breakpoint-up($next) {
        flex-flow: row nowrap;
        justify-content: flex-start;

        .navbar-nav {
          flex-direction: row;

          .dropdown-menu {
            position: absolute;
          }

          .dropdown-menu-right {
            right: 0;
            left: auto; // Reset the default from `.dropdown-menu`
          }

          .nav-link {
            padding-right: $navbar-nav-link-padding-x;
            padding-left: $navbar-nav-link-padding-x;
          }
        }

        // For nesting containers, have to redeclare for alignment purposes
        > .container,
        > .container-fluid {
          flex-wrap: nowrap;
        }

        .navbar-collapse {
          display: flex !important;  // stylelint-disable-line declaration-no-important

          // Changes flex-bases to auto because of an IE10 bug
          flex-basis: auto;
        }

        .navbar-toggler {
          display: none;
        }

        .dropup {
          .dropdown-menu {
            top: auto;
            bottom: 100%;
          }
        }
      }
    }
  }
}


// Navbar themes
//
// Styles for switching between navbars with light or dark background.

// Dark links against a light background
.navbar-light {
  .navbar-brand {
    color: $navbar-light-active-color;

    @include hover-focus {
      color: $navbar-light-active-color;
    }
  }

  .navbar-nav {
    .nav-link {
      color: $navbar-light-color;

      @include hover-focus {
        color: $navbar-light-hover-color;
      }

      &.disabled {
        color: $navbar-light-disabled-color;
      }
    }

    .show > .nav-link,
    .active > .nav-link,
    .nav-link.show,
    .nav-link.active {
      color: $navbar-light-active-color;
    }
  }

  .navbar-toggler {
    color: $navbar-light-color;
    border-color: $navbar-light-toggler-border-color;
  }

  .navbar-toggler-icon {
    background-image: $navbar-light-toggler-icon-bg;
  }

  .navbar-text {
    color: $navbar-light-color;
    a {
      color: $navbar-light-active-color;

      @include hover-focus {
        color: $navbar-light-active-color;
      }
    }
  }
}

// White links against a dark background
.navbar-dark {
  .navbar-brand {
    color: $navbar-dark-active-color;

    @include hover-focus {
      color: $navbar-dark-active-color;
    }
  }

  .navbar-nav {
    .nav-link {
      color: $navbar-dark-color;

      @include hover-focus {
        color: $navbar-dark-hover-color;
      }

      &.disabled {
        color: $navbar-dark-disabled-color;
      }
    }

    .show > .nav-link,
    .active > .nav-link,
    .nav-link.show,
    .nav-link.active {
      color: $navbar-dark-active-color;
    }
  }

  .navbar-toggler {
    color: $navbar-dark-color;
    border-color: $navbar-dark-toggler-border-color;
  }

  .navbar-toggler-icon {
    background-image: $navbar-dark-toggler-icon-bg;
  }

  .navbar-text {
    color: $navbar-dark-color;
    a {
      color: $navbar-dark-active-color;

      @include hover-focus {
        color: $navbar-dark-active-color;
      }
    }
  }
}

//
// Base styles
//

.card {
  position: relative;
  display: flex;
  flex-direction: column;
  min-width: 0;
  word-wrap: break-word;
  background-color: $card-bg;
  background-clip: border-box;
  border: $card-border-width solid $card-border-color;
  @include border-radius($card-border-radius);

  > hr {
    margin-right: 0;
    margin-left: 0;
  }

  > .list-group:first-child {
    .list-group-item:first-child {
      @include border-top-radius($card-border-radius);
    }
  }

  > .list-group:last-child {
    .list-group-item:last-child {
      @include border-bottom-radius($card-border-radius);
    }
  }
}

.card-body {
  // Enable `flex-grow: 1` for decks and groups so that card blocks take up
  // as much space as possible, ensuring footers are aligned to the bottom.
  flex: 1 1 auto;
  padding: $card-spacer-x;
}

.card-title {
  margin-bottom: $card-spacer-y;
}

.card-subtitle {
  margin-top: -($card-spacer-y / 2);
  margin-bottom: 0;
}

.card-text:last-child {
  margin-bottom: 0;
}

.card-link {
  @include hover {
    text-decoration: none;
  }

  + .card-link {
    margin-left: $card-spacer-x;
  }
}

//
// Optional textual caps
//

.card-header {
  padding: $card-spacer-y $card-spacer-x;
  margin-bottom: 0; // Removes the default margin-bottom of <hN>
  background-color: $card-cap-bg;
  border-bottom: $card-border-width solid $card-border-color;

  &:first-child {
    @include border-radius($card-inner-border-radius $card-inner-border-radius 0 0);
  }

  + .list-group {
    .list-group-item:first-child {
      border-top: 0;
    }
  }
}

.card-footer {
  padding: $card-spacer-y $card-spacer-x;
  background-color: $card-cap-bg;
  border-top: $card-border-width solid $card-border-color;

  &:last-child {
    @include border-radius(0 0 $card-inner-border-radius $card-inner-border-radius);
  }
}


//
// Header navs
//

.card-header-tabs {
  margin-right: -($card-spacer-x / 2);
  margin-bottom: -$card-spacer-y;
  margin-left: -($card-spacer-x / 2);
  border-bottom: 0;
}

.card-header-pills {
  margin-right: -($card-spacer-x / 2);
  margin-left: -($card-spacer-x / 2);
}

// Card image
.card-img-overlay {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  padding: $card-img-overlay-padding;
}

.card-img {
  width: 100%; // Required because we use flexbox and this inherently applies align-self: stretch
  @include border-radius($card-inner-border-radius);
}

// Card image caps
.card-img-top {
  width: 100%; // Required because we use flexbox and this inherently applies align-self: stretch
  @include border-top-radius($card-inner-border-radius);
}

.card-img-bottom {
  width: 100%; // Required because we use flexbox and this inherently applies align-self: stretch
  @include border-bottom-radius($card-inner-border-radius);
}


// Card deck

.card-deck {
  display: flex;
  flex-direction: column;

  .card {
    margin-bottom: $card-deck-margin;
  }

  @include media-breakpoint-up(sm) {
    flex-flow: row wrap;
    margin-right: -$card-deck-margin;
    margin-left: -$card-deck-margin;

    .card {
      display: flex;
      // Flexbugs #4: https://github.com/philipwalton/flexbugs#4-flex-shorthand-declarations-with-unitless-flex-basis-values-are-ignored
      flex: 1 0 0%;
      flex-direction: column;
      margin-right: $card-deck-margin;
      margin-bottom: 0; // Override the default
      margin-left: $card-deck-margin;
    }
  }
}


//
// Card groups
//

.card-group {
  display: flex;
  flex-direction: column;

  // The child selector allows nested `.card` within `.card-group`
  // to display properly.
  > .card {
    margin-bottom: $card-group-margin;
  }

  @include media-breakpoint-up(sm) {
    flex-flow: row wrap;
    // The child selector allows nested `.card` within `.card-group`
    // to display properly.
    > .card {
      // Flexbugs #4: https://github.com/philipwalton/flexbugs#4-flex-shorthand-declarations-with-unitless-flex-basis-values-are-ignored
      flex: 1 0 0%;
      margin-bottom: 0;

      + .card {
        margin-left: 0;
        border-left: 0;
      }

      // Handle rounded corners
      @if $enable-rounded {
        &:first-child {
          @include border-right-radius(0);

          .card-img-top,
          .card-header {
            border-top-right-radius: 0;
          }
          .card-img-bottom,
          .card-footer {
            border-bottom-right-radius: 0;
          }
        }

        &:last-child {
          @include border-left-radius(0);

          .card-img-top,
          .card-header {
            border-top-left-radius: 0;
          }
          .card-img-bottom,
          .card-footer {
            border-bottom-left-radius: 0;
          }
        }

        &:only-child {
          @include border-radius($card-border-radius);

          .card-img-top,
          .card-header {
            @include border-top-radius($card-border-radius);
          }
          .card-img-bottom,
          .card-footer {
            @include border-bottom-radius($card-border-radius);
          }
        }

        &:not(:first-child):not(:last-child):not(:only-child) {
          @include border-radius(0);

          .card-img-top,
          .card-img-bottom,
          .card-header,
          .card-footer {
            @include border-radius(0);
          }
        }
      }
    }
  }
}


//
// Columns
//

.card-columns {
  .card {
    margin-bottom: $card-columns-margin;
  }

  @include media-breakpoint-up(sm) {
    column-count: $card-columns-count;
    column-gap: $card-columns-gap;

    .card {
      display: inline-block; // Don't let them vertically span multiple columns
      width: 100%; // Don't let their width change
    }
  }
}

.breadcrumb {
  display: flex;
  flex-wrap: wrap;
  padding: $breadcrumb-padding-y $breadcrumb-padding-x;
  margin-bottom: $breadcrumb-margin-bottom;
  list-style: none;
  background-color: $breadcrumb-bg;
  @include border-radius($border-radius);
}

.breadcrumb-item {
  // The separator between breadcrumbs (by default, a forward-slash: "/")
  + .breadcrumb-item::before {
    display: inline-block; // Suppress underlining of the separator in modern browsers
    padding-right: $breadcrumb-item-padding;
    padding-left: $breadcrumb-item-padding;
    color: $breadcrumb-divider-color;
    content: "#{$breadcrumb-divider}";
  }

  // IE9-11 hack to properly handle hyperlink underlines for breadcrumbs built
  // without `<ul>`s. The `::before` pseudo-element generates an element
  // *within* the .breadcrumb-item and thereby inherits the `text-decoration`.
  //
  // To trick IE into suppressing the underline, we give the pseudo-element an
  // underline and then immediately remove it.
  + .breadcrumb-item:hover::before {
    text-decoration: underline;
  }
  // stylelint-disable-next-line no-duplicate-selectors
  + .breadcrumb-item:hover::before {
    text-decoration: none;
  }

  &.active {
    color: $breadcrumb-active-color;
  }
}

.pagination {
  display: flex;
  @include list-unstyled();
  @include border-radius();
}

.page-link {
  position: relative;
  display: block;
  padding: $pagination-padding-y $pagination-padding-x;
  margin-left: -$pagination-border-width;
  line-height: $pagination-line-height;
  color: $pagination-color;
  background-color: $pagination-bg;
  border: $pagination-border-width solid $pagination-border-color;

  &:hover {
    color: $pagination-hover-color;
    text-decoration: none;
    background-color: $pagination-hover-bg;
    border-color: $pagination-hover-border-color;
  }

  &:focus {
    z-index: 2;
    outline: 0;
    box-shadow: $pagination-focus-box-shadow;
  }

  // Opinionated: add "hand" cursor to non-disabled .page-link elements
  &:not(:disabled):not(.disabled) {
    cursor: pointer;
  }
}

.page-item {
  &:first-child {
    .page-link {
      margin-left: 0;
      @include border-left-radius($border-radius);
    }
  }
  &:last-child {
    .page-link {
      @include border-right-radius($border-radius);
    }
  }

  &.active .page-link {
    z-index: 1;
    color: $pagination-active-color;
    background-color: $pagination-active-bg;
    border-color: $pagination-active-border-color;
  }

  &.disabled .page-link {
    color: $pagination-disabled-color;
    pointer-events: none;
    // Opinionated: remove the "hand" cursor set previously for .page-link
    cursor: auto;
    background-color: $pagination-disabled-bg;
    border-color: $pagination-disabled-border-color;
  }
}


//
// Sizing
//

.pagination-lg {
  @include pagination-size($pagination-padding-y-lg, $pagination-padding-x-lg, $font-size-lg, $line-height-lg, $border-radius-lg);
}

.pagination-sm {
  @include pagination-size($pagination-padding-y-sm, $pagination-padding-x-sm, $font-size-sm, $line-height-sm, $border-radius-sm);
}

// Base class
//
// Requires one of the contextual, color modifier classes for `color` and
// `background-color`.

.badge {
  display: inline-block;
  padding: $badge-padding-y $badge-padding-x;
  font-size: $badge-font-size;
  font-weight: $badge-font-weight;
  line-height: 1;
  text-align: center;
  white-space: nowrap;
  vertical-align: baseline;
  @include border-radius($badge-border-radius);

  // Empty badges collapse automatically
  &:empty {
    display: none;
  }
}

// Quick fix for badges in buttons
.btn .badge {
  position: relative;
  top: -1px;
}

// Pill badges
//
// Make them extra rounded with a modifier to replace v3's badges.

.badge-pill {
  padding-right: $badge-pill-padding-x;
  padding-left: $badge-pill-padding-x;
  @include border-radius($badge-pill-border-radius);
}

// Colors
//
// Contextual variations (linked badges get darker on :hover).

@each $color, $value in $theme-colors {
  .badge-#{$color} {
    @include badge-variant($value);
  }
}

.jumbotron {
  padding: $jumbotron-padding ($jumbotron-padding / 2);
  margin-bottom: $jumbotron-padding;
  background-color: $jumbotron-bg;
  @include border-radius($border-radius-lg);

  @include media-breakpoint-up(sm) {
    padding: ($jumbotron-padding * 2) $jumbotron-padding;
  }
}

.jumbotron-fluid {
  padding-right: 0;
  padding-left: 0;
  @include border-radius(0);
}

//
// Base styles
//

.alert {
  position: relative;
  padding: $alert-padding-y $alert-padding-x;
  margin-bottom: $alert-margin-bottom;
  border: $alert-border-width solid transparent;
  @include border-radius($alert-border-radius);
}

// Headings for larger alerts
.alert-heading {
  // Specified to prevent conflicts of changing $headings-color
  color: inherit;
}

// Provide class for links that match alerts
.alert-link {
  font-weight: $alert-link-font-weight;
}


// Dismissible alerts
//
// Expand the right padding and account for the close button's positioning.

.alert-dismissible {
  padding-right: ($close-font-size + $alert-padding-x * 2);

  // Adjust close link position
  .close {
    position: absolute;
    top: 0;
    right: 0;
    padding: $alert-padding-y $alert-padding-x;
    color: inherit;
  }
}


// Alternate styles
//
// Generate contextual modifier classes for colorizing the alert.

@each $color, $value in $theme-colors {
  .alert-#{$color} {
    @include alert-variant(theme-color-level($color, $alert-bg-level), theme-color-level($color, $alert-border-level), theme-color-level($color, $alert-color-level));
  }
}

@keyframes progress-bar-stripes {
  from { background-position: $progress-height 0; }
  to { background-position: 0 0; }
}

.progress {
  display: flex;
  height: $progress-height;
  overflow: hidden; // force rounded corners by cropping it
  font-size: $progress-font-size;
  background-color: $progress-bg;
  @include border-radius($progress-border-radius);
  @include box-shadow($progress-box-shadow);
}

.progress-bar {
  display: flex;
  flex-direction: column;
  justify-content: center;
  color: $progress-bar-color;
  text-align: center;
  background-color: $progress-bar-bg;
  @include transition($progress-bar-transition);
}

.progress-bar-striped {
  @include gradient-striped();
  background-size: $progress-height $progress-height;
}

.progress-bar-animated {
  animation: progress-bar-stripes $progress-bar-animation-timing;
}

.media {
  display: flex;
  align-items: flex-start;
}

.media-body {
  flex: 1;
}

// Base class
//
// Easily usable on <ul>, <ol>, or <div>.

.list-group {
  display: flex;
  flex-direction: column;

  // No need to set list-style: none; since .list-group-item is block level
  padding-left: 0; // reset padding because ul and ol
  margin-bottom: 0;
}


// Interactive list items
//
// Use anchor or button elements instead of `li`s or `div`s to create interactive
// list items. Includes an extra `.active` modifier class for selected items.

.list-group-item-action {
  width: 100%; // For `<button>`s (anchors become 100% by default though)
  color: $list-group-action-color;
  text-align: inherit; // For `<button>`s (anchors inherit)

  // Hover state
  @include hover-focus {
    color: $list-group-action-hover-color;
    text-decoration: none;
    background-color: $list-group-hover-bg;
  }

  &:active {
    color: $list-group-action-active-color;
    background-color: $list-group-action-active-bg;
  }
}


// Individual list items
//
// Use on `li`s or `div`s within the `.list-group` parent.

.list-group-item {
  position: relative;
  display: block;
  padding: $list-group-item-padding-y $list-group-item-padding-x;
  // Place the border on the list items and negative margin up for better styling
  margin-bottom: -$list-group-border-width;
  background-color: $list-group-bg;
  border: $list-group-border-width solid $list-group-border-color;

  &:first-child {
    @include border-top-radius($list-group-border-radius);
  }

  &:last-child {
    margin-bottom: 0;
    @include border-bottom-radius($list-group-border-radius);
  }

  @include hover-focus {
    z-index: 1; // Place hover/active items above their siblings for proper border styling
    text-decoration: none;
  }

  &.disabled,
  &:disabled {
    color: $list-group-disabled-color;
    background-color: $list-group-disabled-bg;
  }

  // Include both here for `<a>`s and `<button>`s
  &.active {
    z-index: 2; // Place active items above their siblings for proper border styling
    color: $list-group-active-color;
    background-color: $list-group-active-bg;
    border-color: $list-group-active-border-color;
  }
}


// Flush list items
//
// Remove borders and border-radius to keep list group items edge-to-edge. Most
// useful within other components (e.g., cards).

.list-group-flush {
  .list-group-item {
    border-right: 0;
    border-left: 0;
    @include border-radius(0);
  }

  &:first-child {
    .list-group-item:first-child {
      border-top: 0;
    }
  }

  &:last-child {
    .list-group-item:last-child {
      border-bottom: 0;
    }
  }
}


// Contextual variants
//
// Add modifier classes to change text and background color on individual items.
// Organizationally, this must come after the `:hover` states.

@each $color, $value in $theme-colors {
  @include list-group-item-variant($color, theme-color-level($color, -9), theme-color-level($color, 6));
}

.close {
  float: right;
  font-size: $close-font-size;
  font-weight: $close-font-weight;
  line-height: 1;
  color: $close-color;
  text-shadow: $close-text-shadow;
  opacity: .5;

  @include hover-focus {
    color: $close-color;
    text-decoration: none;
    opacity: .75;
  }

  // Opinionated: add "hand" cursor to non-disabled .close elements
  &:not(:disabled):not(.disabled) {
    cursor: pointer;
  }
}

// Additional properties for button version
// iOS requires the button element instead of an anchor tag.
// If you want the anchor version, it requires `href="#"`.
// See https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile

// stylelint-disable property-no-vendor-prefix, selector-no-qualifying-type
button.close {
  padding: 0;
  background-color: transparent;
  border: 0;
  -webkit-appearance: none;
}
// stylelint-enable

// .modal-open      - body class for killing the scroll
// .modal           - container to scroll within
// .modal-dialog    - positioning shell for the actual modal
// .modal-content   - actual modal w/ bg and corners and stuff


// Kill the scroll on the body
.modal-open {
  overflow: hidden;
}

// Container that the modal scrolls within
.modal {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: $zindex-modal;
  display: none;
  overflow: hidden;
  // Prevent Chrome on Windows from adding a focus outline. For details, see
  // https://github.com/twbs/bootstrap/pull/10951.
  outline: 0;
  // We deliberately don't use `-webkit-overflow-scrolling: touch;` due to a
  // gnarly iOS Safari bug: https://bugs.webkit.org/show_bug.cgi?id=158342
  // See also https://github.com/twbs/bootstrap/issues/17695

  .modal-open & {
    overflow-x: hidden;
    overflow-y: auto;
  }
}

// Shell div to position the modal with bottom padding
.modal-dialog {
  position: relative;
  width: auto;
  margin: $modal-dialog-margin;
  // allow clicks to pass through for custom click handling to close modal
  pointer-events: none;

  // When fading in the modal, animate it to slide down
  .modal.fade & {
    @include transition($modal-transition);
    transform: translate(0, -25%);
  }
  .modal.show & {
    transform: translate(0, 0);
  }
}

.modal-dialog-centered {
  display: flex;
  align-items: center;
  min-height: calc(100% - (#{$modal-dialog-margin} * 2));
}

// Actual modal
.modal-content {
  position: relative;
  display: flex;
  flex-direction: column;
  width: 100%; // Ensure `.modal-content` extends the full width of the parent `.modal-dialog`
  // counteract the pointer-events: none; in the .modal-dialog
  pointer-events: auto;
  background-color: $modal-content-bg;
  background-clip: padding-box;
  border: $modal-content-border-width solid $modal-content-border-color;
  @include border-radius($border-radius-lg);
  @include box-shadow($modal-content-box-shadow-xs);
  // Remove focus outline from opened modal
  outline: 0;
}

// Modal background
.modal-backdrop {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: $zindex-modal-backdrop;
  background-color: $modal-backdrop-bg;

  // Fade for backdrop
  &.fade { opacity: 0; }
  &.show { opacity: $modal-backdrop-opacity; }
}

// Modal header
// Top section of the modal w/ title and dismiss
.modal-header {
  display: flex;
  align-items: flex-start; // so the close btn always stays on the upper right corner
  justify-content: space-between; // Put modal header elements (title and dismiss) on opposite ends
  padding: $modal-header-padding;
  border-bottom: $modal-header-border-width solid $modal-header-border-color;
  @include border-top-radius($border-radius-lg);

  .close {
    padding: $modal-header-padding;
    // auto on the left force icon to the right even when there is no .modal-title
    margin: (-$modal-header-padding) (-$modal-header-padding) (-$modal-header-padding) auto;
  }
}

// Title text within header
.modal-title {
  margin-bottom: 0;
  line-height: $modal-title-line-height;
}

// Modal body
// Where all modal content resides (sibling of .modal-header and .modal-footer)
.modal-body {
  position: relative;
  // Enable `flex-grow: 1` so that the body take up as much space as possible
  // when should there be a fixed height on `.modal-dialog`.
  flex: 1 1 auto;
  padding: $modal-inner-padding;
}

// Footer (for actions)
.modal-footer {
  display: flex;
  align-items: center; // vertically center
  justify-content: flex-end; // Right align buttons with flex property because text-align doesn't work on flex items
  padding: $modal-inner-padding;
  border-top: $modal-footer-border-width solid $modal-footer-border-color;

  // Easily place margin between footer elements
  > :not(:first-child) { margin-left: .25rem; }
  > :not(:last-child) { margin-right: .25rem; }
}

// Measure scrollbar width for padding body during modal show/hide
.modal-scrollbar-measure {
  position: absolute;
  top: -9999px;
  width: 50px;
  height: 50px;
  overflow: scroll;
}

// Scale up the modal
@include media-breakpoint-up(sm) {
  // Automatically set modal's width for larger viewports
  .modal-dialog {
    max-width: $modal-md;
    margin: $modal-dialog-margin-y-sm-up auto;
  }

  .modal-dialog-centered {
    min-height: calc(100% - (#{$modal-dialog-margin-y-sm-up} * 2));
  }

  .modal-content {
    @include box-shadow($modal-content-box-shadow-sm-up);
  }

  .modal-sm { max-width: $modal-sm; }

}

@include media-breakpoint-up(lg) {
  .modal-lg { max-width: $modal-lg; }
}

// Base class
.tooltip {
  position: absolute;
  z-index: $zindex-tooltip;
  display: block;
  margin: $tooltip-margin;
  // Our parent element can be arbitrary since tooltips are by default inserted as a sibling of their target element.
  // So reset our font and text properties to avoid inheriting weird values.
  @include reset-text();
  font-size: $tooltip-font-size;
  // Allow breaking very long words so they don't overflow the tooltip's bounds
  word-wrap: break-word;
  opacity: 0;

  &.show { opacity: $tooltip-opacity; }

  .arrow {
    position: absolute;
    display: block;
    width: $tooltip-arrow-width;
    height: $tooltip-arrow-height;

    &::before {
      position: absolute;
      content: "";
      border-color: transparent;
      border-style: solid;
    }
  }
}

.bs-tooltip-top {
  padding: $tooltip-arrow-height 0;

  .arrow {
    bottom: 0;

    &::before {
      top: 0;
      border-width: $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
      border-top-color: $tooltip-arrow-color;
    }
  }
}

.bs-tooltip-right {
  padding: 0 $tooltip-arrow-height;

  .arrow {
    left: 0;
    width: $tooltip-arrow-height;
    height: $tooltip-arrow-width;

    &::before {
      right: 0;
      border-width: ($tooltip-arrow-width / 2) $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
      border-right-color: $tooltip-arrow-color;
    }
  }
}

.bs-tooltip-bottom {
  padding: $tooltip-arrow-height 0;

  .arrow {
    top: 0;

    &::before {
      bottom: 0;
      border-width: 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
      border-bottom-color: $tooltip-arrow-color;
    }
  }
}

.bs-tooltip-left {
  padding: 0 $tooltip-arrow-height;

  .arrow {
    right: 0;
    width: $tooltip-arrow-height;
    height: $tooltip-arrow-width;

    &::before {
      left: 0;
      border-width: ($tooltip-arrow-width / 2) 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
      border-left-color: $tooltip-arrow-color;
    }
  }
}

.bs-tooltip-auto {
  &[x-placement^="top"] {
    @extend .bs-tooltip-top;
  }
  &[x-placement^="right"] {
    @extend .bs-tooltip-right;
  }
  &[x-placement^="bottom"] {
    @extend .bs-tooltip-bottom;
  }
  &[x-placement^="left"] {
    @extend .bs-tooltip-left;
  }
}

// Wrapper for the tooltip content
.tooltip-inner {
  max-width: $tooltip-max-width;
  padding: $tooltip-padding-y $tooltip-padding-x;
  color: $tooltip-color;
  text-align: center;
  background-color: $tooltip-bg;
  @include border-radius($tooltip-border-radius);
}

.popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: $zindex-popover;
  display: block;
  max-width: $popover-max-width;
  // Our parent element can be arbitrary since tooltips are by default inserted as a sibling of their target element.
  // So reset our font and text properties to avoid inheriting weird values.
  @include reset-text();
  font-size: $popover-font-size;
  // Allow breaking very long words so they don't overflow the popover's bounds
  word-wrap: break-word;
  background-color: $popover-bg;
  background-clip: padding-box;
  border: $popover-border-width solid $popover-border-color;
  @include border-radius($popover-border-radius);
  @include box-shadow($popover-box-shadow);

  .arrow {
    position: absolute;
    display: block;
    width: $popover-arrow-width;
    height: $popover-arrow-height;
    margin: 0 $border-radius-lg;

    &::before,
    &::after {
      position: absolute;
      display: block;
      content: "";
      border-color: transparent;
      border-style: solid;
    }
  }
}

.bs-popover-top {
  margin-bottom: $popover-arrow-height;

  .arrow {
    bottom: calc((#{$popover-arrow-height} + #{$popover-border-width}) * -1);
  }

  .arrow::before,
  .arrow::after {
    border-width: $popover-arrow-height ($popover-arrow-width / 2) 0;
  }

  .arrow::before {
    bottom: 0;
    border-top-color: $popover-arrow-outer-color;
  }

  .arrow::after {
    bottom: $popover-border-width;
    border-top-color: $popover-arrow-color;
  }
}

.bs-popover-right {
  margin-left: $popover-arrow-height;

  .arrow {
    left: calc((#{$popover-arrow-height} + #{$popover-border-width}) * -1);
    width: $popover-arrow-height;
    height: $popover-arrow-width;
    margin: $border-radius-lg 0; // make sure the arrow does not touch the popover's rounded corners
  }

  .arrow::before,
  .arrow::after {
    border-width: ($popover-arrow-width / 2) $popover-arrow-height ($popover-arrow-width / 2) 0;
  }

  .arrow::before {
    left: 0;
    border-right-color: $popover-arrow-outer-color;
  }

  .arrow::after {
    left: $popover-border-width;
    border-right-color: $popover-arrow-color;
  }
}

.bs-popover-bottom {
  margin-top: $popover-arrow-height;

  .arrow {
    top: calc((#{$popover-arrow-height} + #{$popover-border-width}) * -1);
  }

  .arrow::before,
  .arrow::after {
    border-width: 0 ($popover-arrow-width / 2) $popover-arrow-height ($popover-arrow-width / 2);
  }

  .arrow::before {
    top: 0;
    border-bottom-color: $popover-arrow-outer-color;
  }

  .arrow::after {
    top: $popover-border-width;
    border-bottom-color: $popover-arrow-color;
  }

  // This will remove the popover-header's border just below the arrow
  .popover-header::before {
    position: absolute;
    top: 0;
    left: 50%;
    display: block;
    width: $popover-arrow-width;
    margin-left: ($popover-arrow-width / -2);
    content: "";
    border-bottom: $popover-border-width solid $popover-header-bg;
  }
}

.bs-popover-left {
  margin-right: $popover-arrow-height;

  .arrow {
    right: calc((#{$popover-arrow-height} + #{$popover-border-width}) * -1);
    width: $popover-arrow-height;
    height: $popover-arrow-width;
    margin: $border-radius-lg 0; // make sure the arrow does not touch the popover's rounded corners
  }

  .arrow::before,
  .arrow::after {
    border-width: ($popover-arrow-width / 2) 0 ($popover-arrow-width / 2) $popover-arrow-height;
  }

  .arrow::before {
    right: 0;
    border-left-color: $popover-arrow-outer-color;
  }

  .arrow::after {
    right: $popover-border-width;
    border-left-color: $popover-arrow-color;
  }
}

.bs-popover-auto {
  &[x-placement^="top"] {
    @extend .bs-popover-top;
  }
  &[x-placement^="right"] {
    @extend .bs-popover-right;
  }
  &[x-placement^="bottom"] {
    @extend .bs-popover-bottom;
  }
  &[x-placement^="left"] {
    @extend .bs-popover-left;
  }
}


// Offset the popover to account for the popover arrow
.popover-header {
  padding: $popover-header-padding-y $popover-header-padding-x;
  margin-bottom: 0; // Reset the default from Reboot
  font-size: $font-size-base;
  color: $popover-header-color;
  background-color: $popover-header-bg;
  border-bottom: $popover-border-width solid darken($popover-header-bg, 5%);
  $offset-border-width: calc(#{$border-radius-lg} - #{$popover-border-width});
  @include border-top-radius($offset-border-width);

  &:empty {
    display: none;
  }
}

.popover-body {
  padding: $popover-body-padding-y $popover-body-padding-x;
  color: $popover-body-color;
}

// Wrapper for the slide container and indicators
.carousel {
  position: relative;
}

.carousel-inner {
  position: relative;
  width: 100%;
  overflow: hidden;
}

.carousel-item {
  position: relative;
  display: none;
  align-items: center;
  width: 100%;
  @include transition($carousel-transition);
  backface-visibility: hidden;
  perspective: 1000px;
}

.carousel-item.active,
.carousel-item-next,
.carousel-item-prev {
  display: block;
}

.carousel-item-next,
.carousel-item-prev {
  position: absolute;
  top: 0;
}

// CSS3 transforms when supported by the browser
.carousel-item-next.carousel-item-left,
.carousel-item-prev.carousel-item-right {
  transform: translateX(0);

  @supports (transform-style: preserve-3d) {
    transform: translate3d(0, 0, 0);
  }
}

.carousel-item-next,
.active.carousel-item-right {
  transform: translateX(100%);

  @supports (transform-style: preserve-3d) {
    transform: translate3d(100%, 0, 0);
  }
}

.carousel-item-prev,
.active.carousel-item-left {
  transform: translateX(-100%);

  @supports (transform-style: preserve-3d) {
    transform: translate3d(-100%, 0, 0);
  }
}


//
// Left/right controls for nav
//

.carousel-control-prev,
.carousel-control-next {
  position: absolute;
  top: 0;
  bottom: 0;
  // Use flex for alignment (1-3)
  display: flex; // 1. allow flex styles
  align-items: center; // 2. vertically center contents
  justify-content: center; // 3. horizontally center contents
  width: $carousel-control-width;
  color: $carousel-control-color;
  text-align: center;
  opacity: $carousel-control-opacity;
  // We can't have a transition here because WebKit cancels the carousel
  // animation if you trip this while in the middle of another animation.

  // Hover/focus state
  @include hover-focus {
    color: $carousel-control-color;
    text-decoration: none;
    outline: 0;
    opacity: .9;
  }
}
.carousel-control-prev {
  left: 0;
  @if $enable-gradients {
    background: linear-gradient(90deg, rgba(0, 0, 0, .25), rgba(0, 0, 0, .001));
  }
}
.carousel-control-next {
  right: 0;
  @if $enable-gradients {
    background: linear-gradient(270deg, rgba(0, 0, 0, .25), rgba(0, 0, 0, .001));
  }
}

// Icons for within
.carousel-control-prev-icon,
.carousel-control-next-icon {
  display: inline-block;
  width: $carousel-control-icon-width;
  height: $carousel-control-icon-width;
  background: transparent no-repeat center center;
  background-size: 100% 100%;
}
.carousel-control-prev-icon {
  background-image: $carousel-control-prev-icon-bg;
}
.carousel-control-next-icon {
  background-image: $carousel-control-next-icon-bg;
}


// Optional indicator pips
//
// Add an ordered list with the following class and add a list item for each
// slide your carousel holds.

.carousel-indicators {
  position: absolute;
  right: 0;
  bottom: 10px;
  left: 0;
  z-index: 15;
  display: flex;
  justify-content: center;
  padding-left: 0; // override <ol> default
  // Use the .carousel-control's width as margin so we don't overlay those
  margin-right: $carousel-control-width;
  margin-left: $carousel-control-width;
  list-style: none;

  li {
    position: relative;
    flex: 0 1 auto;
    width: $carousel-indicator-width;
    height: $carousel-indicator-height;
    margin-right: $carousel-indicator-spacer;
    margin-left: $carousel-indicator-spacer;
    text-indent: -999px;
    background-color: rgba($carousel-indicator-active-bg, .5);

    // Use pseudo classes to increase the hit area by 10px on top and bottom.
    &::before {
      position: absolute;
      top: -10px;
      left: 0;
      display: inline-block;
      width: 100%;
      height: 10px;
      content: "";
    }
    &::after {
      position: absolute;
      bottom: -10px;
      left: 0;
      display: inline-block;
      width: 100%;
      height: 10px;
      content: "";
    }
  }

  .active {
    background-color: $carousel-indicator-active-bg;
  }
}


// Optional captions
//
//

.carousel-caption {
  position: absolute;
  right: ((100% - $carousel-caption-width) / 2);
  bottom: 20px;
  left: ((100% - $carousel-caption-width) / 2);
  z-index: 10;
  padding-top: 20px;
  padding-bottom: 20px;
  color: $carousel-caption-color;
  text-align: center;
}

// stylelint-disable declaration-no-important

.align-baseline    { vertical-align: baseline !important; } // Browser default
.align-top         { vertical-align: top !important; }
.align-middle      { vertical-align: middle !important; }
.align-bottom      { vertical-align: bottom !important; }
.align-text-bottom { vertical-align: text-bottom !important; }
.align-text-top    { vertical-align: text-top !important; }

// stylelint-disable declaration-no-important

@each $color, $value in $theme-colors {
  @include bg-variant(".bg-#{$color}", $value);
}

@if $enable-gradients {
  @each $color, $value in $theme-colors {
    @include bg-gradient-variant(".bg-gradient-#{$color}", $value);
  }
}

.bg-white {
  background-color: $white !important;
}

.bg-transparent {
  background-color: transparent !important;
}

// stylelint-disable declaration-no-important

//
// Border
//

.border         { border: $border-width solid $border-color !important; }
.border-top     { border-top: $border-width solid $border-color !important; }
.border-right   { border-right: $border-width solid $border-color !important; }
.border-bottom  { border-bottom: $border-width solid $border-color !important; }
.border-left    { border-left: $border-width solid $border-color !important; }

.border-0        { border: 0 !important; }
.border-top-0    { border-top: 0 !important; }
.border-right-0  { border-right: 0 !important; }
.border-bottom-0 { border-bottom: 0 !important; }
.border-left-0   { border-left: 0 !important; }

@each $color, $value in $theme-colors {
  .border-#{$color} {
    border-color: $value !important;
  }
}

.border-white {
  border-color: $white !important;
}

//
// Border-radius
//

.rounded {
  border-radius: $border-radius !important;
}
.rounded-top {
  border-top-left-radius: $border-radius !important;
  border-top-right-radius: $border-radius !important;
}
.rounded-right {
  border-top-right-radius: $border-radius !important;
  border-bottom-right-radius: $border-radius !important;
}
.rounded-bottom {
  border-bottom-right-radius: $border-radius !important;
  border-bottom-left-radius: $border-radius !important;
}
.rounded-left {
  border-top-left-radius: $border-radius !important;
  border-bottom-left-radius: $border-radius !important;
}

.rounded-circle {
  border-radius: 50% !important;
}

.rounded-0 {
  border-radius: 0 !important;
}

.clearfix {
  @include clearfix();
}

// stylelint-disable declaration-no-important

//
// Utilities for common `display` values
//

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .d#{$infix}-none         { display: none !important; }
    .d#{$infix}-inline       { display: inline !important; }
    .d#{$infix}-inline-block { display: inline-block !important; }
    .d#{$infix}-block        { display: block !important; }
    .d#{$infix}-table        { display: table !important; }
    .d#{$infix}-table-row    { display: table-row !important; }
    .d#{$infix}-table-cell   { display: table-cell !important; }
    .d#{$infix}-flex         { display: flex !important; }
    .d#{$infix}-inline-flex  { display: inline-flex !important; }
  }
}


//
// Utilities for toggling `display` in print
//

@media print {
  .d-print-none         { display: none !important; }
  .d-print-inline       { display: inline !important; }
  .d-print-inline-block { display: inline-block !important; }
  .d-print-block        { display: block !important; }
  .d-print-table        { display: table !important; }
  .d-print-table-row    { display: table-row !important; }
  .d-print-table-cell   { display: table-cell !important; }
  .d-print-flex         { display: flex !important; }
  .d-print-inline-flex  { display: inline-flex !important; }
}

// Credit: Nicolas Gallagher and SUIT CSS.

.embed-responsive {
  position: relative;
  display: block;
  width: 100%;
  padding: 0;
  overflow: hidden;

  &::before {
    display: block;
    content: "";
  }

  .embed-responsive-item,
  iframe,
  embed,
  object,
  video {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0;
  }
}

.embed-responsive-21by9 {
  &::before {
    padding-top: percentage(9 / 21);
  }
}

.embed-responsive-16by9 {
  &::before {
    padding-top: percentage(9 / 16);
  }
}

.embed-responsive-4by3 {
  &::before {
    padding-top: percentage(3 / 4);
  }
}

.embed-responsive-1by1 {
  &::before {
    padding-top: percentage(1 / 1);
  }
}

// stylelint-disable declaration-no-important

// Flex variation
//
// Custom styles for additional flex alignment options.

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .flex#{$infix}-row            { flex-direction: row !important; }
    .flex#{$infix}-column         { flex-direction: column !important; }
    .flex#{$infix}-row-reverse    { flex-direction: row-reverse !important; }
    .flex#{$infix}-column-reverse { flex-direction: column-reverse !important; }

    .flex#{$infix}-wrap         { flex-wrap: wrap !important; }
    .flex#{$infix}-nowrap       { flex-wrap: nowrap !important; }
    .flex#{$infix}-wrap-reverse { flex-wrap: wrap-reverse !important; }

    .justify-content#{$infix}-start   { justify-content: flex-start !important; }
    .justify-content#{$infix}-end     { justify-content: flex-end !important; }
    .justify-content#{$infix}-center  { justify-content: center !important; }
    .justify-content#{$infix}-between { justify-content: space-between !important; }
    .justify-content#{$infix}-around  { justify-content: space-around !important; }

    .align-items#{$infix}-start    { align-items: flex-start !important; }
    .align-items#{$infix}-end      { align-items: flex-end !important; }
    .align-items#{$infix}-center   { align-items: center !important; }
    .align-items#{$infix}-baseline { align-items: baseline !important; }
    .align-items#{$infix}-stretch  { align-items: stretch !important; }

    .align-content#{$infix}-start   { align-content: flex-start !important; }
    .align-content#{$infix}-end     { align-content: flex-end !important; }
    .align-content#{$infix}-center  { align-content: center !important; }
    .align-content#{$infix}-between { align-content: space-between !important; }
    .align-content#{$infix}-around  { align-content: space-around !important; }
    .align-content#{$infix}-stretch { align-content: stretch !important; }

    .align-self#{$infix}-auto     { align-self: auto !important; }
    .align-self#{$infix}-start    { align-self: flex-start !important; }
    .align-self#{$infix}-end      { align-self: flex-end !important; }
    .align-self#{$infix}-center   { align-self: center !important; }
    .align-self#{$infix}-baseline { align-self: baseline !important; }
    .align-self#{$infix}-stretch  { align-self: stretch !important; }
  }
}

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .float#{$infix}-left  { @include float-left; }
    .float#{$infix}-right { @include float-right; }
    .float#{$infix}-none  { @include float-none; }
  }
}

// stylelint-disable declaration-no-important

// Common values

// Sass list not in variables since it's not intended for customization.
$positions: static, relative, absolute, fixed, sticky;

@each $position in $positions {
  .position-#{$position} { position: $position !important; }
}

// Shorthand

.fixed-top {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  z-index: $zindex-fixed;
}

.fixed-bottom {
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: $zindex-fixed;
}

.sticky-top {
  @supports (position: sticky) {
    position: sticky;
    top: 0;
    z-index: $zindex-sticky;
  }
}

//
// Screenreaders
//

.sr-only {
  @include sr-only();
}

.sr-only-focusable {
  @include sr-only-focusable();
}

// stylelint-disable declaration-no-important

// Width and height

@each $prop, $abbrev in (width: w, height: h) {
  @each $size, $length in $sizes {
    .#{$abbrev}-#{$size} { #{$prop}: $length !important; }
  }
}

.mw-100 { max-width: 100% !important; }
.mh-100 { max-height: 100% !important; }

// stylelint-disable declaration-no-important

// Margin and Padding

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $prop, $abbrev in (margin: m, padding: p) {
      @each $size, $length in $spacers {

        .#{$abbrev}#{$infix}-#{$size} { #{$prop}: $length !important; }
        .#{$abbrev}t#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-top: $length !important;
        }
        .#{$abbrev}r#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-right: $length !important;
        }
        .#{$abbrev}b#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-bottom: $length !important;
        }
        .#{$abbrev}l#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-left: $length !important;
        }
      }
    }

    // Some special margin utils
    .m#{$infix}-auto { margin: auto !important; }
    .mt#{$infix}-auto,
    .my#{$infix}-auto {
      margin-top: auto !important;
    }
    .mr#{$infix}-auto,
    .mx#{$infix}-auto {
      margin-right: auto !important;
    }
    .mb#{$infix}-auto,
    .my#{$infix}-auto {
      margin-bottom: auto !important;
    }
    .ml#{$infix}-auto,
    .mx#{$infix}-auto {
      margin-left: auto !important;
    }
  }
}

// stylelint-disable declaration-no-important

//
// Text
//

// Alignment

.text-justify  { text-align: justify !important; }
.text-nowrap   { white-space: nowrap !important; }
.text-truncate { @include text-truncate; }

// Responsive alignment

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .text#{$infix}-left   { text-align: left !important; }
    .text#{$infix}-right  { text-align: right !important; }
    .text#{$infix}-center { text-align: center !important; }
  }
}

// Transformation

.text-lowercase  { text-transform: lowercase !important; }
.text-uppercase  { text-transform: uppercase !important; }
.text-capitalize { text-transform: capitalize !important; }

// Weight and italics

.font-weight-light  { font-weight: $font-weight-light !important; }
.font-weight-normal { font-weight: $font-weight-normal !important; }
.font-weight-bold   { font-weight: $font-weight-bold !important; }
.font-italic        { font-style: italic !important; }

// Contextual colors

.text-white { color: #fff !important; }

@each $color, $value in $theme-colors {
  @include text-emphasis-variant(".text-#{$color}", $value);
}

.text-muted { color: $text-muted !important; }

// Misc

.text-hide {
  @include text-hide();
}

//
// Visibility utilities
//

.visible {
  @include invisible(visible);
}

.invisible {
  @include invisible(hidden);
}

// stylelint-disable declaration-no-important, selector-no-qualifying-type

// Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css

// ==========================================================================
// Print styles.
// Inlined to avoid the additional HTTP request:
// http://www.phpied.com/delay-loading-your-print-css/
// ==========================================================================

@if $enable-print-styles {
  @media print {
    *,
    *::before,
    *::after {
      // Bootstrap specific; comment out `color` and `background`
      //color: #000 !important; // Black prints faster: http://www.sanbeiji.com/archives/953
      text-shadow: none !important;
      //background: transparent !important;
      box-shadow: none !important;
    }

    a {
      &:not(.btn) {
        text-decoration: underline;
      }
    }

    // Bootstrap specific; comment the following selector out
    //a[href]::after {
    //  content: " (" attr(href) ")";
    //}

    abbr[title]::after {
      content: " (" attr(title) ")";
    }

    // Bootstrap specific; comment the following selector out
    //
    // Don't show links that are fragment identifiers,
    // or use the `javascript:` pseudo protocol
    //

    //a[href^="#"]::after,
    //a[href^="javascript:"]::after {
    // content: "";
    //}

    pre {
      white-space: pre-wrap !important;
    }
    pre,
    blockquote {
      border: $border-width solid #999;   // Bootstrap custom code; using `$border-width` instead of 1px
      page-break-inside: avoid;
    }

    //
    // Printing Tables:
    // http://css-discuss.incutio.com/wiki/Printing_Tables
    //

    thead {
      display: table-header-group;
    }

    tr,
    img {
      page-break-inside: avoid;
    }

    p,
    h2,
    h3 {
      orphans: 3;
      widows: 3;
    }

    h2,
    h3 {
      page-break-after: avoid;
    }

    // Bootstrap specific changes start

    // Specify a size and min-width to make printing closer across browsers.
    // We don't set margin here because it breaks `size` in Chrome. We also
    // don't use `!important` on `size` as it breaks in Chrome.
    @page {
      size: $print-page-size;
    }
    body {
      min-width: $print-body-min-width !important;
    }
    .container {
      min-width: $print-body-min-width !important;
    }

    // Bootstrap components
    .navbar {
      display: none;
    }
    .badge {
      border: $border-width solid #000;
    }

    .table {
      border-collapse: collapse !important;

      td,
      th {
        background-color: #fff !important;
      }
    }
    .table-bordered {
      th,
      td {
        border: 1px solid #ddd !important;
      }
    }

    // Bootstrap specific changes end
  }
}

$clay-unset: !default;
$clay-unset-placeholder: clay-unset-placeholder !default;

$enable-scaling-components: false !default;
$scaling-breakpoint-down: sm !default;

$rounded-border-radius: $border-radius !default;
$rounded-circle-border-radius: 5000px !default;
$rounded-0-border-radius: 0 !default;

// Cursors

$link-cursor: pointer !default;
$disabled-cursor: not-allowed !default;

// Containers

$container-form-lg: () !default;
$container-form-lg: map-merge((
	breakpoint-up: lg,
	padding-bottom: 3rem,
	padding-top: 3rem,
	padding-bottom-mobile: 1rem,
	padding-top-mobile: 1rem
), $container-form-lg);

$container-view: () !default;
$container-view: map-merge((
	padding-bottom: 1.5rem,
	padding-top: 1.5rem
), $container-view);

// Fonts

$moz-osx-font-smoothing: null !default;
$webkit-font-smoothing: null !default;

$font-import-url: null !default;

$font-family-serif: Georgia, "Times New Roman", Times, serif !default;

$font-size-base-mobile: $font-size-base !default;
$font-size-lg-mobile: $font-size-lg !default;

$font-weight-semi-bold: 500 !default;
$font-weight-bolder: 900 !default;

$h1-font-size-mobile: null !default;
$h2-font-size-mobile: null !default;
$h3-font-size-mobile: null !default;
$h4-font-size-mobile: null !default;
$h5-font-size-mobile: null !default;
$h6-font-size-mobile: null !default;

$body-moz-osx-font-smoothing: $moz-osx-font-smoothing !default;
$body-webkit-font-smoothing: $webkit-font-smoothing !default;

// Z-Index Variables

$zindex-alert-notifications: 5000 !default;
$zindex-input-group-hover: 3 !default;
$zindex-input-group-focus: $zindex-input-group-hover + 1 !default; // 4
$zindex-navbar-collapse-absolute: 500 !default;
$zindex-navbar-overlay: 450 !default;
$zindex-navbar-toggler-focus: 525 !default;
$zindex-sidenav: $zindex-fixed + 5 !default;
$alert-border-style: solid !default;

$alert-close-font-size: 0.875rem !default; // 14px
$alert-close-height: 2rem !default; // 32px
$alert-close-line-height: null !default;
$alert-close-opacity: null !default;
$alert-close-margin-left: null !default;
$alert-close-padding-bottom: 0 !default;
$alert-close-padding-left: 0 !default;
$alert-close-padding-right: 0 !default;
$alert-close-padding-top: 0 !default;
$alert-close-position-right: 0.5rem !default; // 8px
$alert-close-position-top: 0.75rem !default; // 12px
$alert-close-width: $alert-close-height !default;

$alert-font-size: null !default;

$alert-lead-font-size: null !default;
$alert-lead-font-weight: null !default;
$alert-lead-spacer-x: 0.3125rem !default; // 5px

$alert-link-decoration: null !default;
$alert-link-hover-decoration: underline !default;

$alert-indicator-font-size: 1.25rem !default;

$alert-title: () !default;

$alert-subtitle: () !default;

// Alert Dismissible

$alert-dismissible-padding-bottom: null !default;
$alert-dismissible-padding-left: null !default;
$alert-dismissible-padding-right: 2.5rem !default; // 40px
$alert-dismissible-padding-top: null !default;

// Alert Fluid

$alert-fluid-border-bottom-width: 1px !default;
$alert-fluid-border-left-width: 0 !default;
$alert-fluid-border-right-width: 0 !default;
$alert-fluid-border-top-width: 0 !default;

$alert-fluid-border-width: $alert-fluid-border-top-width $alert-fluid-border-right-width $alert-fluid-border-bottom-width $alert-fluid-border-left-width !default;
$alert-fluid-margin-bottom: 0 !default;

// Alert Notification

$alert-notifications-absolute-bottom: null !default;
$alert-notifications-absolute-left: null !default;
$alert-notifications-absolute-right: 0.5rem !default; // 8px
$alert-notifications-absolute-top: 4.75rem !default; // 76px

$alert-notifications-absolute-bottom-mobile: null !default;
$alert-notifications-absolute-left-mobile: 0.5rem !default; // 8px
$alert-notifications-absolute-right-mobile: 0.5rem !default; // 8px
$alert-notifications-absolute-top-mobile: 4.25rem!default; // 68px

$alert-notifications-fixed-bottom: 1.25rem !default; // 20px
$alert-notifications-fixed-left: 1.25rem !default; // 20px
$alert-notifications-fixed-right: null !default;
$alert-notifications-fixed-top: null !default;

$alert-notifications-fixed-bottom-mobile: 1rem !default; // 16px
$alert-notifications-fixed-left-mobile: ($grid-gutter-width / 2) !default;
$alert-notifications-fixed-right-mobile: ($grid-gutter-width / 2) !default;
$alert-notifications-fixed-top-mobile: null !default; // 68px

$alert-notifications-box-shadow: null !default;
$alert-notifications-max-width: 22.5rem !default; // 360px

// Alert Variants

$alert-primary-bg: null !default;
$alert-primary-border-color: null !default;
$alert-primary-color: null !default;
$alert-primary-close-color: null !default;
$alert-primary-close-hover-color: null !default;
$alert-primary-lead-color: null !default;
$alert-primary-link-color: null !default;
$alert-primary-link-hover-color: null !default;

$alert-secondary-bg: null !default;
$alert-secondary-border-color: null !default;
$alert-secondary-color: null !default;
$alert-secondary-close-color: null !default;
$alert-secondary-close-hover-color: null !default;
$alert-secondary-lead-color: null !default;
$alert-secondary-link-color: null !default;
$alert-secondary-link-hover-color: null !default;

$alert-success-bg: null !default;
$alert-success-border-color: null !default;
$alert-success-color: null !default;
$alert-success-close-color: null !default;
$alert-success-close-hover-color: null !default;
$alert-success-lead-color: null !default;
$alert-success-link-color: null !default;
$alert-success-link-hover-color: null !default;

$alert-info-bg: null !default;
$alert-info-border-color: null !default;
$alert-info-color: null !default;
$alert-info-close-color: null !default;
$alert-info-close-hover-color: null !default;
$alert-info-lead-color: null !default;
$alert-info-link-color: null !default;
$alert-info-link-hover-color: null !default;

$alert-warning-bg: null !default;
$alert-warning-border-color: null !default;
$alert-warning-color: null !default;
$alert-warning-close-color: null !default;
$alert-warning-close-hover-color: null !default;
$alert-warning-lead-color: null !default;
$alert-warning-link-color: null !default;
$alert-warning-link-hover-color: null !default;

$alert-danger-bg: null !default;
$alert-danger-border-color: null !default;
$alert-danger-color: null !default;
$alert-danger-close-color: null !default;
$alert-danger-close-hover-color: null !default;
$alert-danger-lead-color: null !default;
$alert-danger-link-color: null !default;
$alert-danger-link-hover-color: null !default;

$alert-light-bg: null !default;
$alert-light-border-color: null !default;
$alert-light-color: null !default;
$alert-light-close-color: null !default;
$alert-light-close-hover-color: null !default;
$alert-light-lead-color: null !default;
$alert-light-link-color: null !default;
$alert-light-link-hover-color: null !default;

$alert-dark-bg: null !default;
$alert-dark-border-color: null !default;
$alert-dark-color: null !default;
$alert-dark-close-color: null !default;
$alert-dark-close-hover-color: null !default;
$alert-dark-lead-color: null !default;
$alert-dark-link-color: null !default;
$alert-dark-link-hover-color: null !default;

$alert-palette: () !default;
$alert-palette: map-merge((
	primary: (
		bg: $alert-primary-bg,
		border-color: $alert-primary-border-color,
		color: $alert-primary-color,
		close-color: $alert-primary-close-color,
		close-hover-color: $alert-primary-close-hover-color,
		lead-color: $alert-primary-lead-color,
		link-color: $alert-primary-link-color,
		link-hover-color: $alert-primary-link-hover-color
	),
	secondary: (
		bg: $alert-secondary-bg,
		border-color: $alert-secondary-border-color,
		color: $alert-secondary-color,
		close-color: $alert-secondary-close-color,
		close-hover-color: $alert-secondary-close-hover-color,
		lead-color: $alert-secondary-lead-color,
		link-color: $alert-secondary-link-color,
		link-hover-color: $alert-secondary-link-hover-color
	),
	success: (
		bg: $alert-success-bg,
		border-color: $alert-success-border-color,
		color: $alert-success-color,
		close-color: $alert-success-close-color,
		close-hover-color: $alert-success-close-hover-color,
		lead-color: $alert-success-lead-color,
		link-color: $alert-success-link-color,
		link-hover-color: $alert-success-link-hover-color
	),
	info: (
		bg: $alert-info-bg,
		border-color: $alert-info-border-color,
		color: $alert-info-color,
		close-color: $alert-info-close-color,
		close-hover-color: $alert-info-close-hover-color,
		lead-color: $alert-info-lead-color,
		link-color: $alert-info-link-color,
		link-hover-color: $alert-info-link-hover-color
	),
	warning: (
		bg: $alert-warning-bg,
		border-color: $alert-warning-border-color,
		color: $alert-warning-color,
		close-color: $alert-warning-close-color,
		close-hover-color: $alert-warning-close-hover-color,
		lead-color: $alert-warning-lead-color,
		link-color: $alert-warning-link-color,
		link-hover-color: $alert-warning-link-hover-color
	),
	danger: (
		bg: $alert-danger-bg,
		border-color: $alert-danger-border-color,
		color: $alert-danger-color,
		close-color: $alert-danger-close-color,
		close-hover-color: $alert-danger-close-hover-color,
		lead-color: $alert-danger-lead-color,
		link-color: $alert-danger-link-color,
		link-hover-color: $alert-danger-link-hover-color
	),
	light: (
		bg: $alert-light-bg,
		border-color: $alert-light-border-color,
		color: $alert-light-color,
		close-color: $alert-light-close-color,
		close-hover-color: $alert-light-close-hover-color,
		lead-color: $alert-light-lead-color,
		link-color: $alert-light-link-color,
		link-hover-color: $alert-light-link-hover-color
	),
	dark: (
		bg: $alert-dark-bg,
		border-color: $alert-dark-border-color,
		color: $alert-dark-color,
		close-color: $alert-dark-close-color,
		close-hover-color: $alert-dark-close-hover-color,
		lead-color: $alert-dark-lead-color,
		link-color: $alert-dark-link-color,
		link-hover-color: $alert-dark-link-hover-color
	),
), $alert-palette);
$badge-border-color: transparent !default;
$badge-border-style: solid !default;
$badge-border-width: 1px !default;
$badge-line-height: null !default;

$badge-spacer-x: 0.25rem !default; // 4px
$badge-spacer-y: 0.125rem !default; // 2px

$badge-lexicon-icon-height: 0.875em !default;
$badge-lexicon-icon-margin-top: 0 !default;
$badge-lexicon-icon-width: 0.875em !default;

$badge-item-expand-min-width: 0.375rem !default;
$badge-item-spacer-x: 0.5em !default;

$badge-link-color: #FFF !default;
$badge-link-hover-color: null !default;
$badge-link-text-decoration: underline !default;
$badge-link-hover-text-decoration: none !default;

$badge-close: () !default;
$badge-close: map-merge((
	color: inherit,
	opacity: 1,
	hover-color: inherit,
	hover-opacity: 1,
	focus-opacity: 1,
	border-radius: 1px,
	display: inline-flex,
	font-size: inherit,
	height: auto,
	width: auto
), $badge-close);

// Badge Variants

$badge-primary-bg: null !default;
$badge-primary-hover-bg: null !default;
$badge-primary-border-color: null !default;
$badge-primary-hover-border-color: null !default;
$badge-primary-color: null !default;
$badge-primary-hover-color: null !default;
$badge-primary-link-color: null !default;
$badge-primary-link-hover-color: null !default;

$badge-secondary-bg: null !default;
$badge-secondary-hover-bg: null !default;
$badge-secondary-border-color: null !default;
$badge-secondary-hover-border-color: null !default;
$badge-secondary-color: null !default;
$badge-secondary-hover-color: null !default;
$badge-secondary-link-color: null !default;
$badge-secondary-link-hover-color: null !default;

$badge-success-bg: null !default;
$badge-success-hover-bg: null !default;
$badge-success-border-color: null !default;
$badge-success-hover-border-color: null !default;
$badge-success-color: null !default;
$badge-success-hover-color: null !default;
$badge-success-link-color: null !default;
$badge-success-link-hover-color: null !default;

$badge-info-bg: null !default;
$badge-info-hover-bg: null !default;
$badge-info-border-color: null !default;
$badge-info-hover-border-color: null !default;
$badge-info-color: null !default;
$badge-info-hover-color: null !default;
$badge-info-link-color: null !default;
$badge-info-link-hover-color: null !default;

$badge-warning-bg: null !default;
$badge-warning-hover-bg: null !default;
$badge-warning-border-color: null !default;
$badge-warning-hover-border-color: null !default;
$badge-warning-color: null !default;
$badge-warning-hover-color: null !default;
$badge-warning-link-color: null !default;
$badge-warning-link-hover-color: null !default;

$badge-danger-bg: null !default;
$badge-danger-hover-bg: null !default;
$badge-danger-border-color: null !default;
$badge-danger-hover-border-color: null !default;
$badge-danger-color: null !default;
$badge-danger-hover-color: null !default;
$badge-danger-link-color: null !default;
$badge-danger-link-hover-color: null !default;

$badge-light-bg: null !default;
$badge-light-hover-bg: null !default;
$badge-light-border-color: null !default;
$badge-light-hover-border-color: null !default;
$badge-light-color: null !default;
$badge-light-hover-color: null !default;
$badge-light-link-color: null !default;
$badge-light-link-hover-color: null !default;

$badge-dark-bg: null !default;
$badge-dark-hover-bg: null !default;
$badge-dark-border-color: null !default;
$badge-dark-hover-border-color: null !default;
$badge-dark-color: null !default;
$badge-dark-hover-color: null !default;
$badge-dark-link-color: null !default;
$badge-dark-link-hover-color: null !default;

$badge-palette: () !default;
$badge-palette: map-merge((
	primary: (
		bg: $badge-primary-bg,
		hover-bg: $badge-primary-hover-bg,
		border-color: $badge-primary-border-color,
		hover-border-color: $badge-primary-hover-border-color,
		color: $badge-primary-color,
		hover-color: $badge-primary-hover-color,
		link-color: $badge-primary-link-color,
		link-hover-color: $badge-primary-link-hover-color
	),
	secondary: (
		bg: $badge-secondary-bg,
		hover-bg: $badge-secondary-hover-bg,
		border-color: $badge-secondary-border-color,
		hover-border-color: $badge-secondary-hover-border-color,
		color: $badge-secondary-color,
		hover-color: $badge-secondary-hover-color,
		link-color: $badge-secondary-link-color,
		link-hover-color: $badge-secondary-link-hover-color
	),
	success: (
		bg: $badge-success-bg,
		hover-bg: $badge-success-hover-bg,
		border-color: $badge-success-border-color,
		hover-border-color: $badge-success-hover-border-color,
		color: $badge-success-color,
		hover-color: $badge-success-hover-color,
		link-color: $badge-success-link-color,
		link-hover-color: $badge-success-link-hover-color
	),
	info: (
		bg: $badge-info-bg,
		hover-bg: $badge-info-hover-bg,
		border-color: $badge-info-border-color,
		hover-border-color: $badge-info-hover-border-color,
		color: $badge-info-color,
		hover-color: $badge-info-hover-color,
		link-color: $badge-info-link-color,
		link-hover-color: $badge-info-link-hover-color
	),
	warning: (
		bg: $badge-warning-bg,
		hover-bg: $badge-warning-hover-bg,
		border-color: $badge-warning-border-color,
		hover-border-color: $badge-warning-hover-border-color,
		color: $badge-warning-color,
		hover-color: $badge-warning-hover-color,
		link-color: $badge-warning-link-color,
		link-hover-color: $badge-warning-link-hover-color
	),
	danger: (
		bg: $badge-danger-bg,
		hover-bg: $badge-danger-hover-bg,
		border-color: $badge-danger-border-color,
		hover-border-color: $badge-danger-hover-border-color,
		color: $badge-danger-color,
		hover-color: $badge-danger-hover-color,
		link-color: $badge-danger-link-color,
		link-hover-color: $badge-danger-link-hover-color
	),
	light: (
		bg: $badge-light-bg,
		hover-bg: $badge-light-hover-bg,
		border-color: $badge-light-border-color,
		hover-border-color: $badge-light-hover-border-color,
		color: $badge-light-color,
		hover-color: $badge-light-hover-color,
		link-color: $badge-light-link-color,
		link-hover-color: $badge-light-link-hover-color
	),
	dark: (
		bg: $badge-dark-bg,
		hover-bg: $badge-dark-hover-bg,
		border-color: $badge-dark-border-color,
		hover-border-color: $badge-dark-hover-border-color,
		color: $badge-dark-color,
		hover-color: $badge-dark-hover-color,
		link-color: $badge-dark-link-color,
		link-hover-color: $badge-dark-link-hover-color
	)
), $badge-palette);
$breadcrumb-border-radius: null !default;
$breadcrumb-font-size: null !default;
$breadcrumb-font-weight: null !default;
$breadcrumb-text-transform: null !default;

$breadcrumb-active-font-weight: null !default;

$breadcrumb-text-truncate-icon-spacer-x: 0.875rem !default; // 14px
$breadcrumb-text-truncate-max-width: 18.75rem - $breadcrumb-text-truncate-icon-spacer-x !default; // 300px
$breadcrumb-text-truncate-max-width-mobile: 9.375rem - $breadcrumb-text-truncate-icon-spacer-x !default; // 150px

$breadcrumb-link-color: $link-color !default;
$breadcrumb-link-text-decoration: $link-decoration !default;

$breadcrumb-link-hover-color: $link-hover-color !default;
$breadcrumb-link-hover-text-decoration: $link-hover-decoration !default;

$breadcrumb-divider-color: $breadcrumb-active-color !default;
$breadcrumb-divider-font-family: null !default;
$breadcrumb-divider-font-weight: null !default;

$breadcrumb-divider-svg-icon: clay-icon(angle-right, $breadcrumb-divider-color) !default;
$breadcrumb-divider-svg-icon-height: 0.75em !default;
$breadcrumb-divider-svg-icon-width: $breadcrumb-divider-svg-icon-height !default;
$btn-cursor: $link-cursor !default;
$btn-font-size: $font-size-base !default;
$btn-font-size-mobile: null !default;
$btn-padding-x-mobile: null !default;
$btn-padding-y-mobile: null !default;

$btn-disabled-cursor: $disabled-cursor !default;

$btn-inline-item-font-size: null !default;

$btn-section-font-size: 0.6875rem !default; // 11px
$btn-section-font-weight: $font-weight-normal !default;
$btn-section-line-height: 1 !default;

// Button Sizes

$btn-font-size-lg: $font-size-lg !default;
$btn-font-size-lg-mobile: null !default;
$btn-padding-x-lg-mobile: null !default;
$btn-padding-y-lg-mobile: null !default;
$btn-inline-item-font-size-lg: null !default;
$btn-section-font-size-lg: 0.8125rem !default; // 13px

$btn-font-size-sm: $font-size-sm !default;
$btn-font-size-sm-mobile: null !default;
$btn-padding-x-sm-mobile: null !default;
$btn-padding-y-sm-mobile: null !default;
$btn-inline-item-font-size-sm: null !default;
$btn-section-font-size-sm: 0.5625rem !default; // 9px

// Button Monospaced

$btn-monospaced-padding-x: 0 !default;
$btn-monospaced-padding-y: 0.1875rem !default; // 3px
$btn-monospaced-size: 2.375rem !default; // 38px

$btn-monospaced-padding-x-lg: 0 !default;
$btn-monospaced-padding-y-lg: 0.3125rem !default; // 5px
$btn-monospaced-size-lg: 3rem !default; // 48px

$btn-monospaced-padding-x-sm: 0 !default;
$btn-monospaced-padding-y-sm: 0.125rem !default; // 2px
$btn-monospaced-size-sm: 1.9375rem !default; // 31px

$btn-monospaced-size-mobile: null !default;
$btn-monospaced-size-lg-mobile: null !default;
$btn-monospaced-size-sm-mobile: null !default;

// Button Group

$btn-group-item-margin-right: map-get($spacers, 2) !default;

// Button Toolbar

$btn-toolbar-spacer-x: 0.5rem !default; // 8px
$btn-toolbar-spacer-y: 0.125rem !default; // 2px

// Button Variants

$btn-primary: () !default;
$btn-primary: map-merge((
	loading-animation: 'loading-animation-light'
), $btn-primary);

$btn-secondary: () !default;
$btn-secondary: map-merge((
	loading-animation: 'loading-animation-light'
), $btn-secondary);

$btn-success: () !default;
$btn-success: map-merge((
	loading-animation: 'loading-animation-light'
), $btn-success);

$btn-info: () !default;
$btn-info: map-merge((
	loading-animation: 'loading-animation-light'
), $btn-info);

$btn-warning: () !default;
$btn-warning: map-merge((), $btn-warning);

$btn-danger: () !default;
$btn-danger: map-merge((
	loading-animation: 'loading-animation-light'
), $btn-danger);

$btn-light: () !default;
$btn-light: map-merge((), $btn-light);

$btn-dark: () !default;
$btn-dark: map-merge((
	loading-animation: 'loading-animation-light'
), $btn-dark);

$btn-palette: () !default;
$btn-palette: map-merge((
	primary: $btn-primary,
	secondary: $btn-secondary,
	success: $btn-success,
	info: $btn-info,
	warning: $btn-warning,
	danger: $btn-danger,
	light: $btn-light,
	dark: $btn-dark
), $btn-palette);

// Button Outline Variants

$btn-outline-primary: () !default;
$btn-outline-secondary: () !default;
$btn-outline-success: () !default;
$btn-outline-info: () !default;
$btn-outline-warning: () !default;
$btn-outline-danger: () !default;
$btn-outline-light: () !default;
$btn-outline-dark: () !default;

$btn-outline-palette: () !default;
$btn-outline-palette: map-merge((
	primary: $btn-outline-primary,
	secondary: $btn-outline-secondary,
	success: $btn-outline-success,
	info: $btn-outline-info,
	warning: $btn-outline-warning,
	danger: $btn-outline-danger,
	light: $btn-outline-light,
	dark: $btn-outline-dark
), $btn-outline-palette);
$label-color: null !default;
$label-link-hover-color: #FFF !default;

$label-font-size: 75% !default;
$label-font-weight: $font-weight-bold !default;
$label-height: null !default;
$label-line-height: 1 !default;
$label-padding-x: 0.4375rem !default; // 7px
$label-padding-y: 0.1875rem !default; // 3px
$label-spacer-x: 0.25rem !default; // 4px
$label-spacer-y: 0.125rem !default; // 2px
$label-text-transform: null !default;

$label-lexicon-icon-height: 0.875em !default;
$label-lexicon-icon-margin-top: 0 !default;
$label-lexicon-icon-width: 0.875em !default;

$label-dismissible-text-transform: null !default;

$label-item-spacer-x: 0.5em !default;

$label-anchor-text-decoration: none !default;
$label-anchor-hover-text-decoration: null !default;

$label-link-text-decoration: underline !default;
$label-link-hover-text-decoration: none !default;

$label-border-color: $body-color !default;
$label-border-radius: $border-radius !default;
$label-border-style: solid !default;
$label-border-width: 0.0625rem !default;

// Label Close

$label-close: () !default;
$label-close: map-merge((
	color: inherit,
	opacity: 1,
	hover-color: inherit,
	hover-opacity: 1,
	focus-opacity: 1,
	disabled-opacity: $btn-disabled-opacity,
	border-radius: 1px,
	display: inline-flex,
	font-size: inherit,
	height: auto,
	width: auto
), $label-close);

// Label Sizes

$label-lg: () !default;
$label-lg: map-merge((
	font-size: 0.875rem, // 14px
	padding-x: 1rem, // 16px
	padding-y: 0.375rem, // 6px
	text-transform: none
), $label-lg);

// Label Variants

$label-primary-color: $primary !default;
$label-primary-hover-color: darken($label-primary-color, 10%) !default;
$label-primary-bg: #FFF !default;
$label-primary-hover-bg: null !default;
$label-primary-border-color: $label-primary-color !default;
$label-primary-hover-border-color: $label-primary-hover-color !default;
$label-primary-link-color: $label-primary-color !default;
$label-primary-link-hover-color: $label-primary-hover-color !default;

$label-secondary-color: $secondary !default;
$label-secondary-hover-color: darken($label-secondary-color, 10%) !default;
$label-secondary-bg: #FFF !default;
$label-secondary-hover-bg: null !default;
$label-secondary-border-color: $label-secondary-color !default;
$label-secondary-hover-border-color: $label-secondary-hover-color !default;
$label-secondary-link-color: $label-secondary-color !default;
$label-secondary-link-hover-color: $label-secondary-hover-color !default;

$label-success-color: $success !default;
$label-success-hover-color: darken($label-success-color, 10%) !default;
$label-success-bg: #FFF !default;
$label-success-hover-bg: null !default;
$label-success-border-color: $label-success-color !default;
$label-success-hover-border-color: $label-success-hover-color !default;
$label-success-link-color: $label-success-color !default;
$label-success-link-hover-color: $label-success-hover-color !default;

$label-info-color: $info !default;
$label-info-hover-color: darken($label-info-color, 10%) !default;
$label-info-bg: #FFF !default;
$label-info-hover-bg: null !default;
$label-info-border-color: $label-info-color !default;
$label-info-hover-border-color: $label-info-hover-color !default;
$label-info-link-color: $label-info-color !default;
$label-info-link-hover-color: $label-info-hover-color !default;

$label-warning-color: $warning !default;
$label-warning-hover-color: darken($label-warning-color, 10%) !default;
$label-warning-bg: #FFF !default;
$label-warning-hover-bg: null !default;
$label-warning-border-color: $label-warning-color !default;
$label-warning-hover-border-color: $label-warning-hover-color !default;
$label-warning-link-color: $label-warning-color !default;
$label-warning-link-hover-color: $label-warning-hover-color !default;

$label-danger-color: $danger !default;
$label-danger-hover-color: darken($label-danger-color, 10%) !default;
$label-danger-bg: #FFF !default;
$label-danger-hover-bg: null !default;
$label-danger-border-color: $label-danger-color !default;
$label-danger-hover-border-color: $label-danger-hover-color !default;
$label-danger-link-color: $label-danger-color !default;
$label-danger-link-hover-color: $label-danger-hover-color !default;

$label-light-color: $light !default;
$label-light-hover-color: darken($label-light-color, 10%) !default;
$label-light-bg: null !default;
$label-light-hover-bg: null !default;
$label-light-border-color: $label-light-color !default;
$label-light-hover-border-color: $label-light-hover-color !default;
$label-light-link-color: $label-light-color !default;
$label-light-link-hover-color: $label-light-hover-color !default;

$label-dark-color: $dark !default;
$label-dark-hover-color: darken($label-dark-color, 10%) !default;
$label-dark-bg: #FFF !default;
$label-dark-hover-bg: null !default;
$label-dark-border-color: $label-dark-color !default;
$label-dark-hover-border-color: $label-dark-hover-color !default;
$label-dark-link-color: $label-dark-color !default;
$label-dark-link-hover-color: $label-dark-hover-color !default;

$label-palette: () !default;
$label-palette: map-merge((
	primary: (
		bg: $label-primary-bg,
		hover-bg: $label-primary-hover-bg,
		border-color: $label-primary-border-color,
		hover-border-color: $label-primary-hover-border-color,
		color: $label-primary-color,
		hover-color: $label-primary-hover-color,
		link-color: $label-primary-link-color,
		link-hover-color: $label-primary-link-hover-color
	),
	secondary: (
		bg: $label-secondary-bg,
		hover-bg: $label-secondary-hover-bg,
		border-color: $label-secondary-border-color,
		hover-border-color: $label-secondary-hover-border-color,
		color: $label-secondary-color,
		hover-color: $label-secondary-hover-color,
		link-color: $label-secondary-link-color,
		link-hover-color: $label-secondary-link-hover-color
	),
	success: (
		bg: $label-success-bg,
		hover-bg: $label-success-hover-bg,
		border-color: $label-success-border-color,
		hover-border-color: $label-success-hover-border-color,
		color: $label-success-color,
		hover-color: $label-success-hover-color,
		link-color: $label-success-link-color,
		link-hover-color: $label-success-link-hover-color
	),
	info: (
		bg: $label-info-bg,
		hover-bg: $label-info-hover-bg,
		border-color: $label-info-border-color,
		hover-border-color: $label-info-hover-border-color,
		color: $label-info-color,
		hover-color: $label-info-hover-color,
		link-color: $label-info-link-color,
		link-hover-color: $label-info-link-hover-color
	),
	warning: (
		bg: $label-warning-bg,
		hover-bg: $label-warning-hover-bg,
		border-color: $label-warning-border-color,
		hover-border-color: $label-warning-hover-border-color,
		color: $label-warning-color,
		hover-color: $label-warning-hover-color,
		link-color: $label-warning-link-color,
		link-hover-color: $label-warning-link-hover-color
	),
	danger: (
		bg: $label-danger-bg,
		hover-bg: $label-danger-hover-bg,
		border-color: $label-danger-border-color,
		hover-border-color: $label-danger-hover-border-color,
		color: $label-danger-color,
		hover-color: $label-danger-hover-color,
		link-color: $label-danger-link-color,
		link-hover-color: $label-danger-link-hover-color
	),
	dark: (
		bg: $label-dark-bg,
		hover-bg: $label-dark-hover-bg,
		border-color: $label-dark-border-color,
		hover-border-color: $label-dark-hover-border-color,
		color: $label-dark-color,
		hover-color: $label-dark-hover-color,
		link-color: $label-dark-link-color,
		link-hover-color: $label-dark-link-hover-color
	),
	light: (
		bg: $label-light-bg,
		hover-bg: $label-light-hover-bg,
		border-color: $label-light-border-color,
		hover-border-color: $label-light-hover-border-color,
		color: $label-light-color,
		hover-color: $label-light-hover-color,
		link-color: $label-light-link-color,
		link-hover-color: $label-light-link-hover-color
	)
), $label-palette);
$sticker-border-color: null !default;
$sticker-border-radius: $border-radius !default;
$sticker-border-style: null !default;
$sticker-border-width: null !default;
$sticker-color: $label-color !default;
$sticker-font-size: 0.875rem !default; // 14px
$sticker-font-weight: $font-weight-semi-bold !default;
$sticker-size: 2rem !default; // 32px

$sticker-inline-item-font-size: null !default;

// Sticker Sizes

$sticker-sm: () !default;
$sticker-sm: map-merge((
	font-size: 0.75rem,
	size: 1.5rem
), $sticker-sm);

$sticker-lg: () !default;
$sticker-lg: map-merge((
	font-size: 1.125rem,
	size: 2.5rem
), $sticker-lg);

$sticker-xl: () !default;
$sticker-xl: map-merge((
	font-size: 1.25rem,
	size: 3rem
), $sticker-xl);

// Sticker Positions

$sticker-inside-offset: $grid-gutter-width / 2 !default;
$sticker-outside-offset: -($sticker-size / 2) !default;

// Sticker Circle

$sticker-circle-border-radius: $rounded-circle-border-radius !default;

// Sticker Variants

$sticker-primary-bg: $primary !default;
$sticker-primary-border-color: null !default;
$sticker-primary-color: color-yiq($sticker-primary-bg) !default;

$sticker-secondary-bg: $secondary !default;
$sticker-secondary-border-color: null !default;
$sticker-secondary-color: color-yiq($sticker-secondary-bg) !default;

$sticker-info-bg: $info !default;
$sticker-info-border-color: null !default;
$sticker-info-color: color-yiq($sticker-info-bg) !default;

$sticker-success-bg: $success !default;
$sticker-success-border-color: null !default;
$sticker-success-color: color-yiq($sticker-success-bg) !default;

$sticker-warning-bg: $warning !default;
$sticker-warning-border-color: null !default;
$sticker-warning-color: color-yiq($sticker-warning-bg) !default;

$sticker-danger-bg: $danger !default;
$sticker-danger-border-color: null !default;
$sticker-danger-color: color-yiq($sticker-danger-bg) !default;

$sticker-light-bg: $light !default;
$sticker-light-border-color: null !default;
$sticker-light-color: color-yiq($sticker-light-bg) !default;

$sticker-dark-bg: $dark !default;
$sticker-dark-border-color: null !default;
$sticker-dark-color: color-yiq($sticker-dark-bg) !default;

$sticker-palette: () !default;
$sticker-palette: map-merge((
	primary: (
		bg: $sticker-primary-bg,
		border-color: $sticker-primary-border-color,
		color: $sticker-primary-color
	),
	secondary: (
		bg: $sticker-secondary-bg,
		border-color: $sticker-secondary-border-color,
		color: $sticker-secondary-color
	),
	success: (
		bg: $sticker-success-bg,
		border-color: $sticker-success-border-color,
		color: $sticker-success-color
	),
	info: (
		bg: $sticker-info-bg,
		border-color: $sticker-info-border-color,
		color: $sticker-info-color
	),
	warning: (
		bg: $sticker-warning-bg,
		border-color: $sticker-warning-border-color,
		color: $sticker-warning-color
	),
	danger: (
		bg: $sticker-danger-bg,
		border-color: $sticker-danger-border-color,
		color: $sticker-danger-color
	),
	light: (
		bg: $sticker-light-bg,
		border-color: $sticker-light-border-color,
		color: $sticker-light-color
	),
	dark: (
		bg: $sticker-dark-bg,
		border-color: $sticker-dark-border-color,
		color: $sticker-dark-color
	)
), $sticker-palette);
$card-border-style: solid !default;
$card-box-shadow: null !default;
$card-margin-bottom: 1.25rem !default;

$card-body-padding-bottom: null !default;
$card-body-padding-left: null !default;
$card-body-padding-right: null !default;
$card-body-padding-top: null !default;

$card-section-header-color: $secondary !default;
$card-section-header-font-size: 0.75rem !default;
$card-section-header-font-weight: $font-weight-semi-bold !default;
$card-section-header-line-height: 2.5 !default;
$card-section-header-margin-bottom: 1.5rem !default;
$card-section-header-padding: 0 ($grid-gutter-width / 2) !default;
$card-section-header-text-transform: uppercase !default;

// Card Title

$card-title: () !default;
$card-title: map-merge((
	font-size: 1rem,
	font-weight: $font-weight-semi-bold,
	line-height: $line-height-base,
	margin-bottom: 0
), $card-title);

$card-title-link: () !default;
$card-title-link: map-merge((
	color: map-get($card-title, color)
), $card-title-link);

// Card Subtitle

$card-subtitle: () !default;
$card-subtitle: map-merge((
	color: $secondary,
	font-size: 0.875rem, // 14px
	font-weight: $font-weight-semi-bold,
	margin-bottom: 0,
	margin-top: 0
), $card-subtitle);

$card-subtitle-link: () !default;
$card-subtitle-link: map-merge((
	color: map-get($card-subtitle, color),
	hover-color: darken($secondary, 15%)
), $card-subtitle-link);

// Card Link

$card-link: () !default;
$card-link: map-merge((
	color: $link-color,
	hover-color: $link-hover-color
), $card-link);

// Card Divider

$card-divider-bg: $card-border-color !default;
$card-divider-height: 1px !default;
$card-divider-spacer-x: null !default;
$card-divider-spacer-y: 10px !default;

$card-rounded-inner-border-radius: if($card-border-width > 0, calc(#{$rounded-border-radius} - #{$card-border-width}), $rounded-border-radius) !default;
$card-rounded-0-inner-border-radius: if($rounded-0-border-radius > $card-border-width, calc(#{$rounded-0-border-radius} - #{$card-border-width}), 0) !default;
$card-rounded-circle-inner-border-radius: if($card-border-width > 0, calc(#{$rounded-circle-border-radius} - #{$card-border-width}), $rounded-circle-border-radius) !default;

$checkbox-left-card-padding: 40px !default;
$checkbox-right-card-padding: $checkbox-left-card-padding !default;

$checkbox-position: 1rem !default;

$form-check-card-checked-box-shadow: $input-btn-focus-box-shadow !default;

// Card Type Asset

$card-type-asset: () !default;

$image-card: () !default;

$file-card: () !default;
$file-card: map-merge((
	asset-icon-color: $gray-600
), $file-card);

$user-card: () !default;
$user-card: map-merge((
	asset-icon-min-width: 2.5rem,
	asset-icon-width: 26%
), $user-card);

$card-page-item-asset: () !default;
$card-page-item-asset: map-merge((
	base: (
		min-width: 200px,
		padding-left: $grid-gutter-width / 2,
		padding-right: $grid-gutter-width / 2
	),
	sm: (
		breakpoint: map-get($grid-breakpoints, sm), // 576px
		flex-basis: 50%,
		max-width: 50%
	),
	md: (
		breakpoint: map-get($grid-breakpoints, md), // 768px
		flex-basis: 200px,
		max-width: 33.3333%
	),
	lg: (
		breakpoint: map-get($grid-breakpoints, lg), // 992px
		max-width: 25%
	)
), $card-page-item-asset);

// Card Type Directory

$card-type-directory: () !default;
$card-type-directory: map-merge((
	sticker-font-size: 1.125rem // 18px
), $card-type-directory);

$card-page-item-directory: () !default;
$card-page-item-directory: map-merge((
	$card-page-item-asset
), $card-page-item-directory);
$dropdown-border-style: null !default;

$dropdown-full-wide-header-spacer-y: 20px !default;

$dropdown-wide-width: 500px !default;

$dropdown-font-size: null !default;
$dropdown-font-size-mobile: null !default;

$dropdown-header-font-size: null !default;
$dropdown-header-font-size-mobile: null !default;
$dropdown-header-margin-bottom: null !default;
$dropdown-header-margin-top: null !default;
$dropdown-header-padding-x: $dropdown-item-padding-x !default;
$dropdown-header-padding-y: $dropdown-padding-y !default;
$dropdown-header-text-transform: null !default;

$dropdown-subheader-color: $dropdown-header-color !default;
$dropdown-subheader-font-size: 0.75rem !default; // 12px
$dropdown-subheader-font-weight: $font-weight-semi-bold !default;
$dropdown-subheader-margin-bottom: null !default;
$dropdown-subheader-margin-top: null !default;
$dropdown-subheader-padding-x: $dropdown-header-padding-x !default;
$dropdown-subheader-padding-y: $dropdown-header-padding-y !default;
$dropdown-subheader-text-transform: uppercase !default;

$dropdown-caption-color: $dropdown-header-color !default;
$dropdown-caption-font-size: 0.875rem !default; // 14px
$dropdown-caption-font-weight: null !default;

$dropdown-link-font-weight: null !default;
$dropdown-link-active-font-weight: null !default;

$dropdown-max-height: 500px !default;
$dropdown-max-height-mobile: 295px !default;
$dropdown-min-height: null !default;

$dropdown-max-width: 260px !default;
$dropdown-max-width-mobile: 230px !default;

$dropdown-inline-scroller-max-height: 200px !default;
$dropdown-inline-scroller-max-height-mobile: none !default;

$dropdown-item-disabled-cursor: $disabled-cursor !default;
$dropdown-item-indicator-size: 1rem !default;
$dropdown-item-indicator-spacer-x: 1rem !default;

// Dropdown Action

$dropdown-action-toggle-border-radius: $border-radius !default;
$dropdown-action-toggle-font-size: null !default;
$dropdown-action-toggle-size: $btn-monospaced-size-sm !default;

$dropdown-action-toggle-disabled-cursor: $disabled-cursor !default;
$dropdown-action-toggle-disabled-opacity: 0.65 !default;

// Alert inside Dropdowns

$dropdown-alert-font-size: null !default;
$dropdown-alert-line-height: normal !default;
$dropdown-alert-margin: ($spacer / 2) !default;
$dropdown-alert-padding-x: $dropdown-header-padding-x !default;
$dropdown-alert-padding-y: $dropdown-header-padding-y !default;
$input-border-top-width: 0.0625rem !default; // 1px
$input-border-right-width: 0.0625rem !default; // 1px
$input-border-bottom-width: 0.0625rem !default; // 1px
$input-border-left-width: 0.0625rem !default; // 1px

$input-border-style: null !default;

$input-font-size: $font-size-base !default;
$input-font-size-mobile: null !default;
$input-height-mobile: null !default;
$input-height-inner-mobile: null !default;

$input-font-size-lg: $font-size-lg !default;
$input-font-size-lg-mobile: null !default;
$input-height-lg-mobile: null !default;
$input-height-inner-lg-mobile: null !default;

$input-font-size-sm: $font-size-sm !default;
$input-font-size-sm-mobile: null !default;
$input-height-sm-mobile: null !default;
$input-height-inner-sm-mobile: null !default;

$input-disabled-border-color: null !default;
$input-disabled-color: null !default;
$input-disabled-cursor: $disabled-cursor !default;
$input-disabled-opacity: null !default;
$input-placeholder-disabled-color: null !default;

$input-placeholder-focus-color: null !default;

$input-label-color: null !default;
$input-label-focus-color: null !default;
$input-label-font-size: null !default;
$input-label-font-size-mobile: null !default;
$input-label-font-weight: null !default;
$input-label-margin-bottom: null !default;

$input-label-for-cursor: $link-cursor !default;

$input-label-disabled-color: $text-muted !default;
$input-label-disabled-cursor: $disabled-cursor !default;

$input-label-reference-mark-color: $warning !default;
$input-label-reference-mark-font-size: null !default;
$input-label-reference-mark-spacer: null !default;
$input-label-reference-mark-vertical-align: null !default;

$input-readonly-bg: null !default;
$input-readonly-focus-bg: null !default;
$input-readonly-border-color: null !default;
$input-readonly-focus-border-color: null !default;
$input-readonly-color: null !default;
$input-readonly-focus-color: null !default;
$input-readonly-cursor: null !default;

$input-textarea-height: 150px !default;

// Form Control Label (Labels inside Form Control Tag Group)

$form-control-label-size: () !default;
$form-control-label-size: map-merge((
	border-width: 0.0625rem, // 1px
	height: 1.25rem // 20px
), $form-control-label-size);

// Form Control Tag Group

$form-control-tag-group-padding-y: ($input-height-inner - map-get($form-control-label-size, height) - ($label-spacer-y * 2)) / 2 !default;

// Form Control Inset

$form-control-inset-min-height: $input-font-size * $input-line-height !default;
$form-control-inset-margin-y: ($input-height-inner - ($form-control-tag-group-padding-y * 2) - $form-control-inset-min-height) / 2 !default;

// Form Group

$form-group-margin-bottom-mobile: null !default;

$form-group-autofit-margin-bottom: $form-group-margin-bottom !default;

// Form Control File

$input-file-cursor: $link-cursor !default;

// Form Check

$form-check-input-cursor: $link-cursor !default;
$form-check-input-disabled-cursor: $disabled-cursor !default;

$form-check-label-cursor: $input-label-for-cursor !default;

$form-check-label-text-margin-left: -0.3125rem !default; // 5px
$form-check-label-text-padding-left: 0.5rem !default; // 8px
$form-check-label-text-disabled-cursor: $disabled-cursor !default;

// Input Variants

$form-feedback-warning-color: $warning !default;

$input-danger-bg: null !default;
$input-danger-focus-bg: null !default;
$input-danger-border-color: $form-feedback-invalid-color !default;
$input-danger-focus-border-color: null !default;
$input-danger-box-shadow: null !default;
$input-danger-focus-box-shadow: 0 0 0 0.2rem rgba($form-feedback-invalid-color, 0.25) !default;
$input-danger-color: null !default;
$input-danger-focus-color: null !default;

$input-danger-checkbox-label-color: $form-feedback-invalid-color !default;
$input-danger-label-color: null !default;
$input-danger-select-icon-color: $input-danger-border-color !default;
$input-danger-select-icon: clay-str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='#{$input-danger-select-icon-color}' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E"), "#", "%23") !default;

$input-success-bg: null !default;
$input-success-focus-bg: null !default;
$input-success-border-color: $form-feedback-valid-color !default;
$input-success-focus-border-color: null !default;
$input-success-box-shadow: null !default;
$input-success-focus-box-shadow: 0 0 0 0.2rem rgba($form-feedback-valid-color, 0.25) !default;
$input-success-color: null !default;
$input-success-focus-color: null !default;

$input-success-checkbox-label-color: $form-feedback-valid-color !default;
$input-success-label-color: null !default;
$input-success-select-icon-color: $input-success-border-color !default;
$input-success-select-icon: clay-str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='#{$input-success-select-icon-color}' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E"), "#", "%23") !default;

$input-warning-bg: null !default;
$input-warning-focus-bg: null !default;
$input-warning-border-color: $form-feedback-warning-color !default;
$input-warning-focus-border-color: null !default;
$input-warning-box-shadow: null !default;
$input-warning-focus-box-shadow: 0 0 0 0.2rem rgba($form-feedback-warning-color, 0.25) !default;
$input-warning-color: null !default;
$input-warning-focus-color: null !default;

$input-warning-checkbox-label-color: $form-feedback-warning-color !default;
$input-warning-label-color: null !default;
$input-warning-select-icon-color: $input-warning-border-color !default;
$input-warning-select-icon: clay-str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='#{$input-warning-select-icon-color}' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E"), "#", "%23") !default;

// Select Element

$input-select-bg: null !default;
$input-select-focus-bg: null !default;

$input-select-bg-position: right $input-btn-padding-x center !default;
$input-select-bg-size: $custom-select-bg-size !default;
$input-select-cursor: $link-cursor !default;
$input-select-padding-bottom: null !default;
$input-select-padding-left: null !default;
$input-select-padding-right: $custom-select-indicator-padding + $input-btn-padding-x !default;
$input-select-padding-top: null !default;

$input-select-icon-color: $input-color !default;
$input-select-icon: $custom-select-indicator !default;

$input-select-icon-focus-color: null !default;
$input-select-icon-focus: null !default;

$input-select-icon-disabled-color: null !default;
$input-select-icon-disabled: null !default;

// Form Feedback

$form-feedback-font-weight: null !default;
$form-feedback-margin-top: 0.25rem !default;

$form-feedback-indicator-margin-x: 0.3125rem !default;

$form-text-color: $text-muted !default;
$form-text-font-size: 0.875rem !default; // 14px
$form-text-font-weight: null !default;

// Form Group Autofit

$form-group-item-label-max-width: 12.5rem !default; // 200px
$form-group-item-label-spacer: 2rem !default; // 32px

// Input Group

$input-group-addon-color: null !default;
$input-group-addon-font-weight: null !default;
$input-group-addon-min-width: 2.375rem !default; // 38px
$input-group-addon-padding-x: null !default;
$input-group-addon-padding-y: null !default;

// Input Group Sizes

$input-group-addon-min-width-lg: 3rem !default; // 48px
$input-group-addon-padding-x-lg: $input-padding-x-lg !default;
$input-group-addon-padding-y-lg: null !default;

$input-group-addon-min-width-sm: 1.9375rem !default; // 31px
$input-group-addon-padding-x-sm: $input-padding-x-sm !default;
$input-group-addon-padding-y-sm: null !default;

// Input Group Secondary

$input-group-secondary-addon-bg: $secondary !default;
$input-group-secondary-addon-border-color: $secondary !default;
$input-group-secondary-addon-border-width: 0.0625rem !default; // 1px
$input-group-secondary-addon-color: $white !default;

// Input Group Inset

$input-group-inset-item-color: $input-group-addon-color !default;

// Input Group Stacked

$input-group-stacked-sm-down: () !default;
$input-group-stacked-sm-down: map-merge((
	breakpoint: sm,
	item-margin-bottom: 0.5rem,
	item-margin-left: 0,
	shrink-margin-right: 0.5rem
), $input-group-stacked-sm-down);
$single-link-font-weight: $font-weight-semi-bold !default;

$component-link: () !default;
$component-link: map-merge((
	color: $secondary,
	hover-color: darken($secondary, 15%)
), $component-link);

$link-primary: () !default;
$link-primary: map-merge((
	color: $primary,
	hover-color: darken($primary, 15%)
), $link-primary);

$link-secondary: () !default;
$link-secondary: map-merge((
	color: $secondary,
	hover-color: darken($secondary, 15%)
), $link-secondary);

// Component Title

$component-title: () !default;
$component-title: map-merge((
	color: $body-color,
	font-size: 1.125rem,
	font-weight: $headings-font-weight,
	line-height: $headings-line-height,
	margin-bottom: calc((#{$dropdown-action-toggle-size} - (1em * #{$headings-line-height})) / 2),
	margin-top: calc((#{$dropdown-action-toggle-size} - (1em * #{$headings-line-height})) / 2)
), $component-title);

$component-title-link: () !default;
$component-title-link: map-merge((
	color: $body-color,
	hover-color: darken($body-color, 15%)
), $component-title-link);

// Component Subtitle

$component-subtitle: () !default;
$component-subtitle: map-merge((
	color: $secondary,
	margin-bottom: 0
), $component-subtitle);

$component-subtitle-link: () !default;
$component-subtitle-link: map-merge((
	color: $secondary,
	hover-color: darken($secondary, 15%)
), $component-subtitle-link);

// Component Action

$component-action: () !default;
$component-action: map-merge((
	bg: transparent,
	border-color: transparent,
	border-radius: $border-radius,
	color: $secondary,
	hover-bg: $secondary,
	hover-color: #FFF,
	btn-focus-box-shadow: 0 0 0 $btn-focus-width rgba($secondary, 0.5),
	btn-focus-outline: 0,
	active-bg: $secondary,
	active-color: #FFF,
	disabled-bg: transparent,
	disabled-color: $secondary,
	disabled-cursor: $disabled-cursor,
	disabled-opacity: $btn-disabled-opacity,
	transition: $btn-transition
), $component-action);

// Link Outline

$link-outline-border-radius: $btn-border-radius !default;
$link-outline-border-width: $btn-border-width !default;
$link-outline-font-size: $btn-font-size-sm !default;
$link-outline-font-weight: $font-weight-semi-bold !default;
$link-outline-line-height: $btn-line-height-sm !default;
$link-outline-padding-x: $btn-padding-x-sm !default;
$link-outline-padding-y: $btn-padding-y-sm !default;
$link-outline-transition: $btn-transition !default;

$link-outline-primary: () !default;
$link-outline-primary: map-merge((
	border-color: $primary,
	color: $primary,
	hover-bg: $primary,
	hover-color: #FFF,
	btn-focus-box-shadow: 0 0 0 $btn-focus-width rgba($primary, 0.5),
	btn-focus-outline: 0,
	disabled-bg: transparent,
	disabled-color: $primary,
	disabled-cursor: $btn-disabled-cursor,
	disabled-opacity: $btn-disabled-opacity,
	active-bg: $primary,
	active-color: #FFF
), $link-outline-primary);

$link-outline-secondary: () !default;
$link-outline-secondary: map-merge((
	border-color: $secondary,
	color: $secondary,
	hover-bg: $secondary,
	hover-color: #FFF,
	btn-focus-box-shadow: 0 0 0 $btn-focus-width rgba($secondary, 0.5),
	btn-focus-outline: 0,
	disabled-bg: transparent,
	disabled-color: $secondary,
	disabled-cursor: $btn-disabled-cursor,
	disabled-opacity: $btn-disabled-opacity,
	active-bg: $secondary,
	active-color: #FFF
), $link-outline-secondary);

// Link Monospaced

$link-monospaced-size: $btn-monospaced-size-sm !default;
$custom-control-indicator-border-color: null !default;
$custom-control-indicator-border-style: null !default;
$custom-control-indicator-border-width: null !default;

$custom-control-indicator-active-border-color: null !default;

$custom-control-indicator-disabled-border-color: null !default;
$custom-control-indicator-disabled-cursor: $disabled-cursor !default;

// Custom Control Indicator Checked

// $custom-control-indicator-active-checked-bg is deprecated as of v2.2.1
$custom-control-indicator-active-checked-bg: null !default;
$custom-control-indicator-checked-active-bg: $custom-control-indicator-active-checked-bg !default;

// $custom-control-indicator-active-checked-border-color is deprecated as of v2.2.1
$custom-control-indicator-active-checked-border-color: null !default;
$custom-control-indicator-checked-active-border-color: $custom-control-indicator-active-checked-border-color !default;

$custom-control-indicator-checked-border-color: null !default;

// $custom-control-indicator-disabled-checked-bg is deprecated as of v2.2.1
$custom-control-indicator-disabled-checked-bg: null !default;
$custom-control-indicator-checked-disabled-bg: $custom-control-indicator-disabled-checked-bg !default;

// $custom-control-indicator-disabled-checked-border-color is deprecated as of v2.2.1
$custom-control-indicator-disabled-checked-border-color: null !default;
$custom-control-indicator-checked-disabled-border-color: $custom-control-indicator-disabled-checked-border-color !default;

// Custom Control Indicator Indeterminate

$custom-control-indicator-indeterminate-border-color: null !default;

// Custom Description

$custom-control-description-cursor: $form-check-label-cursor !default;
$custom-control-description-font-size: null !default;
$custom-control-description-line-height: $custom-control-indicator-size !default;
$custom-control-description-padding-left: 0.5rem !default; // 8px
$custom-control-description-disabled-cursor: $disabled-cursor !default;

// Custom Checkbox

$custom-checkbox-indicator-icon-checked-bg-size: null !default;
$custom-checkbox-indicator-icon-indeterminate-bg-size: null !default;

// Custom Radio

$custom-radio-indicator-icon-checked-bg-size: null !default;

$custom-radio-indicator-disabled-border-color: null !default;

// $custom-radio-indicator-disabled-checked-border-color is deprecated as of v2.2.1
$custom-radio-indicator-disabled-checked-border-color: null !default;
$custom-radio-indicator-checked-disabled-border-color: $custom-radio-indicator-disabled-checked-border-color !default;
$list-group-box-shadow: null !default;
$list-group-color: null !default;
$list-group-font-size: null !default;

$list-group-margin-bottom: 1.5rem !default;
$list-group-margin-top: null !default;

// Use values flex-start, flex-end, or center
$list-group-item-flex-align-items: flex-start !default;

$list-group-item-flex-checkbox-offset-top: 0.1875rem !default; // 3px
$list-group-item-flex-offset-top: 0.0625rem !default; // 1px
$list-group-item-flex-list-group-title-offset-top: -0.25rem !default; // -4px

// List Group Header

$list-group-header-bg: $list-group-bg !default;
$list-group-header-padding-x: $list-group-item-padding-x !default;
$list-group-header-padding-y: $list-group-item-padding-y !default;

$list-group-header-title: () !default;
$list-group-header-title: map-merge((
	font-size: 1rem,
	font-weight: $font-weight-semi-bold,
	line-height: $headings-line-height,
	margin-bottom: 0
), $list-group-header-title);

// List Group Title

$list-group-title-link: () !default;
$list-group-title-link: map-merge((
	color: $body-color,
	hover-color: darken($body-color, 15%)
), $list-group-title-link);

$list-group-title: () !default;
$list-group-title: map-merge((
	font-size: 1.125rem, // 18px
	font-weight: $font-weight-semi-bold,
	margin-bottom: 0,
	margin-top: $list-group-item-flex-list-group-title-offset-top,
	clay-link: $list-group-title-link
), $list-group-title);

$list-group-title-active-color: $list-group-active-color !default;

// List Group Subtitle

$list-group-subtitle-link: () !default;
$list-group-subtitle-link: map-merge((
	color: $secondary,
	hover-color: darken($secondary, 15%)
), $list-group-subtitle-link);

$list-group-subtitle: () !default;
$list-group-subtitle: map-merge((
	color: $secondary,
	margin-bottom: 0,
	clay-link: $list-group-subtitle-link
), $list-group-subtitle);

// List Group Text

$list-group-text-link: () !default;
$list-group-text-link: map-merge((
	color: $body-color,
	hover-color: darken($body-color, 15%)
), $list-group-text-link);

$list-group-text: () !default;
$list-group-text: map-merge((
	color: $body-color,
	margin-bottom: 0,
	clay-link: $list-group-text-link
), $list-group-text);

$list-group-text-active-color: $list-group-active-color !default;

// List Group Subtext

$list-group-subtext-link: () !default;
$list-group-subtext-link: map-merge((
	color: $secondary,
	hover-color: darken($secondary, 15%)
), $list-group-subtext-link);

$list-group-subtext: () !default;
$list-group-subtext: map-merge((
	color: $secondary,
	margin-bottom: 0,
	clay-link: $list-group-subtext-link
), $list-group-subtext);

$list-group-subtext-active-color: $list-group-active-color !default;

// List Group Detail

$list-group-detail-margin-bottom: null !default;
$list-group-detail-margin-top: null !default;

$list-group-link-color: null !default;
$list-group-link-hover-color: null !default;
$list-group-link-active-color: $white !default;

// List Group Notification

$list-group-notification-item-border-bottom-color: $list-group-border-color !default;
$list-group-notification-item-border-left-color: $list-group-border-color !default;
$list-group-notification-item-border-right-color: $list-group-border-color !default;
$list-group-notification-item-border-top-color: $list-group-border-color !default;

$list-group-notification-item-active-border-bottom-color: $list-group-active-border-color !default;
$list-group-notification-item-active-border-left-color: $list-group-active-border-color !default;
$list-group-notification-item-active-border-right-color: $list-group-active-border-color !default;
$list-group-notification-item-active-border-top-color: $list-group-active-border-color !default;

$list-group-notification-item-border-bottom-width: 0.0625rem !default;
$list-group-notification-item-border-left-width: 0.0625rem !default;
$list-group-notification-item-border-right-width: 0.0625rem !default;
$list-group-notification-item-border-top-width: 0.0625rem !default;

$list-group-notification-item: () !default;

$list-group-notification-item-primary: () !default;
$list-group-notification-item-primary: map-merge((
	border-left-color: theme-color-level(primary, -9),
	border-left-width: 0.5rem,
	border-bottom-left-radius: 0,
	border-top-left-radius: 0,
	active-border-left-color: theme-color-level(primary, -9)
), $list-group-notification-item-primary);
$loading-icon-font-size: 2.5rem !default; // 40px

$loading-icon-font-size-sm: 1.25rem !default; // 20px

// Loading Icon Dotted

$loading-animation: () !default;
$loading-animation: map-merge((
	animation-name: loading-animation,
	color: $body-color
), $loading-animation);

$loading-animation-light: () !default;
$loading-animation-light: map-merge((
	animation-name: loading-animation-light,
	color: #FFF
), $loading-animation-light);
$modal-content-border-radius: $border-radius-lg !default;

$modal-header-bg: null !default;
$modal-header-color: null !default;
$modal-header-height: 4rem !default; // 64px
$modal-header-height-mobile: null !default;

$modal-body-bg: null !default;
$modal-body-color: null !default;

$modal-footer-bg: null !default;
$modal-footer-box-shadow: null !default;
$modal-footer-color: null !default;
$modal-footer-height: null !default;
$modal-footer-padding-x: null !default;
$modal-footer-padding-y: 0.75rem !default; // 12px
$modal-footer-height-mobile: null !default;

$modal-item-padding-x: null !default;
$modal-item-padding-y: 0.25rem !default; // 4px

$modal-title-font-size: 1.25rem !default; // 20px
$modal-title-font-weight: $font-weight-semi-bold !default;
$modal-title-text-align: null !default;
$modal-title-font-size-mobile: null !default;

$modal-title-indicator-font-size: 0.875rem !default; // 14px
$modal-title-indicator-spacer-x: 0.5rem !default; // 8px

// Modal Close

$modal-close-spacer-x: 0.3125rem !default; // 5px

// Modal Success

$modal-success: () !default;
$modal-success: map-merge((
	header-bg: theme-color-level(success, -10),
	header-border-color: theme-color-level(success, -9),
	header-color: theme-color-level(success, 6),
	header-close: (
		color: theme-color-level(success, 6),
		hover-color: inherit,
		focus-color: inherit,
		disabled-color: inherit
	)
), $modal-success);

// Modal Info

$modal-info: () !default;
$modal-info: map-merge((
	header-bg: theme-color-level(info, -10),
	header-border-color: theme-color-level(info, -9),
	header-color: theme-color-level(info, 6),
	header-close: (
		color: theme-color-level(info, 6),
		hover-color: inherit,
		focus-color: inherit,
		disabled-color: inherit
	)
), $modal-info);

// Modal Warning

$modal-warning: () !default;
$modal-warning: map-merge((
	header-bg: theme-color-level(warning, -10),
	header-border-color: theme-color-level(warning, -9),
	header-color: theme-color-level(warning, 6),
	header-close: (
		color: theme-color-level(warning, 6),
		hover-color: inherit,
		focus-color: inherit,
		disabled-color: inherit
	)
), $modal-warning);

// Modal Danger

$modal-danger: () !default;
$modal-danger: map-merge((
	header-bg: theme-color-level(danger, -10),
	header-border-color: theme-color-level(danger, -9),
	header-color: theme-color-level(danger, 6),
	header-close: (
		color: theme-color-level(danger, 6),
		hover-color: inherit,
		focus-color: inherit,
		disabled-color: inherit
	)
), $modal-danger);

$modal-palette: () !default;
$modal-palette: map-merge((
	success: $modal-success,
	info: $modal-info,
	warning: $modal-warning,
	danger: $modal-danger
), $modal-palette);
$multi-step-nav-margin-bottom: 15px !default;
$multi-step-nav-padding-x: 15px !default;
$multi-step-nav-padding-y: 0 !default;

$multi-step-icon-bg: $gray-200 !default;
$multi-step-icon-color: rgba($black, 0.5) !default;
$multi-step-icon-border-radius: $border-radius !default;
$multi-step-icon-font-size: $font-size-base !default;
$multi-step-icon-font-weight: null !default;
$multi-step-icon-size: 2rem !default;

$multi-step-icon-hover-bg: $multi-step-icon-bg !default;
$multi-step-icon-hover-color: rgba($black, 0.7) !default;
$multi-step-icon-hover-text-decoration: none !default;

$multi-step-divider-bg: $gray-200 !default;
$multi-step-divider-height: 0.25rem !default;
$multi-step-divider-spacer-x: 0 !default;
$multi-step-divider-top: ($multi-step-divider-height / 2) + ($multi-step-icon-size / 2) !default;

$multi-step-indicator-width: $multi-step-icon-size + ($multi-step-divider-spacer-x * 2) !default;

$multi-step-indicator-label-color: null !default;
$multi-step-indicator-label-font-size: $font-size-base !default;
$multi-step-indicator-label-font-weight: null !default;
$multi-step-indicator-label-max-width: 100px !default;

$multi-step-title-color: null !default;
$multi-step-title-font-size: $font-size-base !default;
$multi-step-title-font-weight: null !default;
$multi-step-title-margin-bottom: 0.625rem !default; // 10px
$multi-step-title-max-width: 100px !default;

$multi-step-item-margin-bottom: 10px !default;
$multi-step-item-width: 75px !default;
$multi-step-item-fixed-width: 150px !default;

$multi-step-icon-complete-color: #FFF !default;
$multi-step-icon-complete-bg: $secondary !default;
$multi-step-icon-complete-bg-image: clay-icon(check, $multi-step-icon-complete-color) !default;
$multi-step-icon-complete-bg-position: center !default;
$multi-step-icon-complete-bg-size: $multi-step-icon-font-size !default;
$multi-step-divider-complete-bg: $multi-step-icon-complete-bg !default;
$multi-step-dropdown-indicator-complete-icon: clay-icon(check, $dropdown-link-active-color) !default;
$multi-step-dropdown-indicator-complete-width: 0.875rem !default;

$multi-step-icon-active-color: $component-active-color !default;
$multi-step-icon-active-bg: $component-active-bg !default;
$multi-step-icon-active-bg-image: null !default;
$multi-step-icon-active-bg-position: center !default;
$multi-step-icon-active-bg-size: $multi-step-icon-font-size !default;
$multi-step-divider-active-bg: $multi-step-divider-bg !default;

$multi-step-icon-disabled-bg: $gray-100 !default;
$multi-step-icon-disabled-bg-image: null !default;
$multi-step-icon-disabled-bg-position: null !default;
$multi-step-icon-disabled-bg-size: null !default;
$multi-step-icon-disabled-color: $gray-400 !default;
$multi-step-icon-disabled-cursor: $disabled-cursor !default;
$multi-step-divider-disabled-bg: $multi-step-icon-disabled-bg !default;
$multi-step-title-disabled-color: $multi-step-icon-disabled-color !default;
$multi-step-indicator-label-disabled-color: $multi-step-title-disabled-color !default;
$nav-font-size: null !default;

$nav-link-disabled-cursor: $disabled-cursor !default;

$nav-item-monospaced-size: 2rem !default; // 32px

$nav-btn-margin-x: 0.25rem !default; // 4px
$nav-btn-margin-y: (($line-height-base * $font-size-base) + ($nav-link-padding-y * 2) - $nav-item-monospaced-size) / 2 !default;
$nav-btn-padding-x: $btn-padding-x-sm !default;
$nav-btn-padding-y: 0 !default;

$nav-form-padding-bottom: 0 !default;
$nav-form-padding-left: $nav-link-padding-x !default;
$nav-form-padding-right: $nav-link-padding-x !default;
$nav-form-padding-top: 0 !default;

// Nav Stacked

$nav-stacked-nav-form-padding-bottom: $nav-link-padding-y !default;
$nav-stacked-nav-form-padding-left: 0.5rem !default;
$nav-stacked-nav-form-padding-right: 0.5rem !default;
$nav-stacked-nav-form-padding-top: $nav-link-padding-y !default;

// Nav Nested

$nav-nested-margins-spacer-x: $nav-link-padding-x !default;
$nav-nested-spacer-x: $nav-link-padding-x !default;

// Nav Tabs

$nav-tabs-font-size: null !default;
$nav-tabs-link-color: null !default;
$nav-tabs-link-padding-x: null !default;
$nav-tabs-link-padding-y: null !default;

$nav-tabs-link-show-color: null !default;
$nav-tabs-link-show-bg: null !default;
$nav-tabs-link-show-border-color: null !default;

$nav-tabs-tab-pane-bg: null !default;
$nav-tabs-tab-pane-border-radius: null !default;
$nav-tabs-tab-pane-padding: null !default;

// Nav Underline

$nav-underline-font-size: null !default;

$nav-underline-link-highlight-palette: null !default;

$nav-underline-link-color: null !default;
$nav-underline-link-padding-x: null !default;
$nav-underline-link-padding-y: null !default;
$nav-underline-link-hover-color: null !default;
$nav-underline-link-highlight-content: null !default;
$nav-underline-link-highlight-height: null !default;
$nav-underline-link-highlight-bottom: 0 !default;
$nav-underline-link-highlight-left: $nav-link-padding-x / 2 !default;
$nav-underline-link-highlight-right: $nav-link-padding-x / 2 !default;
$nav-underline-link-highlight-top: null !default;

$nav-underline-link-disabled-color: null !default;
$nav-underline-link-disabled-highlight: null !default;

$nav-underline-link-active-color: null !default;
$nav-underline-link-active-highlight: $component-active-bg !default;
$nav-underline-link-active-content: '' !default;
$nav-underline-link-active-highlight-height: 0.1875rem !default;
$collapse-icon-padding-left: null !default;
$collapse-icon-padding-right: 2.28125rem !default; // 45px

$collapse-icon-position-bottom: null !default;
$collapse-icon-position-left: null !default;
$collapse-icon-position-right: 0.9375rem !default; // 15px
$collapse-icon-position-top: clay-collapse-icon-align($nav-link-padding-y, 0.0625rem, $font-size-base) !default;

$lexicon-icon-size: 1em !default; // 16px

$lexicon-icon-sm-font-size: 0.5rem !default; // 8px
$lexicon-icon-lg-font-size: 2rem !default; // 32px
$lexicon-icon-xl-font-size: 8rem !default; // 128px

$order-arrow-down-active-color: rgba($black, 0.9) !default;
$order-arrow-up-active-color: $order-arrow-down-active-color !default;
// Menubar Vertical MD

$menubar-vertical-expand-md: () !default;
$menubar-vertical-expand-md: map-merge((
	margin-bottom-mobile: 1.5rem,
	margin-left-mobile: -($grid-gutter-width / 2),
	margin-right-mobile: -($grid-gutter-width / 2),
	collapse-z-index-mobile: $zindex-navbar-collapse-absolute - 1
), $menubar-vertical-expand-md);

$menubar-vertical-transparent-md: () !default;
$menubar-vertical-transparent-md: map-merge((
	bg-mobile: $light
), $menubar-vertical-transparent-md);

// Menubar Vertical LG

$menubar-vertical-expand-lg: () !default;
$menubar-vertical-expand-lg: map-merge((
	breakpoint-up: lg,
	margin-bottom-mobile: 1.5rem,
	margin-left-mobile: -($grid-gutter-width / 2),
	margin-right-mobile: -($grid-gutter-width / 2),
	collapse-z-index-mobile: $zindex-navbar-collapse-absolute - 1
), $menubar-vertical-expand-lg);

$menubar-vertical-transparent-lg: () !default;
$menubar-vertical-transparent-lg: map-merge((
	breakpoint-up: lg,
	bg-mobile: $light
), $menubar-vertical-transparent-lg);
$enable-scaling-navbar: $enable-scaling-components !default;

$navbar-border-radius: null !default;
$navbar-font-size: null !default;

$navbar-underline-active-bg: $component-active-bg !default;

$navbar-title-font-size: 1.25rem !default; // 20px
$navbar-title-font-weight: $font-weight-semi-bold !default;
$navbar-title-margin-bottom: 0 !default;
$navbar-title-text-transform: null !default;

$navbar-text-truncate-spacer-right: 1.5625rem !default; // 25px
$navbar-text-truncate-max-width: 12.5rem !default; // 200px

$navbar-toggler-cursor: null !default;
$application-bar-size: () !default;
$application-bar-size: map-merge((
	scaling-navbar: true,
	font-size: $navbar-font-size,
	height: 3.5rem,
	height-mobile: 3rem,
	btn-monospaced-font-size: 1rem,
	link-height: 2rem,
	link-height-mobile: 2rem,
	link-margin-x: 0.5rem,
	link-padding-x: 0.25rem,
	padding-x: 0,
	padding-y: 0
), $application-bar-size);

$application-bar-dark: () !default;
$application-bar-dark: map-merge((
	bg: $dark,
	color: $navbar-dark-color,
	link-color: $navbar-dark-color,
	link-hover-color: $navbar-dark-hover-color,
	link-active-color: $navbar-dark-active-color,
	link-disabled-color: $navbar-dark-disabled-color,
	link-disabled-opacity: 1
), $application-bar-dark);
$management-bar-size: () !default;
$management-bar-size: map-merge((
	scaling-navbar: true,
	font-size: $navbar-font-size,
	height: 4rem,
	height-mobile: 3rem,
	border-bottom-width: 0.0625rem,
	padding-x: 0,
	padding-y: 0,
	btn-monospaced-font-size: 1rem,
	link-height: 2rem,
	link-height-mobile: 2rem,
	link-margin-x: 0.5rem,
	link-margin-x-mobile: 0.25rem,
	link-padding-x-mobile: 0.25rem,
	form-control-height-mobile: 2rem,
	toggler-margin-x: 0.875rem,
	active-border-bottom-width: 0.25rem,
	nav-item-dropdown-margin-top: 0
), $management-bar-size);

$management-bar-light: () !default;
$management-bar-light: map-merge((
	bg: $light,
	link-color: $navbar-light-color,
	link-hover-color: $navbar-light-hover-color,
	link-active-color: $navbar-light-active-color,
	link-disabled-color: $navbar-light-disabled-color,
	link-disabled-opacity: 1
), $management-bar-light);

$management-bar-primary: () !default;
$management-bar-primary: map-merge((
	bg: lighten($primary, 44.90),
	border-color: $primary,
	color: $navbar-light-color,
	link-color: $navbar-light-color,
	link-hover-color: $navbar-light-hover-color,
	link-active-color: $navbar-light-active-color,
	link-disabled-color: $navbar-light-disabled-color,
	link-disabled-opacity: 1
), $management-bar-primary);
$navigation-bar-size: () !default;
$navigation-bar-size: map-merge((
	scaling-navbar: false,
	border-bottom-width: 0.0625rem,
	font-size: $navbar-font-size,
	height: 3rem,
	padding-x: 0,
	padding-y: 0,
	link-padding-x: 1rem,
	collapse-dropdown-item-padding-x-mobile: 1rem,
	collapse-dropdown-item-padding-y-mobile: 0.71875rem,
	nav-item-dropdown-margin-top: 0,
	active-border-bottom-width: 0.25rem
), $navigation-bar-size);

$navigation-bar-light: () !default;
$navigation-bar-light: map-merge((
	bg: $light,
	link-color: $navbar-light-color,
	link-hover-color: $navbar-light-hover-color,
	link-active-color: $navbar-light-active-color,
	link-disabled-color: $navbar-light-disabled-color,
	link-disabled-opacity: 1
), $navigation-bar-light);

$navigation-bar-secondary: () !default;
$navigation-bar-secondary: map-merge((
	bg: $secondary,
	color: #FFF,
	link-color: rgba(255, 255, 255, 0.65),
	link-hover-color: rgba(255, 255, 255, 0.9),
	link-active-color: rgba(255, 255, 255, 0.9),
	link-disabled-color: rgba(255, 255, 255, 0.25),
	link-disabled-opacity: 1,
	brand-color: rgba(255, 255, 255, 0.9),
	brand-hover-color: rgba(255, 255, 255, 0.9)
), $navigation-bar-secondary);
$pagination-font-size: null !default;

$pagination-item-margin-x: null !default;
$pagination-item-margin-y: null !default;

$pagination-link-border-radius: null !default;
$pagination-link-cursor: null !default;

$pagination-margin-bottom: 0.5rem !default;

$pagination-disabled-cursor: $disabled-cursor !default;
$pagination-disabled-opacity: null !default;
$pagination-disabled-pointer-events: auto !default;

$pagination-dropdown-menu-spacer-y: null !default;

$pagination-items-per-page-bg: null !default;
$pagination-items-per-page-border-color: $pagination-border-color !default;
$pagination-items-per-page-border-radius: $border-radius !default;
$pagination-items-per-page-color: $pagination-color !default;
$pagination-items-per-page-font-size: $pagination-font-size !default;

$pagination-items-per-page-hover-bg: $pagination-hover-bg !default;
$pagination-items-per-page-hover-border-color: $pagination-hover-border-color !default;
$pagination-items-per-page-hover-color: $pagination-hover-color !default;

$pagination-results-color: null !default;

// Sizes

$pagination-font-size-sm: $font-size-sm !default;
$pagination-line-height-sm: $line-height-sm !default;
$pagination-link-border-radius-sm: null !default;

$pagination-font-size-lg: $font-size-lg !default;
$pagination-line-height-lg: $line-height-lg !default;
$pagination-link-border-radius-lg: null !default;
$panel-bg: #FFF !default;
$panel-border-color: transparent !default;
$panel-border-style: solid !default;

$panel-border-bottom-width: 1px !default;
$panel-border-left-width: 1px !default;
$panel-border-right-width: 1px !default;
$panel-border-top-width: 1px !default;
$panel-border-width: $panel-border-top-width $panel-border-right-width $panel-border-bottom-width $panel-border-left-width !default;

$panel-border-radius: $border-radius !default;
$panel-box-shadow: null !default;
$panel-margin-bottom: $spacer !default;

// Panel Header

$panel-header-border-bottom-width: 1px !default;
$panel-header-offset-border-radius: if($panel-border-top-width > 0, calc(#{$panel-border-radius} - #{$panel-border-top-width}), $panel-border-radius) !default;
$panel-header-font-size: $font-size-base !default;
$panel-header-line-height: $headings-line-height !default;
$panel-header-padding-x: 1.25rem !default;
$panel-header-padding-y: 0.75rem !default;

$panel-header-collapse-icon-font-size: 0.875rem !default; // 14px
$panel-header-collapse-icon-bottom: null !default;
$panel-header-collapse-icon-left: null !default;
$panel-header-collapse-icon-right: null !default;
$panel-header-collapse-icon-top: clay-collapse-icon-align($panel-header-padding-y, 0, $panel-header-font-size, $panel-header-line-height) !default;

$panel-header-collapse-icon-padding-left: null !default;
$panel-header-collapse-icon-padding-right: null !default;

$panel-header-link-text-decoration: null !default;
$panel-header-link-hover-text-decoration: null !default;

// Panel Body

$panel-body-padding-x: 1.25rem !default;
$panel-body-padding-y: 0.75rem !default;

// Panel Footer

$panel-footer-border-top-width: 1px !default;
$panel-footer-offset-border-radius: if($panel-border-bottom-width > 0, calc(#{$panel-border-radius} - #{$panel-border-bottom-width}), $panel-border-radius) !default;
$panel-footer-padding-x: $panel-header-padding-x !default;
$panel-footer-padding-y: $panel-header-padding-y !default;

// Panel Title

$panel-title-font-size: null !default;
$panel-title-font-weight: $font-weight-semi-bold !default;
$panel-title-text-transform: null !default;

// Panel Group

$panel-group-panel-margin-bottom: -$panel-border-bottom-width !default;

// Panel Group Flush

$panel-group-flush-body-margin-bottom: 1.5rem !default;
$panel-group-flush-body-padding: 0 !default;

$panel-group-flush-collapse-icon-left: null !default;
$panel-group-flush-collapse-icon-right: 0 !default;
$panel-group-flush-collapse-icon-padding-left: null !default;
$panel-group-flush-collapse-icon-padding-right: 1.5rem !default;

// Panel Variants

$panel-secondary: () !default;
$panel-secondary: map-merge((
	border-color: rgba($black, 0.125),
	header-bg: $gray-100,
	header-border-color: rgba($black, 0.125),
	footer-bg: $gray-100,
	footer-border-color: rgba($black, 0.125)
), $panel-secondary);
$popover-inline-scroller-max-height: 14.75rem !default; // 236px

$popover-arrow-offset: 0.375rem !default; // 6px

$popover-bottom-arrow-color: $popover-header-bg !default;
$popover-bottom-left-arrow-color: $popover-header-bg !default;
$popover-bottom-right-arrow-color: $popover-header-bg !default;
$popover-left-arrow-color: null !default;
$popover-left-bottom-arrow-color: null !default;
$popover-left-top-arrow-color: $popover-header-bg !default;
$popover-right-arrow-color: null !default;
$popover-right-bottom-arrow-color: null !default;
$popover-right-top-arrow-color: $popover-header-bg !default;
$popover-top-arrow-color: null !default;
$popover-top-left-arrow-color: null !default;
$popover-top-right-arrow-color: null !default;

$popover-header-border-color: null !default;
$popover-header-font-size: $font-size-base !default;
$popover-header-font-weight: $font-weight-semi-bold !default;
$popover-header-margin-x: null !default;
$popover-header-margin-y: null !default;

$popover-offset-border-width: calc(#{$popover-border-radius} - #{$popover-border-width}) !default;
$progress-min-width: 6.25rem !default; // 100px

$progress-bar-box-shadow: null !default;

// Progress Sizes

$progress-border-radius-lg: $border-radius !default;
$progress-font-size-lg: $font-size-lg !default;
$progress-height-lg: $progress-height * 2 !default;

// Progress Group

$progress-group-subtitle: () !default;

$progress-group-addon-font-size: null !default;
$progress-group-addon-font-weight: null !default;
$progress-group-addon-spacer-x: 1rem !default;

$progress-group-stacked-progress-margin-bottom: 0.25rem !default; // 4px
$progress-group-stacked-progress-margin-top: 0.25rem !default; // 4px

// Progress Variants

$progress-group-feedback-color: $primary !default;

$progress-bar-danger-bg: $danger !default;
$progress-group-feedback-danger-color: $progress-bar-danger-bg !default;

$progress-bar-info-bg: $info !default;
$progress-group-feedback-info-color: $progress-bar-info-bg !default;

$progress-bar-success-bg: $success !default;
$progress-group-feedback-success-color: $progress-bar-success-bg !default;

$progress-bar-warning-bg: $warning !default;
$progress-group-feedback-warning-color: $progress-bar-warning-bg !default;

$progress-palette: () !default;
$progress-palette: map-merge((
	success: (
		bar-bg: $progress-bar-success-bg,
		group-feedback-color: $progress-group-feedback-success-color
	),
	info: (
		bar-bg: $progress-bar-info-bg,
		group-feedback-color: $progress-group-feedback-info-color
	),
	warning: (
		bar-bg: $progress-bar-warning-bg,
		group-feedback-color: $progress-group-feedback-warning-color
	),
	danger: (
		bar-bg: $progress-bar-danger-bg,
		group-feedback-color: $progress-group-feedback-danger-color
	)
), $progress-palette);
$quick-action-font-size: null !default;
$quick-action-padding-x: null !default;
$quick-action-padding-y: null !default;

$quick-action-item-margin-x: 0.5rem !default; // 8px
$quick-action-item-margin-y: null !default;
$quick-action-item-padding-x: null !default; // 8px
$quick-action-item-padding-y: null !default; // 8px

$quick-action-item-min-height: 2rem !default; // 32px
$quick-action-item-min-width: 2rem !default; // 32px

$quick-action-item-border-radius: $border-radius !default;

$quick-action-item-disabled-cursor: $disabled-cursor !default;
$quick-action-item-disabled-opacity: 0.65 !default;
$sheet-bg: $white !default;
$sheet-border-color: rgba($black, 0.125) !default;
$sheet-border-style: solid !default;
$sheet-border-width: 0.0625rem !default; // 1px

$sheet-border-radius: $border-radius !default;

$sheet-padding-bottom: 0.0625rem !default; // 1px
$sheet-padding-left: 1.5rem !default; // 24px
$sheet-padding-right: 1.5rem !default; // 24px
$sheet-padding-top: 1.5rem !default; // 24px

$sheet-padding-bottom-mobile: null !default;
$sheet-padding-left-mobile: null !default;
$sheet-padding-right-mobile: null !default;
$sheet-padding-top-mobile: null !default;

// Sheet Header

$sheet-header-margin-bottom: 3rem !default; // 48px
$sheet-header-margin-bottom-mobile: null !default;

// Sheet Section

$sheet-section-margin-bottom: 3rem !default; // 48px
$sheet-section-margin-bottom-mobile: null !default;

$sheet-panel-group-margin-bottom: 1.5rem !default; // 24px
$sheet-panel-group-margin-bottom-mobile: null !default;

// Sheet Footer

$sheet-footer-margin-bottom: 1.5rem !default; // 24px
$sheet-footer-margin-left: null !default;
$sheet-footer-margin-right: null !default;
$sheet-footer-margin-top: 1.5rem !default; // 24px

$sheet-footer-margin-bottom-mobile: null !default;
$sheet-footer-margin-left-mobile: null !default;
$sheet-footer-margin-right-mobile: null !default;
$sheet-footer-margin-top-mobile: null !default;

$sheet-footer-btn-block-sm-down: () !default;
$sheet-footer-btn-block-sm-down: map-merge((
	breakpoint-down: sm,
	btn-margin-bottom-mobile: 1rem
), $sheet-footer-btn-block-sm-down);

// Sheet Sizes

$sheet-lg-max-width: ceil(map-get($container-max-widths, lg) * 0.83333) !default; // 800px

// Sheet Title

$sheet-title-color: null !default;
$sheet-title-font-size: 1.5rem !default; // 24px
$sheet-title-font-weight: $font-weight-semi-bold !default;
$sheet-title-line-height: $headings-line-height !default; // 1.2
$sheet-title-margin-bottom: 1.5rem !default; // 24px

$sheet-title-font-size-mobile: 1.25rem !default; // 20px
$sheet-title-margin-bottom-mobile: null !default;

// Sheet Subtitle

$sheet-subtitle-border-color: null !default;
$sheet-subtitle-border-style: solid !default;
$sheet-subtitle-border-width: 0 0 1px 0 !default;
$sheet-subtitle-color: null !default;
$sheet-subtitle-font-size: 0.875rem !default; // 14px
$sheet-subtitle-font-weight: $font-weight-semi-bold !default;
$sheet-subtitle-line-height: $headings-line-height !default; // 1.2
$sheet-subtitle-margin-bottom: 1.5rem !default; // 24px
$sheet-subtitle-padding-x: null !default;
$sheet-subtitle-padding-y: 0.3125rem !default; // 5px
$sheet-subtitle-text-transform: uppercase !default;

$sheet-subtitle-font-size-mobile: null !default;
$sheet-subtitle-margin-bottom-mobile: null !default;

$sheet-subtitle-heading-text-margin-bottom: 0 !default;
$sheet-subtitle-heading-text-margin-top: null !default;

// Sheet Subtitle as Panel Header

$sheet-subtitle-link-color: $sheet-subtitle-color !default;
$sheet-subtitle-link-text-decoration: null !default;
$sheet-subtitle-link-hover-color: null !default;
$sheet-subtitle-link-hover-text-decoration: none !default;

$sheet-subtitle-collapse-icon-bottom: null !default;
$sheet-subtitle-collapse-icon-left: null !default;
$sheet-subtitle-collapse-icon-right: null !default;
$sheet-subtitle-collapse-icon-top: clay-collapse-icon-align($sheet-subtitle-padding-y, 0, $sheet-subtitle-font-size, $sheet-subtitle-line-height) !default;

$sheet-subtitle-collapse-icon-padding-left: null !default;
$sheet-subtitle-collapse-icon-padding-right: null !default;

// Sheet Tertiary Title

$sheet-tertiary-title-color: $sheet-subtitle-color !default;
$sheet-tertiary-title-font-size: $sheet-subtitle-font-size !default;
$sheet-tertiary-title-font-weight: $sheet-subtitle-font-weight !default;
$sheet-tertiary-title-line-height: $sheet-subtitle-line-height !default;
$sheet-tertiary-title-margin-bottom: $sheet-subtitle-margin-bottom !default;
$sheet-tertiary-title-padding-x: $sheet-subtitle-padding-x !default;
$sheet-tertiary-title-padding-y: $sheet-subtitle-padding-y !default;
$sheet-tertiary-title-text-transform: $sheet-subtitle-text-transform !default;

$sheet-tertiary-title-font-size-mobile: null !default;
$sheet-tertiary-title-margin-bottom-mobile: null !default;

// Sheet Text

$sheet-text-color: null !default;
$sheet-text-font-size: null !default;
$sheet-text-font-weight: null !default;
$sheet-text-margin-bottom: 1.5rem !default; // 24px

$sheet-text-font-size-mobile: null !default;
$sheet-text-margin-bottom-mobile: null !default;
$sidenav-transition: all 0.5s ease !default;
$sidenav-width: 320px !default;
$sidebar-padding-bottom: 1.5rem !default; // 24px
$sidebar-padding-left: 1.5rem !default; // 24px
$sidebar-padding-right: 1.5rem !default; // 24px
$sidebar-padding-top: 1.5rem !default; // 24px

// Sidebar Header Title

$sidebar-header-component-title: () !default;
$sidebar-header-component-title: map-merge((
	font-size: 1.5rem, // 24px,
	font-weight: $font-weight-semi-bold,
	clay-link: (
		color: $body-color
	)
), $sidebar-header-component-title);

// Sidebar Header Subtitle

$sidebar-header-component-subtitle: () !default;
$sidebar-header-component-subtitle: map-merge((
	font-size: 1.125rem, // 18px
	font-weight: $font-weight-semi-bold,
	margin-bottom: 0
), $sidebar-header-component-subtitle);

// Sidebar DT

$sidebar-dt: () !default;
$sidebar-dt: map-merge((
	font-size: 0.875rem, // 14px
	font-weight: $font-weight-semi-bold,
	margin-bottom: 0.25rem, // 4px
	text-transform: uppercase
), $sidebar-dt);

// Sidebar DD

$sidebar-dd: () !default;
$sidebar-dd: map-merge((
	font-size: 0.875rem, // 14px
	margin-bottom: 0.75rem // 12px
), $sidebar-dd);

// Sidebar Panel

$sidebar-panel-margin-bottom: 1rem !default; // 16px

// Sidebar List Group

$sidebar-list-group-bg: transparent !default;
$sidebar-list-group-border-color: $gray-300 !default;
$sidebar-list-group-font-size: 0.875rem !default; // 14px
$sidebar-list-group-type: list-group-flush !default;

$sidebar-list-group-item-padding: 0 !default;

$sidebar-list-group-autofit-col-padding-x: 0.5rem !default; // 8px
$sidebar-list-group-autofit-col-padding-y: 1rem !default; // 16px

$sidebar-list-group-sticker-size: () !default;
$sidebar-list-group-sticker-size: map-merge($sticker-sm, $sidebar-list-group-sticker-size);

// Sidebar Light

$sidebar-light: () !default;
$sidebar-light: map-merge((
	bg: $light,
	border-color: $gray-300,
	border-left-width: 1px,
	color: $body-color,
	dd: (
		clay-link: (
			color: $body-color
		)
	),
	panel-bg: $gray-200,
	sidebar-list-group-title: (
		font-size: 1rem,
		clay-link: (
			color: $body-color
		)
	)
), $sidebar-light);

$sidebar-light-navigation-bar: () !default;
$sidebar-light-navigation-bar: map-merge((
	bg: $light,
	border-color: $gray-300,
	link-color: $navbar-light-color,
	link-hover-color: $navbar-light-hover-color,
	link-active-color: $navbar-light-active-color,
	link-disabled-color: $navbar-light-disabled-color
), $sidebar-light-navigation-bar);
$table-responsive-margin-bottom: 1.5rem !default;

// Table

$table-font-size: null !default;
$table-margin-bottom: 0 !default;

$table-cell-gutters: $grid-gutter-width / 2 !default; // 15px

$table-disabled-bg: #FFF !default;
$table-disabled-color: #ACACAC !default;
$table-disabled-cursor: $disabled-cursor !default;
$table-disabled-pointer-events: none !default;

$table-head-border-bottom-width: null !default;
$table-head-border-top-width: 0 !default;
$table-head-font-size: null !default;
$table-head-font-weight: null !default;
$table-head-height: 36px !default;

$table-head-link: () !default;

$table-head-title-inline-item-spacer-x: 0.25rem !default; // 4px
$table-head-title-text-truncate-max-width: calc(100% - 1em - #{$table-head-title-inline-item-spacer-x}) !default;

$table-data-border-bottom-width: $table-border-width !default;
$table-data-border-left-width: 0 !default;
$table-data-border-right-width: 0 !default;
$table-data-border-top-width: $table-border-width !default;

$table-data-border-color: $table-border-color !default;
$table-data-border-style: solid !default;
$table-data-vertical-align: middle !default;

$table-divider-bg: #FFF !default;
$table-divider-color: null !default;
$table-divider-font-weight: null !default;
$table-divider-font-size: null !default;
$table-divider-padding: $table-cell-padding !default;
$table-divider-text-transform: null !default;

$table-quick-action-menu-align-items: flex-start !default;
$table-quick-action-menu-bg: if($table-bg == transparent, $body-bg, $table-bg) !default;
$table-quick-action-menu-accent-bg: $table-accent-bg !default;
$table-quick-action-menu-accent-active-bg: $table-accent-bg !default;
$table-quick-action-menu-active-bg: $table-active-bg !default;
$table-quick-action-menu-hover-bg: $table-hover-bg !default;

$table-cell-expand-min-width: 12.5rem !default; // 200px

$table-cell-expand-small-max-width: 12.5rem !default; // 200px
$table-cell-expand-small-width: 25% !default;

$table-cell-expand-smaller-max-width: 12.5rem !default; // 200px
$table-cell-expand-smaller-width: 15% !default;

$table-cell-expand-smallest-max-width: 12.5rem !default; // 200px
$table-cell-expand-smallest-width: 10% !default;

// Table Bordered

$table-bordered-border-width: $table-border-width !default;

// Table Title

$table-title: () !default;
$table-title: map-merge((
	font-size: $font-size-base, // 16px
	font-weight: $font-weight-semi-bold,
	line-height: $line-height-base,
	margin-bottom: 0
), $table-title);

$table-title-link: () !default;
$table-title-link: map-merge((
	color: $body-color,
	hover-color: $body-color
), $table-title-link);

// Table Link

$table-link: () !default;
$table-link: map-merge((
	color: $gray-700,
	hover-color: darken($gray-700, 15%)
), $table-link);

// Table Action Link

$table-action-link: () !default;
$table-action-link: map-merge((
	align-items: center,
	border-radius: $btn-border-radius,
	display: inline-flex,
	height: 2rem,
	justify-content: center,
	vertical-align: middle,
	width: 2rem,
	hover-text-decoration: none,
	lexicon-icon-margin-top: 0
), $table-action-link);

// Table List

$table-list-bg: #FFF !default;
$table-list-color: null !default;
$table-list-accent-bg: #F2F2F2 !default;
$table-list-hover-bg: #ECECEC !default;
$table-list-active-bg: #DADADA !default;

$table-list-disabled-bg: #FFF !default;
$table-list-disabled-color: #ACACAC !default;
$table-list-disabled-cursor: $disabled-cursor !default;
$table-list-disabled-pointer-events: none !default;

$table-list-border-color: $table-border-color !default;

$table-list-border-x-width: 0.0625rem !default; // 1px
$table-list-border-y-width: 0.0625rem !default; // 1px

$table-list-border-width: $table-list-border-y-width $table-list-border-x-width !default;

$table-list-border-radius: $border-radius !default;
$table-list-font-size: null !default;
$table-list-margin-bottom: $table-list-border-y-width !default;
$table-list-margin-top: null !default;

$table-list-head-bg: null !default;
$table-list-head-font-size: null !default;
$table-list-head-font-weight: null !default;
$table-list-head-height: null !default;
$table-list-head-vertical-alignment: null !default;

$table-list-head-link: () !default;

$table-list-divider-padding-x: 0.75rem !default; // 12px
$table-list-divider-padding-y: 0.75rem !default; // 12px

$table-list-quick-action-menu-align-items: center !default;
$table-list-quick-action-menu-bg: $table-list-bg !default;
$table-list-quick-action-menu-accent-bg: $table-list-accent-bg !default;
$table-list-quick-action-menu-accent-active-bg: $table-list-active-bg !default;
$table-list-quick-action-menu-active-bg: $table-list-active-bg !default;
$table-list-quick-action-menu-hover-bg: $table-list-hover-bg !default;

// Table List Title

$table-list-title: () !default;
$table-list-title: map-merge((
	font-size: $font-size-base, // 16px
	font-weight: $font-weight-semi-bold,
	line-height: $headings-line-height,
	margin-bottom: 0
), $table-list-title);

$table-list-title-link: () !default;
$table-list-title-link: map-merge((
	color: $body-color,
	hover-color: $body-color
), $table-list-title-link);

// Table List Link

$table-list-link: () !default;
$table-list-link: map-merge((
	color: $gray-700,
	hover-color: darken($gray-700, 15%)
), $table-list-link);

// Table List Action Link

$table-list-action-link: () !default;
$table-list-action-link: map-merge((
	align-items: center,
	display: inline-flex,
	height: 2rem,
	justify-content: center,
	vertical-align: middle,
	width: 2rem,
	hover-text-decoration: none,
	lexicon-icon-margin-top: 0
), $table-list-action-link);

// Table Valign

$table-valign-top-body-cell-padding-top: 1rem !default;

$table-valign-bottom-body-cell-padding-bottom: 1rem !default;
$tbar-item-padding-x: 0.25rem !default;
$tbar-item-padding-y: null !default;

// Tbar Inline {xs|sm|md|lg|xl} Down

$tbar-inline-xs-down: () !default;
$tbar-inline-xs-down: map-merge((
	breakpoint-down: nth(map-keys($grid-breakpoints), 1),
	item-padding-left: 0
), $tbar-inline-xs-down);

$tbar-inline-sm-down: () !default;
$tbar-inline-sm-down: map-merge((
	breakpoint-down: nth(map-keys($grid-breakpoints), 2),
	item-padding-left: 0
), $tbar-inline-sm-down);

$tbar-inline-md-down: () !default;
$tbar-inline-md-down: map-merge((
	breakpoint-down: nth(map-keys($grid-breakpoints), 3),
	item-padding-left: 0
), $tbar-inline-md-down);

$tbar-inline-lg-down: () !default;
$tbar-inline-lg-down: map-merge((
	breakpoint-down: nth(map-keys($grid-breakpoints), 4),
	item-padding-left: 0
), $tbar-inline-lg-down);

$tbar-inline-xl-down: () !default;
$tbar-inline-xl-down: map-merge((
	breakpoint-down: nth(map-keys($grid-breakpoints), 5),
	item-padding-left: 0
), $tbar-inline-xl-down);

// Component Tbar

$component-tbar: () !default;
$component-tbar: map-merge((
	border-color: $gray-300,
	border-style: solid,
	border-width: 0 0 0.0625rem 0,
	height: 3.5rem
), $component-tbar);

// Subnav Tbar

$subnav-tbar-component-title: () !default;
$subnav-tbar-component-title: map-merge((
	display: inline-block,
	font-size: 0.875rem,
	font-weight: $font-weight-semi-bold,
	line-height: 1.45,
	margin-bottom: 0.25rem,
	margin-top: 0.25rem,
	max-width: 100%
), $subnav-tbar-component-title);

$subnav-tbar-component-link: () !default;
$subnav-tbar-component-link: map-merge((
	color: $link-color,
	hover-color: $link-hover-color,
	font-weight: $font-weight-semi-bold
), $subnav-tbar-component-link);

$subnav-tbar-component-text: () !default;
$subnav-tbar-component-text: map-merge((
	display: inline-block,
	line-height: 1.45,
	margin-bottom: 0.25rem,
	margin-top: 0.25rem,
	max-width: 100%
), $subnav-tbar-component-text);

$subnav-tbar: () !default;
$subnav-tbar: map-merge((
	font-size: 0.875rem,
	section-text-align: left,
	strong-font-weight: $font-weight-semi-bold,
	item-padding-x: 0.5rem,
	btn-height: 1.5rem,
	btn-line-height: 1,
	btn-margin-y: 0.125rem,
	btn-padding-y: 0,
	btn-monospaced-margin-y: 0.125rem,
	btn-monospaced-padding: 0.25rem,
	component-link: $subnav-tbar-component-link,
	component-title: $subnav-tbar-component-title,
	component-text: $subnav-tbar-component-text,
	link-margin-y: 0.125rem,
	link-padding-x: 0.25rem,
	link-padding-y: 0.09375rem,
	link-monospaced-margin-y: 0.125rem,
	link-monospaced-size: 1.5rem
), $subnav-tbar);

// Subnav Tbar Variants

$subnav-tbar-light: () !default;
$subnav-tbar-light: map-merge((
	bg-color: $light,
	color: $navbar-light-color,
	padding-y: 0.125rem
), $subnav-tbar-light);

// Subnav Tbar Primary

$subnav-tbar-primary-component-link: () !default;
$subnav-tbar-primary-component-link: map-merge((
	color: $body-color,
	hover-color: $body-color,
	disabled-color: $secondary,
	disabled-cursor: $disabled-cursor,
	disabled-opacity: $btn-disabled-opacity,
	disabled-text-decoration: none
), $subnav-tbar-primary-component-link);

$subnav-tbar-primary-component-label-close: () !default;
$subnav-tbar-primary-component-label-close: map-merge((
	focus-color: inherit,
	disabled-color: $secondary,
	disabled-opacity: $btn-disabled-opacity
), $subnav-tbar-primary-component-label-close);

$subnav-tbar-primary-component-label: () !default;
$subnav-tbar-primary-component-label: map-merge((
	close: $subnav-tbar-primary-component-label-close
), $subnav-tbar-primary-component-label);

$subnav-tbar-primary-tbar-label-size: () !default;
$subnav-tbar-primary-tbar-label-size: map-merge((
	font-size: 0.75rem,
	margin-right: 0,
	padding-x: 0.625rem,
	padding-y: 0.3125rem,
	text-transform: none
), $subnav-tbar-primary-tbar-label-size);

$subnav-tbar-primary: () !default;
$subnav-tbar-primary: map-merge((
	bg-color: lighten($primary, 32.94),
	padding-x: 0.25rem,
	padding-y: 0.625rem,
	item-justify-content: flex-start,
	item-padding-x: 0.25rem,
	link-monospaced-border-radius: 0,
	link-monospaced-border-width: 0,
	link-monospaced-margin-y: -0.625rem,
	link-monospaced-size: 3rem,
	component-link: $subnav-tbar-primary-component-link,
	component-label: $subnav-tbar-primary-component-label,
	tbar-label-size: $subnav-tbar-primary-tbar-label-size
), $subnav-tbar-primary);

// Subnav Tbar Primary Disabled

$subnav-tbar-primary-disabled-component-label: () !default;
$subnav-tbar-primary-disabled-component-label: map-merge((
	border-color: #6C757D
), $subnav-tbar-primary-disabled-component-label);

$subnav-tbar-primary-disabled: () !default;
$subnav-tbar-primary-disabled: map-merge((
	bg-color: lighten(desaturate($primary, 27.03), 37.06),
	color: #6C757D,
	component-label: $subnav-tbar-primary-disabled-component-label
), $subnav-tbar-primary-disabled);
$timeline-border-color: #DDD !default;
$timeline-border-width: 2px !default;

$timeline-border-modifier: ceil($timeline-border-width / 2);

$timeline-icon-active-bg: $component-active-bg !default;
$timeline-icon-active-border-color: $timeline-icon-active-bg !default;

$timeline-icon-bg: $body-bg !default;
$timeline-icon-border-color: $timeline-border-color !default;
$timeline-icon-border-radius: 50% !default;
$timeline-icon-border-width: 2px !default;
$timeline-icon-size: 10px !default;

$timeline-increment-bg: $body-bg !default;

$timeline-item-label-color: $body-color !default;

// Sizes

$timeline-inner-spacing: 40px !default;
$timeline-outer-spacing: 25px !default;

$timeline-item-padding-bottom: 5px !default;
$timeline-item-padding-top: 5px !default;

$timeline-inner-spacing-xl: 50px !default;
$timeline-outer-spacing-xl: 25px !default;
$timeline-item-padding-y-xl: 15px !default;
$toggle-switch-transition: background-color 100ms ease-in, border-color 100ms ease-in, color 100ms ease-in, left 100ms ease-in, right 100ms ease-in !default;

// must all be same units--start
$toggle-switch-bar-padding: 0 !default; // space between button and bar, can be negative value
$toggle-switch-bar-padding-mobile: $toggle-switch-bar-padding !default;
$toggle-switch-button-width: 25px !default;
$toggle-switch-button-width-mobile: $toggle-switch-button-width !default;

$toggle-switch-bar-height: ($toggle-switch-bar-padding * 2) + $toggle-switch-button-width !default;
$toggle-switch-bar-height-mobile: $toggle-switch-bar-height !default;
$toggle-switch-bar-width: 50px !default; // width of switch bar
$toggle-switch-bar-width-mobile: $toggle-switch-bar-width !default;
// must all be same units--end

$toggle-switch-bar-bg: $input-group-addon-bg !default;
$toggle-switch-bar-border-color: $input-group-addon-border-color !default;
$toggle-switch-bar-border-radius: 3px !default;
$toggle-switch-bar-border-width: 1px !default;
$toggle-switch-bar-focus-box-shadow: 0 0 3px 2px #66AFE6 !default;
$toggle-switch-bar-font-size: 12px !default;
$toggle-switch-bar-font-size-mobile: $toggle-switch-bar-font-size !default;
$toggle-switch-bar-icon-color: $input-color !default;

$toggle-switch-button-bg: $input-bg !default;
$toggle-switch-button-border-color: $input-group-addon-border-color !default;
$toggle-switch-button-border-radius: 3px 0 0 3px !default;
$toggle-switch-button-border-width: 1px !default;
$toggle-switch-button-font-size: $toggle-switch-bar-font-size !default;
$toggle-switch-button-font-size-mobile: $toggle-switch-button-font-size !default; // null
$toggle-switch-button-icon-color: $input-color !default;

// Toggle Switch On
$toggle-switch-bar-on-bg: $component-active-bg !default;
$toggle-switch-bar-on-border-color: $toggle-switch-bar-on-bg !default;
$toggle-switch-bar-on-icon-color: $component-active-color !default;

$toggle-switch-button-on-bg: #FFF !default;
$toggle-switch-button-on-border-color: $toggle-switch-bar-on-bg !default;
$toggle-switch-button-on-border-radius: 0 3px 3px 0 !default;
$toggle-switch-button-on-icon-color: $toggle-switch-bar-on-bg !default;

// Toggle Switch Disabled

$toggle-switch-disabled-cursor: $disabled-cursor !default;
$toggle-switch-disabled-opacity: 0.4 !default;
$tooltip-box-shadow: null !default;

$tooltip-arrow-offset: 0.25rem !default; // 4px
$b-font-weight: null !default;

$strong-font-weight: null !default;

$reference-mark-font-size: 0.75rem !default;
$reference-mark-vertical-align: super !default;

$mark-color: null !default;
$bg-checkered-fg: $gray-200 !default;
$inline-scroller-max-height: 125px !default;

// Autofit Row

$autofit-col-expand-min-width: 3.125rem !default; // 50px

$autofit-padded-col-padding-x: 0.5rem !default; // 8px
$autofit-padded-col-padding-y: 0.25rem !default; // 4px

// Close

$close: () !default;
$close: map-merge((
	color: $black,
	opacity: 0.5,
	hover-opacity: 0.75,
	focus-opacity: 0.75,
	disabled-opacity: 0.25,
	btn-focus-box-shadow: 0 0 0 $btn-focus-width $input-btn-focus-color,
	btn-focus-outline: 0,
	align-items: center,
	border-radius: $btn-border-radius-sm,
	display: inline-flex,
	font-size: 1rem,
	justify-content: center,
	height: 2rem,
	text-align: center,
	width: 2rem,
	transition: $btn-transition,
	lexicon-icon-margin-top: 0
), $close);

// Heading

$heading-spacer-x: 1rem; // 16px

$heading-text-margin-bottom: auto;
$heading-text-margin-top: auto;

// Inline Item

$inline-item-lexicon-icon-margin-top: -0.21429em !default;
$inline-item-spacer-x: 0.5rem !default; // 8px

$page-header-bg: $gray-200 !default;
// Calculates and sets aspect ratio
// @param $width - width
// @param $height - height

@mixin clay-aspect-ratio($width: 1, $height: 1) {
	padding-bottom: percentage($height / $width);
}
// Creates a checkered background
// @param $fg-color - foreground color to use
// @param $bg-color - background color to use

@mixin clay-bg-checkered($fg-color: $gray-200, $bg-color: null) {
	background-color: $bg-color;
	background-image: linear-gradient(45deg, $fg-color 25%, transparent 25%), linear-gradient(-45deg, $fg-color 25%, transparent 25%), linear-gradient(45deg, transparent 75%, $fg-color 75%), linear-gradient(-45deg, transparent 75%, $fg-color 75%);
	background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
	background-size: 20px 20px;
}

// Replace any *-indicator with another icon via background-image, e.g. 
// .modal-title-indicator

@mixin clay-indicator-bg($map) {
	$indicator: map-get($map, indicator);
	$indicator-bg-position: setter(map-get($map, indicator-bg-position), top 0.125rem left);
	$indicator-bg-size: setter(map-get($map, indicator-bg-size), 100%);
	$indicator-display: setter(map-get($map, indicator-display), inline-block);
	$indicator-height: setter(map-get($map, indicator-height), #{$line-height-base}em);
	$indicator-text-indent: map-get($map, indicator-text-indent);
	$indicator-vertical-align: setter(map-get($map, indicator-vertical-align), middle);
	$indicator-width: setter(map-get($map, indicator-width), 1em);

	background-image: $indicator;
	background-position: $indicator-bg-position;
	background-repeat: no-repeat;
	background-size: $indicator-bg-size;
	display: $indicator-display;
	height: $indicator-height;
	margin-top: 0;
	text-indent: $indicator-text-indent;
	vertical-align: $indicator-vertical-align;
	width: $indicator-width;

	.lexicon-icon {
		display: none;
	}
}
@mixin clay-badge-size($map) {
	$border-width: setter(map-get($map, border-width), $badge-border-width);
	$font-size: map-get($map, font-size);
	$height: map-get($map, height);
	$padding-x: map-get($map, padding-x);
	$padding-y: setter(map-get($map, padding-y), 0);

	$lexicon-icon-height: setter(map-get($map, lexicon-icon-height), map-get($map, lexicon-icon-width));
	$lexicon-icon-margin-top: map-get($map, lexicon-icon-margin-top);
	$lexicon-icon-width: map-get($map, lexicon-icon-width);

	border-width: $border-width;
	font-size: $font-size;

	@if ($height) {
		line-height: $height - ($border-width * 2);
	}

	padding-bottom: $padding-y;
	padding-left: $padding-x;
	padding-right: $padding-x;
	padding-top: $padding-y;

	.inline-item {
		a,
		.btn-unstyled,
		.close {
			margin-top: $lexicon-icon-margin-top;

			.lexicon-icon {
				margin-top: 0;
			}
		}

		.lexicon-icon {
			height: $lexicon-icon-height;
			margin-top: $lexicon-icon-margin-top;
			width: $lexicon-icon-width;
		}
	}
}
@mixin box-shadow($shadow...) {
	@if ($enable-shadows) {
		@if (nth($shadow, 1) != null and length($shadow) <= 1) {
			box-shadow: $shadow;
		}
	}
}
@mixin clay-button-variant($map) {
	$bg: map-get($map, bg);
	$border-color: map-get($map, border-color);
	$color: map-get($map, color);
	$hover-bg: map-get($map, hover-bg);
	$hover-border-color: map-get($map, hover-border-color);
	$hover-color: map-get($map, hover-color);
	$focus-bg: setter(map-get($map, focus-bg), $hover-bg);
	$focus-border-color: setter(map-get($map, focus-border-color), $hover-border-color);
	$focus-box-shadow: map-get($map, focus-box-shadow);
	$focus-color: map-get($map, focus-color);
	$disabled-bg: map-get($map, disabled-bg);
	$disabled-border-color: map-get($map, disabled-border-color);
	$disabled-color: map-get($map, disabled-color);
	$active-bg: map-get($map, active-bg);
	$active-border-color: map-get($map, active-border-color);
	$active-box-shadow: map-get($map, active-box-shadow);
	$active-color: map-get($map, active-color);
	$active-focus-box-shadow: setter(map-get($map, active-focus-box-shadow), $focus-box-shadow);
	$loading-animation: setter(map-get($map, loading-animation), $clay-unset-placeholder);

	background-color: $bg;
	border-color: $border-color;
	color: $color;

	&:hover {
		background-color: $hover-bg;
		border-color: $hover-border-color;
		color: $hover-color;
	}

	&:focus,
	&.focus {
		background-color: $focus-bg;
		border-color: $focus-border-color;
		box-shadow: $focus-box-shadow;
		color: $focus-color;
	}

	&:disabled,
	&.disabled {
		background-color: $disabled-bg;
		border-color: $disabled-border-color;
		color: $disabled-color;
	}

	&:not([disabled]):not(.disabled):active,
	&:not([disabled]):not(.disabled).active,
	.show > &.dropdown-toggle {
		background-color: $active-bg;
		border-color: $active-border-color;
		box-shadow: $active-box-shadow;
		color: $active-color;

		&:focus {
			box-shadow: $active-focus-box-shadow;
		}
	}

	.loading-animation {
		@extend %#{$loading-animation} !optional;
	}
}
@mixin clay-card-type-asset($map) {
	$enabled: setter(map-get($map, enabled), true);

	$aspect-ratio-border-color: setter(map-get($map, aspect-ratio-border-color), $card-border-color);
	$aspect-ratio-border-style: setter(map-get($map, aspect-ratio-border-style), solid);
	$aspect-ratio-border-width: setter(map-get($map, aspect-ratio-border-bottom-width), 0 0 0.0625rem 0); // 0 0 1px 0
	$aspect-ratio-horizontal: setter(map-get($map, aspect-ratio-horizontal), 16);
	$aspect-ratio-vertical: setter(map-get($map, aspect-ratio-vertical), 9);

	$card-body-padding-bottom: map-get($map, card-body-padding-bottom);
	$card-body-padding-left: map-get($map, card-body-padding-left);
	$card-body-padding-right: map-get($map, card-body-padding-right);
	$card-body-padding-top: map-get($map, card-body-padding-top);
	$card-row-align-items: setter(map-get($map, card-row-align-items), flex-start);

	$checkbox-cursor: setter(map-get($map, checkbox-cursor), $link-cursor);

	$asset-icon-color: map-get($map, asset-icon-color);
	$asset-icon-width: setter(map-get($map, asset-icon-width), 22.225%);
	$asset-icon-sticker-border-radius: setter(map-get($map, asset-icon-sticker-border-radius), 50%);
	$asset-icon-sticker-font-size: setter(map-get($map, asset-icon-sticker-font-size), 2vw);

	$dropdown-action-offset-bottom: map-get($map, dropdown-action-offset-bottom);
	$dropdown-action-offset-left: map-get($map, dropdown-action-offset-left);
	$dropdown-action-offset-right: setter(map-get($map, dropdown-action-offset-right), -0.5rem); // -8px
	$dropdown-action-offset-top: setter(map-get($map, dropdown-action-offset-top), -0.1875rem); // -3px

	@if ($enabled) {
		.aspect-ratio {
			border-color: $aspect-ratio-border-color;
			border-style: $aspect-ratio-border-style;
			border-width: $aspect-ratio-border-width;

			@include clay-aspect-ratio($aspect-ratio-horizontal, $aspect-ratio-vertical);

			.custom-control label,
			.form-check-label {
				bottom: 0;
				cursor: $checkbox-cursor;
				left: 0;
				position: absolute;
				right: 0;
				top: 0;
			}
		}

		.card-body {
			padding-bottom: $card-body-padding-bottom;
			padding-left: $card-body-padding-left;
			padding-right: $card-body-padding-right;
			padding-top: $card-body-padding-top;
		}

		.card-row {
			align-items: $card-row-align-items;
		}

		.card-type-asset-icon {
			color: $asset-icon-color;
			width: $asset-icon-width;

			> .lexicon-icon {
				height: 100%;
				width: 100%;
			}

			> .sticker {
				@include border-radius($asset-icon-sticker-border-radius);

				display: block;
				font-size: $asset-icon-sticker-font-size;
				padding-bottom: 100%;
				width: 100%;
			}

			.sticker-overlay {
				@include border-radius($asset-icon-sticker-border-radius);
			}
		}

		.dropdown-action {
			margin-bottom: $dropdown-action-offset-bottom;
			margin-left: $dropdown-action-offset-left;
			margin-right: $dropdown-action-offset-right;
			margin-top: $dropdown-action-offset-top;
		}
	}
}

@mixin clay-card-type-asset-variant($map) {
	$enabled: setter(map-get($map, enabled), true);

	$aspect-ratio-bg: map-get($map, aspect-ratio-bg);
	$aspect-ratio-checkered-fg: map-get($map, aspect-ratio-checkered-fg);
	$aspect-ratio-checkered-bg: map-get($map, aspect-ratio-checkered-bg);

	$asset-icon-color: map-get($map, asset-icon-color);
	$asset-icon-min-width: map-get($map, asset-icon-min-width);
	$asset-icon-width: map-get($map, asset-icon-width);

	@if ($enabled) {
		.aspect-ratio {
			background-color: $aspect-ratio-bg;

			@if ($aspect-ratio-checkered-fg) {
				@include clay-bg-checkered($aspect-ratio-checkered-fg);
			}
		}

		.card-type-asset-icon {
			color: $asset-icon-color;
			min-width: $asset-icon-min-width;
			width: $asset-icon-width;
		}
	}
}

@mixin clay-card-type-directory($map) {
	$enabled: setter(map-get($map, enabled), true);

	$card-body-padding-bottom: map-get($map, card-body-padding-bottom);
	$card-body-padding-left: map-get($map, card-body-padding-left);
	$card-body-padding-right: map-get($map, card-body-padding-right);
	$card-body-padding-top: map-get($map, card-body-padding-top);

	$sticker-font-size: map-get($map, sticker-font-size);
	$sticker-line-height: map-get($map, sticker-line-height);
	$sticker-size: map-get($map, sticker-size);

	$dropdown-action-offset-bottom: map-get($map, dropdown-action-offset-bottom);
	$dropdown-action-offset-left: map-get($map, dropdown-action-offset-left);
	$dropdown-action-offset-right: setter(map-get($map, dropdown-action-offset-right), -0.5rem); // -8px
	$dropdown-action-offset-top: map-get($map, dropdown-action-offset-top);

	@if ($enabled) {
		.card-body {
			padding-bottom: $card-body-padding-bottom;
			padding-left: $card-body-padding-left;
			padding-right: $card-body-padding-right;
			padding-top: $card-body-padding-top;
		}

		.dropdown-action {
			margin-bottom: $dropdown-action-offset-bottom;
			margin-left: $dropdown-action-offset-left;
			margin-right: $dropdown-action-offset-right;
			margin-top: $dropdown-action-offset-top;
		}

		.sticker {
			font-size: $sticker-font-size;
			height: $sticker-size;
			line-height: if($sticker-line-height, $sticker-line-height, $sticker-size);
			width: $sticker-size;
		}
	}
}
@mixin clay-container-no-gutters {
	padding-left: 0;
	padding-right: 0;

	> .row {
		margin-left: 0;
		margin-right: 0;

		> .col,
		> [class*="col-"] {
			padding-right: 0;
			padding-left: 0;
		}
	}
}

@mixin clay-container($map) {
	$enabled: setter(map-get($map, enabled), true);
	$breakpoint-up: map-get($map, breakpoint-up);
	$breakpoint-down: setter(clay-breakpoint-prev($breakpoint-up), null);

	$padding-bottom: map-get($map, padding-bottom);
	$padding-left: map-get($map, padding-left);
	$padding-right: map-get($map, padding-right);
	$padding-top: map-get($map, padding-top);

	$padding-bottom-mobile: map-get($map, padding-bottom-mobile);
	$padding-left-mobile: map-get($map, padding-left-mobile);
	$padding-right-mobile: map-get($map, padding-right-mobile);
	$padding-top-mobile: map-get($map, padding-top-mobile);

	padding-bottom: $padding-bottom;
	padding-left: $padding-left;
	padding-right: $padding-right;
	padding-top: $padding-top;

	@if($breakpoint-down) {
		@include media-breakpoint-down($breakpoint-down) {
			padding-bottom: $padding-bottom-mobile;
			padding-left: $padding-left-mobile;
			padding-right: $padding-right-mobile;
			padding-top: $padding-top-mobile;
		}
	}
}

@mixin clay-custom-grid-columns($map) {
	$custom-grid-props: map-merge((
		enabled: $enable-grid-classes,
		base: (
			breakpoint: 0
		)
	), $map);

	$enabled: map-get($custom-grid-props, enabled);

	@if ($custom-grid-props and $enabled) {
		display: block;
		flex-basis: map-get(map-get($custom-grid-props, base), min-width);
		flex-grow: 1;
		max-width: map-get(map-get($custom-grid-props, base), max-width);
		min-width: map-get(map-get($custom-grid-props, base), min-width);
		padding-left: map-get(map-get($custom-grid-props, base), padding-left);
		padding-right: map-get(map-get($custom-grid-props, base), padding-right);
		position: relative;
		width: 100%;

		@each $breakpoint in map-keys($custom-grid-props) {
			$next: breakpoint-next($breakpoint, $custom-grid-props);

			@if ($next) {
				@media (min-width: map-get(map-get($custom-grid-props, $next), breakpoint)) {
					flex-basis: map-get(map-get($custom-grid-props, $next), flex-basis);
					max-width: map-get(map-get($custom-grid-props, $next), max-width);
					min-width: map-get(map-get($custom-grid-props, $next), min-width);
					padding-left: map-get(map-get($custom-grid-props, $next), padding-left);
					padding-right: map-get(map-get($custom-grid-props, $next), padding-right);
				}
			}
		}
	}
}
@mixin clay-input-group-stacked($map) {
	$breakpoint: setter(map-get($map, breakpoint), md);
	$breakpoint-down: clay-breakpoint-prev($breakpoint);

	$item-margin-bottom: map-get($map, item-margin-bottom);
	$item-margin-left: map-get($map, item-margin-left);
	$item-margin-right: map-get($map, item-margin-right);
	$item-margin-top: map-get($map, item-margin-top);

	$shrink-margin-bottom: map-get($map, shrink-margin-bottom);
	$shrink-margin-left: map-get($map, shrink-margin-left);
	$shrink-margin-right: map-get($map, shrink-margin-right);
	$shrink-margin-top: map-get($map, shrink-margin-top);

	@include media-breakpoint-down($breakpoint-down) {
		.input-group-item {
			margin-bottom: $item-margin-bottom;
			margin-left: $item-margin-left;
			margin-right: $item-margin-right;
			margin-top: $item-margin-top;
			width: 100%;
		}

		.input-group-item-shrink {
			margin-bottom: $shrink-margin-bottom;
			margin-left: $shrink-margin-left;
			margin-right: $shrink-margin-right;
			margin-top: $shrink-margin-top;
			width: auto;
		}
	}
}
@mixin clay-label-size($map) {
	$border-width: setter(map-get($map, border-width), $label-border-width);
	$font-size: map-get($map, font-size);
	$height: map-get($map, height);
	$line-height: map-get($map, line-height);
	$margin-bottom: map-get($map, margin-bottom);
	$margin-left: map-get($map, margin-left);
	$margin-right: map-get($map, margin-right);
	$margin-top: map-get($map, margin-top);
	$padding-x: map-get($map, padding-x);
	$padding-y: map-get($map, padding-y);
	$text-transform: map-get($map, text-transform);

	$lexicon-icon-height: setter(map-get($map, lexicon-icon-height), map-get($map, lexicon-icon-width));
	$lexicon-icon-margin-top: map-get($map, lexicon-icon-margin-top);
	$lexicon-icon-width: map-get($map, lexicon-icon-width);

	border-width: $border-width;
	font-size: $font-size;
	height: auto;
	line-height: $line-height;
	margin-bottom: $margin-bottom;
	margin-left: $margin-left;
	margin-right: $margin-right;
	margin-top: $margin-top;
	min-height: $height;
	padding-bottom: $padding-y;
	padding-left: $padding-x;
	padding-right: $padding-x;
	padding-top: $padding-y;
	text-transform: $text-transform;

	.inline-item {
		a,
		.btn-unstyled,
		.close {
			margin-top: $lexicon-icon-margin-top;
		}

		.lexicon-icon {
			height: $lexicon-icon-height;
			margin-top: $lexicon-icon-margin-top;
			width: $lexicon-icon-width;
		}
	}
}

@mixin clay-label-variant($map) {
	$bg: map-get($map, bg);
	$border-color: map-get($map, border-color);
	$color: map-get($map, color);
	$text-decoration: map-get($map, text-decoration);
	$hover-bg: map-get($map, hover-bg);
	$hover-border-color: map-get($map, hover-border-color);
	$hover-color: map-get($map, hover-color);
	$hover-text-decoration: map-get($map, hover-text-decoration);
	$focus-bg: map-get($map, focus-bg);
	$focus-border-color: map-get($map, focus-border-color);
	$focus-box-shadow: map-get($map, focus-box-shadow);
	$focus-color: map-get($map, focus-color);
	$focus-outline: map-get($map, focus-outline);
	$focus-text-decoration: map-get($map, focus-text-decoration);
	$disabled-bg: map-get($map, disabled-bg);
	$disabled-border-color: map-get($map, disabled-border-color);
	$disabled-color: map-get($map, disabled-color);
	$link-color: map-get($map, link-color);
	$link-text-decoration: map-get($map, link-text-decoration);
	$link-hover-color: map-get($map, link-hover-color);
	$link-hover-text-decoration: map-get($map, link-hover-text-decoration);
	$close: setter(map-get($map, close), ());

	background-color: $bg;
	border-color: $border-color;
	color: $color;
	text-decoration: $text-decoration;

	@at-root {
		a#{&},
		button#{&} {
			&:hover {
				background-color: $hover-bg;
				border-color: $hover-border-color;
				color: $hover-color;
				text-decoration: $hover-text-decoration;
			}

			&:focus {
				background-color: $focus-bg;
				border-color: $focus-border-color;
				box-shadow: $focus-box-shadow;
				color: $focus-border-color;
				outline: $focus-outline;
				text-decoration: $focus-text-decoration;
			}
		}
	}

	&:disabled,
	&.disabled {
		background-color: $disabled-bg;
		border-color: $disabled-border-color;
		color: $disabled-color;
	}

	a {
		color: $link-color;
		text-decoration: $link-text-decoration;

		&:hover,
		&:focus {
			color: $link-hover-color;
			text-decoration: $link-hover-text-decoration;
		}
	}

	.close {
		@include clay-link($close);
	}
}
// A mixin for creating link states.

@mixin clay-link($map) {
	$align-items: map-get($map, align-items);
	$bg: map-get($map, bg);
	$border-color: map-get($map, border-color);
	$border-radius: map-get($map, border-radius);
	$color: map-get($map, color);
	$display: map-get($map, display);
	$font-family: map-get($map, font-family);
	$font-size: map-get($map, font-size);
	$font-weight: map-get($map, font-weight);
	$height: map-get($map, height);
	$justify-content: map-get($map, justify-content);
	$line-height: map-get($map, line-height);
	$margin-bottom: map-get($map, margin-bottom);
	$margin-left: map-get($map, margin-left);
	$margin-right: map-get($map, margin-right);
	$margin-top: map-get($map, margin-top);
	$opacity: map-get($map, opacity);
	$padding-bottom: map-get($map, padding-bottom);
	$padding-left: map-get($map, padding-left);
	$padding-right: map-get($map, padding-right);
	$padding-top: map-get($map, padding-top);
	$text-align: map-get($map, text-align);
	$text-decoration: map-get($map, text-decoration);
	$text-transform: map-get($map, text-transform);
	$transition: map-get($map, transition);
	$vertical-align: map-get($map, vertical-align);
	$width: map-get($map, width);

	$hover-bg: map-get($map, hover-bg);
	$hover-color: map-get($map, hover-color);
	$hover-opacity: map-get($map, hover-opacity);
	$hover-text-decoration: map-get($map, hover-text-decoration);

	$focus-bg: map-get($map, focus-bg);
	$focus-box-shadow: map-get($map, focus-box-shadow);
	$focus-color: map-get($map, focus-color);
	$focus-opacity: map-get($map, focus-opacity);
	$focus-outline: map-get($map, focus-outline);
	$focus-text-decoration: map-get($map, focus-text-decoration);

	$active-bg: map-get($map, active-bg);
	$active-border-color: map-get($map, active-border-color);
	$active-color: map-get($map, active-color);

	$disabled-bg: map-get($map, disabled-bg);
	$disabled-border-color: map-get($map, disabled-border-color);
	$disabled-color: map-get($map, disabled-color);
	$disabled-cursor: map-get($map, disabled-cursor);
	$disabled-opacity: map-get($map, disabled-opacity);
	$disabled-pointer-events: map-get($map, disabled-pointer-events);
	$disabled-text-decoration: map-get($map, disabled-text-decoration);

	$btn-focus-box-shadow: map-get($map, btn-focus-box-shadow);
	$btn-focus-outline: map-get($map, btn-focus-outline);

	$lexicon-icon-margin-bottom: map-get($map, lexicon-icon-margin-bottom);
	$lexicon-icon-margin-left: map-get($map, lexicon-icon-margin-left);
	$lexicon-icon-margin-right: map-get($map, lexicon-icon-margin-right);
	$lexicon-icon-margin-top: map-get($map, lexicon-icon-margin-top);

	align-items: $align-items;
	background-color: $bg;
	border-color: $border-color;

	@include border-radius($border-radius);

	color: $color;
	display: $display;
	font-family: $font-family;
	font-size: $font-size;
	font-weight: $font-weight;
	height: $height;
	justify-content: $justify-content;
	line-height: $line-height;
	margin-bottom: $margin-bottom;
	margin-left: $margin-left;
	margin-right: $margin-right;
	margin-top: $margin-top;
	opacity: $opacity;
	padding-bottom: $padding-bottom;
	padding-left: $padding-left;
	padding-right: $padding-right;
	padding-top: $padding-top;
	text-align: $text-align;
	text-decoration: $text-decoration;
	text-transform: $text-transform;
	transition: $transition;
	vertical-align: $vertical-align;
	width: $width;

	&:hover {
		background-color: $hover-bg;
		color: $hover-color;
		opacity: $hover-opacity;
		text-decoration: $hover-text-decoration;
	}

	@at-root {
		button#{&} {
			&:focus {
				box-shadow: $btn-focus-box-shadow;
				outline: $btn-focus-outline;
			}
		}
	}

	&:focus {
		background-color: $focus-bg;
		box-shadow: $focus-box-shadow;
		color: $focus-color;
		opacity: $focus-opacity;
		outline: $focus-outline;
		text-decoration: $focus-text-decoration;
	}

	.show > &,
	&:active,
	&.active {
		background-color: $active-bg;
		border-color: $active-border-color;
		color: $active-color;
	}

	&:disabled,
	&.disabled {
		background-color: $disabled-bg;
		border-color: $disabled-border-color;
		color: $disabled-color;
		cursor: $disabled-cursor;
		opacity: $disabled-opacity;
		pointer-events: $disabled-pointer-events;
		text-decoration: $disabled-text-decoration;
	}

	.lexicon-icon {
		margin-bottom: $lexicon-icon-margin-bottom;
		margin-right: $lexicon-icon-margin-right;
		margin-left: $lexicon-icon-margin-left;
		margin-top: $lexicon-icon-margin-top;
	}
}

// A mixin for styling text typography.

@mixin clay-text-typography($map) {
	$color: map-get($map, color);
	$display: map-get($map, display);
	$font-family: map-get($map, font-family);
	$font-size: map-get($map, font-size);
	$font-weight: map-get($map, font-weight);
	$letter-spacing: map-get($map, letter-spacing);
	$line-height: map-get($map, line-height);
	$margin-bottom: map-get($map, margin-bottom);
	$margin-left: map-get($map, margin-left);
	$margin-right: map-get($map, margin-right);
	$margin-top: map-get($map, margin-top);
	$max-width: map-get($map, max-width);
	$padding-bottom: map-get($map, padding-bottom);
	$padding-left: map-get($map, padding-left);
	$padding-right: map-get($map, padding-right);
	$padding-top: map-get($map, padding-top);
	$text-transform: map-get($map, text-transform);
	$word-wrap: map-get($map, word-wrap);

	$clay-link: setter(map-get($map, clay-link), ());

	color: $color;
	display: $display;
	font-family: $font-family;
	font-size: $font-size;
	font-weight: $font-weight;
	letter-spacing: $letter-spacing;
	line-height: $line-height;
	margin-bottom: $margin-bottom;
	margin-left: $margin-left;
	margin-right: $margin-right;
	margin-top: $margin-top;
	max-width: $max-width;
	padding-bottom: $padding-bottom;
	padding-left: $padding-left;
	padding-right: $padding-right;
	padding-top: $padding-top;
	text-transform: $text-transform;
	word-wrap: $word-wrap;

	a {
		@include clay-link($clay-link);
	}
}
@mixin clay-list-group-notification-item-variant($map) {
	$bg: setter(map-get($map, bg), $list-group-bg);
	$border-bottom-color: setter(map-get($map, border-bottom-color), $list-group-notification-item-border-bottom-color);
	$border-left-color: setter(map-get($map, border-left-color), $list-group-notification-item-border-left-color);
	$border-right-color: setter(map-get($map, border-right-color), $list-group-notification-item-border-right-color);
	$border-top-color: setter(map-get($map, border-top-color), $list-group-notification-item-border-top-color);

	$border-bottom-width: setter(map-get($map, border-bottom-width), $list-group-notification-item-border-bottom-width);
	$border-left-width: setter(map-get($map, border-left-width), $list-group-notification-item-border-left-width);
	$border-right-width: setter(map-get($map, border-right-width), $list-group-notification-item-border-right-width);
	$border-top-width: setter(map-get($map, border-top-width), $list-group-notification-item-border-top-width);

	$border-bottom-left-radius: map-get($map, border-bottom-left-radius);
	$border-bottom-right-radius: map-get($map, border-bottom-right-radius);
	$border-top-left-radius: map-get($map, border-top-left-radius);
	$border-top-right-radius: map-get($map, border-top-right-radius);

	$color: map-get($map, color);

	$active-bg: setter(map-get($map, active-bg), $list-group-active-bg);
	$active-border-bottom-color: setter(map-get($map, active-border-bottom-color), $list-group-notification-item-active-border-bottom-color);
	$active-border-left-color: setter(map-get($map, active-border-left-color), $list-group-notification-item-active-border-left-color);
	$active-border-right-color: setter(map-get($map, active-border-right-color), $list-group-notification-item-active-border-right-color);
	$active-border-top-color: setter(map-get($map, active-border-top-color), $list-group-notification-item-active-border-top-color);

	// Box shadows are used for borders, determined by border variables above

	$box-shadow-bottom: inset 0 -#{$border-bottom-width} #{$border-bottom-color};
	$box-shadow-left: inset #{$border-left-width} 0 #{$border-left-color};
	$box-shadow-right: inset -#{$border-right-width} 0 #{$border-right-color};
	$box-shadow-top: inset 0 #{$border-top-width} #{$border-top-color};

	$active-box-shadow-bottom: inset 0 -#{$border-bottom-width} #{$active-border-bottom-color};
	$active-box-shadow-left: inset #{$border-left-width} 0 #{$active-border-left-color};
	$active-box-shadow-right: inset -#{$border-right-width} 0 #{$active-border-right-color};
	$active-box-shadow-top: inset 0 #{$border-top-width} #{$active-border-top-color};

	background-color: $bg;

	@if ($enable-rounded) {
		border-bottom-left-radius: $border-bottom-left-radius;
		border-bottom-right-radius: $border-bottom-right-radius;
		border-top-left-radius: $border-top-left-radius;
		border-top-right-radius: $border-top-right-radius;
	}

	box-shadow: $box-shadow-left, $box-shadow-right, $box-shadow-top, $box-shadow-bottom;
	color: $color;

	&.active {
		background-color: $active-bg;
		box-shadow: $active-box-shadow-left, $active-box-shadow-right, $active-box-shadow-top, $active-box-shadow-bottom;
	}
}
@mixin clay-loading-animation-variant($map) {
	$enabled: setter(map-get($map, enabled), true);
	$mixin-name: 'clay-loading-animation-variant';

	$border-radius: setter(map-get($map, border-radius), 50%);
	$color: setter(map-get($map, color), $secondary);
	$transform: setter(map-get($map, transform), scale(0.33334));

	$animation: setter(map-get($map, animation), 1.2s ease-out infinite);
	$animation-name: required(
		map-get($map, animation-name),
		'The property `animation-name` in `#{$mixin-name}` is required! #{$map}'
	);

	$ball-0-scale: setter(map-get($map, ball-0-scale), 0em);
	$ball-1-scale: setter(map-get($map, ball-1-scale), -0.10em);
	$ball-2-scale: setter(map-get($map, ball-2-scale), -0.15em);
	$ball-3-scale: setter(map-get($map, ball-3-scale), -0.20em);
	$ball-4-scale: setter(map-get($map, ball-4-scale), -0.25em);
	$ball-5-scale: setter(map-get($map, ball-5-scale), -0.35em);

	$ball-0-alpha: setter(map-get($map, ball-0-alpha), 1);
	$ball-1-alpha: setter(map-get($map, ball-1-alpha), 0.80);
	$ball-2-alpha: setter(map-get($map, ball-2-alpha), 0.60);
	$ball-3-alpha: setter(map-get($map, ball-3-alpha), 0.40);
	$ball-4-alpha: setter(map-get($map, ball-4-alpha), 0.20);
	$ball-5-alpha: setter(map-get($map, ball-5-alpha), 0.10);

	$ball-0-color: setter(map-get($map, ball-0-color), rgba($color, $ball-0-alpha));
	$ball-1-color: setter(map-get($map, ball-1-color), rgba($color, $ball-1-alpha));
	$ball-2-color: setter(map-get($map, ball-2-color), rgba($color, $ball-2-alpha));
	$ball-3-color: setter(map-get($map, ball-3-color), rgba($color, $ball-3-alpha));
	$ball-4-color: setter(map-get($map, ball-4-color), rgba($color, $ball-4-alpha));
	$ball-5-color: setter(map-get($map, ball-5-color), rgba($color, $ball-5-alpha));

	@if ($enabled) {
		&:after {
			animation: $animation;
			animation-name: $animation-name;
			border-radius: $border-radius;
			content: '';

			// Box shadow needs this specific order for proper animation

			box-shadow: 0 -1em 0 $ball-0-scale $ball-0-color,
				1em -0.5em 0 $ball-5-scale $ball-5-color,
				1em 0.5em 0 $ball-4-scale $ball-4-color,
				0 1em 0 $ball-3-scale $ball-3-color,
				-1em 0.5em 0 $ball-2-scale $ball-2-color,
				-1em -0.5em 0 $ball-1-scale $ball-1-color;
			display: block;
			height: 1em;
			left: 0;
			position: absolute;
			top: 0;
			transform: $transform;
			width: 1em;
		}

		@keyframes #{$animation-name} {

			// Box shadows need this specific order for proper animation

			0%,
			100% {
				box-shadow: 0 -1em 0 $ball-0-scale $ball-0-color,
				1em -0.5em 0 $ball-5-scale $ball-5-color,
				1em 0.5em 0 $ball-4-scale $ball-4-color,
				0 1em 0 $ball-3-scale $ball-3-color,
				-1em 0.5em 0 $ball-2-scale $ball-2-color,
				-1em -0.5em 0 $ball-1-scale $ball-1-color;
			}
			16.6% {
				box-shadow: 0 -1em 0 $ball-1-scale $ball-1-color,
				1em -0.5em 0 $ball-0-scale $ball-0-color,
				1em 0.5em 0 $ball-5-scale $ball-5-color,
				0 1em 0 $ball-4-scale $ball-4-color,
				-1em 0.5em 0 $ball-3-scale $ball-3-color,
				-1em -0.5em 0 $ball-2-scale $ball-2-color;
			}
			33.3% {
				box-shadow: 0 -1em 0 $ball-2-scale $ball-2-color,
				1em -0.5em 0 $ball-1-scale $ball-1-color,
				1em 0.5em 0 $ball-0-scale $ball-0-color,
				0 1em 0 $ball-5-scale $ball-5-color,
				-1em 0.5em 0 $ball-4-scale $ball-4-color,
				-1em -0.5em 0 $ball-3-scale $ball-3-color;
			}
			50% {
				box-shadow: 0 -1em 0 $ball-3-scale $ball-3-color,
				1em -0.5em 0 $ball-2-scale $ball-2-color,
				1em 0.5em 0 $ball-1-scale $ball-1-color,
				0 1em 0 $ball-0-scale $ball-0-color,
				-1em 0.5em 0 $ball-5-scale $ball-5-color,
				-1em -0.5em 0 $ball-4-scale $ball-4-color;
			}
			66.6% {
				box-shadow: 0 -1em 0 $ball-4-scale $ball-4-color,
				1em -0.5em 0 $ball-3-scale $ball-3-color,
				1em 0.5em 0 $ball-2-scale $ball-2-color,
				0 1em 0 $ball-1-scale $ball-1-color,
				-1em 0.5em 0 $ball-0-scale $ball-0-color,
				-1em -0.5em 0 $ball-5-scale $ball-5-color;
			}
			83% {
				box-shadow: 0 -1em 0 $ball-5-scale $ball-5-color,
				1em -0.5em 0 $ball-4-scale $ball-4-color,
				1em 0.5em 0 $ball-3-scale $ball-3-color,
				0 1em 0 $ball-2-scale $ball-2-color,
				-1em 0.5em 0 $ball-1-scale $ball-1-color,
				-1em -0.5em 0 $ball-0-scale $ball-0-color;
			}
		}
	}
}
@mixin clay-menubar-vertical-expand($map) {
	$enabled: setter(map-get($map, enabled), true);
	$breakpoint-up: setter(map-get($map, breakpoint-up), md);
	$breakpoint-down: clay-breakpoint-prev($breakpoint-up);

	// .menubar-vertical-expand-{md}

	$border-color: map-get($map, border-color);
	$border-style: map-get($map, border-style);
	$border-width: map-get($map, border-width);
	$max-width: setter(map-get($map, max-width), 15.625rem); // 250px

	$border-color-mobile: setter(map-get($map, border-color-mobile), transparent);
	$border-style-mobile: setter(map-get($map, border-style-mobile), solid);
	$border-width-mobile: setter(map-get($map, border-width-mobile), 0.0625rem); // 1px
	$margin-bottom-mobile: map-get($map, margin-bottom-mobile);
	$margin-left-mobile: map-get($map, margin-left-mobile);
	$margin-right-mobile: map-get($map, margin-right-mobile);
	$margin-top-mobile: map-get($map, margin-top-mobile);
	$max-width-mobile: setter(map-get($map, max-width-mobile), none);
	$min-height-mobile: setter(map-get($map, min-height-mobile), 3rem); // 48px
	$padding-x-mobile: setter(map-get($map, padding-x-mobile), 0.5rem);
	$padding-y-mobile: map-get($map, padding-y-mobile);

	// .menubar-collapse

	$collapse-border-color-mobile: setter(map-get($map, collapse-border-color-mobile), transparent);
	$collapse-border-style-mobile: setter(map-get($map, collapse-border-style-mobile), solid);
	$collapse-border-width-mobile: setter(map-get($map, collapse-border-width-mobile), 0.0625rem); // 1px
	$collapse-inner-spacer-y-mobile: setter(map-get($map, collapse-inner-spacer-y-mobile), 0.5rem); // 8px
	$collapse-margin-top-mobile: map-get($map, collapse-margin-top-mobile);
	$collapse-max-width-mobile: map-get($map, collapse-max-width-mobile);
	$collapse-left-mobile: setter(map-get($map, collapse-left-mobile), -0.0625rem); // -1px
	$collapse-right-mobile: setter(map-get($map, collapse-right-mobile), -0.0625rem); // -1px
	$collapse-z-index-mobile: map-get($map, collapse-z-index-mobile);

	// .menubar-toggler

	$toggler-border-color-mobile: setter(map-get($map, toggler-border-color-mobile), transparent);
	$toggler-border-style-mobile: setter(map-get($map, toggler-border-style-mobile), solid);
	$toggler-border-width-mobile: setter(map-get($map, toggler-border-width-mobile), 0.0625rem); // 1px
	$toggler-height-mobile: setter(map-get($map, toggler-height-mobile), 2rem); // 32px
	$toggler-padding-x-mobile: setter(map-get($map, toggler-padding-x-mobile), 0.5rem); // 8px
	$toggler-padding-y-mobile: map-get($map, toggler-padding-y-mobile);

	@if ($enabled) {
		border-color: $border-color;
		border-style: $border-style;
		border-width: $border-width;
		max-width: $max-width;

		@include media-breakpoint-down($breakpoint-down) {
			align-items: center;
			border-color: $border-color-mobile;
			border-style: $border-style-mobile;
			border-width: $border-width-mobile;
			display: flex;
			flex-wrap: wrap;
			justify-content: space-between;
			margin-bottom: $margin-bottom-mobile;
			margin-left: $margin-left-mobile;
			margin-right: $margin-right-mobile;
			margin-top: $margin-top-mobile;
			max-width: $max-width-mobile;
			min-height: $min-height-mobile;
			padding-bottom: $padding-y-mobile;
			padding-left: $padding-x-mobile;
			padding-right: $padding-x-mobile;
			padding-top: $padding-y-mobile;
		}

		.menubar-collapse {
			display: block;

			@include media-breakpoint-down($breakpoint-down) {
				border-color: $collapse-border-color-mobile;
				border-style: $collapse-border-style-mobile;
				border-width: $collapse-border-width-mobile;
				display: none;
				left: $collapse-left-mobile;
				margin-top: $collapse-margin-top-mobile;
				max-width: $collapse-max-width-mobile;
				position: absolute;
				right: $collapse-right-mobile;
				top: 100%;
				z-index: $collapse-z-index-mobile;

				> .nav {
					margin-bottom: $collapse-inner-spacer-y-mobile;
					margin-top: $collapse-inner-spacer-y-mobile;
				}
			}

			&.collapsing,
			&.show {
				display: block;
			}
		}

		.menubar-toggler {
			@include media-breakpoint-down($breakpoint-down) {
				align-items: center;
				border-color: $toggler-border-color-mobile;
				border-style: $toggler-border-style-mobile;
				border-width: $toggler-border-width-mobile;
				display: flex;
				height: $toggler-height-mobile;
				padding-bottom: $toggler-padding-y-mobile;
				padding-left: $toggler-padding-x-mobile;
				padding-right: $toggler-padding-x-mobile;
				padding-top: $toggler-padding-y-mobile;

				.lexicon-icon {
					margin-top: 0;
				}
			}
		}
	}
	@else {
		.menubar-collapse {
			display: block;
		}
	}
}

@mixin clay-menubar-vertical-variant($map) {
	$enable: setter(map-get($map, enable), true);
	$breakpoint-up: setter(map-get($map, breakpoint-up), md);
	$breakpoint-down: clay-breakpoint-prev($breakpoint-up);

	// .menubar-vertical-expand-{md}.menubar-{variant}

	$bg: map-get($map, bg);
	$border-color: map-get($map, border-color);
	$border-style: map-get($map, border-style);

	$bg-mobile: map-get($map, bg-mobile);
	$border-color-mobile: map-get($map, border-color-mobile);
	$border-style-mobile: map-get($map, border-style-mobile);

	// .nav-link

	$link-bg: map-get($map, link-bg);
	$link-border-radius: map-get($map, link-border-radius);
	$link-color: setter(map-get($map, link-color), $navbar-light-color);
	$link-hover-bg: map-get($map, link-hover-bg);
	$link-hover-color: setter(map-get($map, link-hover-color), $navbar-light-hover-color);
	$link-active-bg: map-get($map, link-active-bg);
	$link-active-color: setter(map-get($map, link-active-color), $navbar-light-active-color);
	$link-active-font-weight: map-get($map, link-active-font-weight);
	$link-disabled-bg: map-get($map, link-disabled-bg);
	$link-disabled-color: setter(map-get($map, link-disabled-color), $navbar-light-disabled-color);

	$link-border-radius-mobile: map-get($map, link-border-radius-mobile);
	$link-color-mobile: setter(map-get($map, link-color-mobile), $dropdown-link-color);

	$link-hover-bg-mobile: setter(map-get($map, link-hover-bg-mobile), $dropdown-link-hover-bg);
	$link-hover-color-mobile: setter(map-get($map, link-hover-color-mobile), $dropdown-link-hover-color);

	$link-active-bg-mobile: setter(map-get($map, link-active-bg-mobile), $dropdown-link-active-bg);
	$link-active-font-weight-mobile: setter(map-get($map, link-active-font-weight-mobile), $dropdown-link-active-font-weight);
	$link-active-color-mobile: setter(map-get($map, link-active-color-mobile), $dropdown-link-active-color);

	$link-disabled-bg-mobile: setter(map-get($map, link-disabled-bg-mobile), transparent);
	$link-disabled-color-mobile: setter(map-get($map, link-disabled-color-mobile), $dropdown-link-disabled-color);

	// .menubar-collapse

	$collapse-bg-mobile: setter(map-get($map, collapse-bg-mobile), $dropdown-bg);
	$collapse-border-color-mobile: setter(map-get($map, collapse-border-color-mobile), $dropdown-border-color);
	$collapse-border-radius-mobile: setter(map-get($map, collapse-border-radius-mobile), $border-radius);
	$collapse-border-style-mobile: map-get($map, collapse-border-style-mobile);
	$collapse-box-shadow-mobile: setter(map-get($map, collapse-box-shadow-mobile), $dropdown-box-shadow);

	// .menubar-toggler

	$toggler-border-color-mobile: map-get($map, toggler-border-color-mobile);
	$toggler-border-style-mobile: map-get($map, toggler-border-style-mobile);
	$toggler-color-mobile: setter(map-get($map, toggler-color-mobile), $link-active-color);
	$toggler-font-size-mobile: map-get($map, toggler-font-size-mobile);
	$toggler-font-weight-mobile: map-get($map, toggler-font-weight-mobile);

	background-color: $bg;
	border-color: $border-color;
	border-style: $border-style;

	@include media-breakpoint-down($breakpoint-down) {
		background-color: $bg-mobile;
		border-color: $border-color-mobile;
		border-style: $border-style-mobile;
	}

	.menubar-collapse {
		@include media-breakpoint-down($breakpoint-down) {
			background-color: $collapse-bg-mobile;
			border-color: $collapse-border-color-mobile;

			@include border-radius($collapse-border-radius-mobile);

			border-style: $collapse-border-style-mobile;

			@include box-shadow($collapse-box-shadow-mobile);
		}
	}

	.menubar-toggler {
		@include media-breakpoint-down($breakpoint-down) {
			border-color: $toggler-border-color-mobile;
			border-style: $toggler-border-style-mobile;
			color: $toggler-color-mobile;
			font-size: $toggler-font-size-mobile;
			font-weight: $toggler-font-weight-mobile;
		}
	}

	.nav-link {
		background-color: $link-bg;
		border-radius: $link-border-radius;
		color: $link-color;

		&:hover {
			background-color: $link-hover-bg;
			color: $link-hover-color;
		}

		@include media-breakpoint-down($breakpoint-down) {
			border-radius: $link-border-radius-mobile;
			color: $link-color-mobile;

			&:hover {
				background-color: $link-hover-bg-mobile;
				color: $link-hover-color-mobile;
			}
		}

		&.active {
			background-color: $link-active-bg;
			color: $link-active-color;
			font-weight: $link-active-font-weight;

			@include media-breakpoint-down($breakpoint-down) {
				background-color: $link-active-bg-mobile;
				color: $link-active-color-mobile;
				font-weight: $link-active-font-weight-mobile;
			}
		}

		&.disabled {
			background-color: $link-disabled-bg;
			color: $link-disabled-color;

			@include media-breakpoint-down($breakpoint-down) {
				background-color: $link-disabled-bg-mobile;
				color: $link-disabled-color-mobile;
			}
		}
	}
}
// Creates a Modal color variant
// @param $map - Sass map that contain Modal Variant properties to modify

@mixin clay-modal-variant($map) {
	$header-bg: map-get($map, header-bg);
	$header-border-color: map-get($map, header-border-color);
	$header-color: map-get($map, header-color);

	// header-close-color is deprecated in v2.0.0-rc.12 use header-close instead

	$header-close-color: setter(map-get($map, header-close-color), $header-color);

	$header-close: setter(map-get($map, header-close), ());

	$body-bg: map-get($map, body-bg);
	$body-color: map-get($map, body-color);
	$footer-bg: map-get($map, footer-bg);
	$footer-border-color: map-get($map, footer-border-color);

	// Modal specific btn-monospaced is deprecated in v2.0.0-rc.12

	.btn-monospaced {
		color: $header-close-color;
	}

	.close {
		@include clay-link($header-close);
	}

	button.close {
		&:focus {
			box-shadow: map-get($header-close, btn-focus-box-shadow);
			outline: map-get($header-close, btn-focus-outline);
		}
	}

	.modal-header {
		background-color: $header-bg;
		border-color: $header-border-color;
		color: $header-color;
	}

	.modal-body {
		background-color: $body-bg;
		color: $body-color;
	}

	.modal-footer {
		background-color: $footer-bg;
		border-color: $footer-border-color;
		color: $footer-border-color;
	}
}
@mixin clay-monospace($size) {
	height: $size;
	line-height: $size;
	width: $size;
}
@mixin clay-nav-variant($map) {
	$bg: map-get($map, bg);
	$link-bg: map-get($map, link-bg);
	$link-border-radius: map-get($map, link-border-radius);
	$link-color: map-get($map, link-color);
	$link-font-weight: map-get($map, link-font-weight);
	$link-hover-bg: map-get($map, link-hover-bg);
	$link-hover-color: map-get($map, link-hover-color);
	$link-focus-bg: map-get($map, link-focus-bg);
	$link-focus-color: map-get($map, link-focus-color);
	$link-disabled-bg: setter(map-get($map, link-disabled-bg), transparent);
	$link-disabled-color: setter(map-get($map, link-disabled-color), $nav-link-disabled-color);
	$link-disabled-opacity: map-get($map, link-disabled-opacity);
	$link-active-bg: map-get($map, link-active-bg);
	$link-active-color: map-get($map, link-active-color);
	$link-active-font-weight: map-get($map, link-active-font-weight);

	background-color: $bg;

	.nav-btn.btn-unstyled,
	.nav-link {
		background-color: $link-bg;

		@include border-radius($link-border-radius);

		color: $link-color;
		font-weight: $link-font-weight;

		&:hover {
			background-color: $link-hover-bg;
			color: $link-hover-color;
		}

		&:focus,
		&.focus {
			background-color: $link-focus-bg;
			color: $link-focus-color;
		}

		&:disabled,
		&.disabled {
			background-color: $link-disabled-bg;
			color: $link-disabled-color;
			opacity: $link-disabled-opacity;
		}

		&.active {
			background-color: $link-active-bg;
			color: $link-active-color;
			font-weight: $link-active-font-weight;
		}
	}
}
// Indents each nested navigation by $indent (15px default)
// @param $indent - amount to indent in pixels
// @param $nest-level - number of levels to iterate
// @param $nav-class - class name of nav element
// @param $i - start value

@mixin clay-nav-nested($indent: 15px, $nest-level: 15, $nav-class: ".nav", $i: 1) {
	@for $i from (1) through $nest-level {
		#{$nav-class} > li {
			> a {
				padding-left: $indent * ($i + 1);
			}

			> .nav-equal-height-heading {
				padding-left: $indent * $i;
			}
		}

		$nav-class: "#{$nav-class} .nav";
	}
}
// Sizes Navbar Desktop and Mobile based on height, font-size, and padding
// @param $map - Sass map that contain Navbar properties to modify

@mixin clay-navbar-size($map) {
	$enabled: setter(map-get($map, enabled), true);
	$scaling-navbar: setter(map-get($map, scaling-navbar), false);
	$container-padding-x: map-get($map, container-padding-x);
	$container-padding-x-mobile: setter(map-get($map, container-padding-x-mobile), $container-padding-x);

	$height: setter(map-get($map, height), 3.5rem);
	$border-bottom-width: setter(map-get($map, border-bottom-width), 0);
	$border-left-width: setter(map-get($map, border-left-width), 0);
	$border-right-width: setter(map-get($map, border-right-width), 0);
	$border-top-width: setter(map-get($map, border-top-width), 0);
	$box-shadow: map-get($map, box-shadow);
	$font-size: setter(map-get($map, font-size), $font-size-base);
	$padding-x: setter(map-get($map, padding-x), $navbar-padding-x);
	$padding-y: setter(map-get($map, padding-y), $navbar-padding-y);
	$link-height: setter(map-get($map, link-height), $height - $border-bottom-width - $border-top-width - ($padding-y * 2));
	$link-margin-x: map-get($map, link-margin-x);
	$link-margin-y: setter(map-get($map, link-margin-y), (($height - $border-bottom-width - $border-top-width) - $link-height) / 2);
	$link-padding-x: setter(map-get($map, link-padding-x), $navbar-nav-link-padding-x);
	$link-padding-y: setter(map-get($map, link-padding-y), ($link-height - ($font-size * $line-height-base)) / 2);
	$btn-font-size: setter(map-get($map, btn-font-size), $font-size);
	$btn-monospaced-font-size: map-get($map, btn-monospaced-font-size);
	$btn-monospaced-size: map-get($map, btn-monospaced-size);
	$btn-margin-x: setter(map-get($map, btn-margin-x), $link-padding-x);
	$btn-margin-y: setter(map-get($map, btn-margin-y), ($height - $border-bottom-width - $border-top-width - ($padding-y * 2) - if($btn-monospaced-size, $btn-monospaced-size, $nav-item-monospaced-size)) / 2);
	$form-control-height: map-get($map, form-control-height);
	$brand-font-size: setter(map-get($map, brand-font-size), $navbar-brand-font-size);
	$brand-max-width: map-get($map, brand-max-width);
	$brand-margin-right: setter(map-get($map, brand-margin-right), $link-padding-x);
	$brand-padding-x: setter(map-get($map, brand-padding-x), $link-padding-x);
	$brand-padding-y: setter(map-get($map, brand-padding-y), (($height - $border-bottom-width - $border-top-width - ($padding-y * 2) - ($brand-font-size * $line-height-base)) / 2));
	$title-font-size: map-get($map, title-font-size);
	$title-font-weight: map-get($map, title-font-weight);
	$title-margin-bottom: map-get($map, title-margin-bottom);
	$title-text-transform: map-get($map, title-text-transform);
	$active-border-bottom-width: setter(map-get($map, active-border-bottom-width), 0.125rem);
	$active-border-offset-x: map-get($map, active-border-offset-x);
	$nav-item-dropdown-margin-top: map-get($map, nav-item-dropdown-margin-top);

	$height-mobile: setter(map-get($map, height-mobile), $height);
	$font-size-mobile: setter(map-get($map, font-size-mobile), $font-size);
	$link-height-mobile: setter(map-get($map, link-height-mobile), $height-mobile - $border-bottom-width - $border-top-width - ($padding-y * 2));
	$link-margin-x-mobile: setter(map-get($map, link-margin-x-mobile), $link-margin-x);
	$link-margin-y-mobile: setter(map-get($map, link-margin-y-mobile), (($height-mobile - $border-bottom-width - $border-top-width) - $link-height-mobile) / 2);
	$link-padding-x-mobile: setter(map-get($map, link-padding-x-mobile), $link-padding-x);
	$link-padding-y-mobile: setter(map-get($map, link-padding-y-mobile), ($link-height-mobile - ($font-size-mobile * $line-height-base)) / 2);
	$btn-font-size-mobile: setter(map-get($map, btn-font-size-mobile), $font-size-mobile);
	$btn-monospaced-font-size-mobile: setter(map-get($map, btn-monospaced-font-size-mobile), $btn-monospaced-font-size);
	$btn-monospaced-size-mobile: setter(map-get($map, btn-monospaced-size-mobile), $btn-monospaced-size);
	$btn-margin-x-mobile: setter(map-get($map, btn-margin-x-mobile), $link-padding-x-mobile);
	$btn-margin-y-mobile: setter(map-get($map, btn-margin-y-mobile), ($height-mobile - $border-bottom-width - $border-top-width - ($padding-y * 2) - if($btn-monospaced-size-mobile, $btn-monospaced-size-mobile, $nav-item-monospaced-size)) / 2);
	$form-control-height-mobile: map-get($map, form-control-height-mobile);
	$brand-font-size-mobile: setter(map-get($map, brand-font-size-mobile), $font-size-lg-mobile);
	$brand-margin-right-mobile: setter(map-get($map, brand-margin-right-mobile), 0);
	$brand-padding-x-mobile: setter(map-get($map, brand-padding-x-mobile), $link-padding-x-mobile);
	$brand-padding-y-mobile: setter(map-get($map, brand-padding-y-mobile), (($height-mobile - $border-bottom-width - $border-top-width - ($padding-y * 2) - ($brand-font-size-mobile * $line-height-base)) / 2));
	$collapse-dropdown-item-padding-x-mobile: map-get($map, collapse-dropdown-item-padding-x-mobile);
	$collapse-dropdown-item-padding-y-mobile: map-get($map, collapse-dropdown-item-padding-y-mobile);

	$toggler-font-size: setter(map-get($map, toggler-font-size), $navbar-toggler-font-size);
	$toggler-height: setter(map-get($map, toggler-height), $height-mobile * 0.66667);
	$toggler-margin-x: setter(map-get($map, toggler-margin-x), $link-padding-x-mobile);
	$toggler-margin-y: map-get($map, toggler-margin-y);
	$toggler-padding-x: setter(map-get($map, toggler-padding-x), $navbar-toggler-padding-x);
	$toggler-padding-y: setter(map-get($map, toggler-padding-y), $navbar-toggler-padding-y);

	$toggler-link-font-size: setter(map-get($map, toggler-link-font-size), $font-size-mobile);
	$toggler-link-height: setter(map-get($map, toggler-link-height), auto);
	$toggler-link-line-height: setter(map-get($map, toggler-link-line-height), $line-height-base);
	$toggler-link-margin-x: setter(map-get($map, toggler-link-margin-x), 0);
	$toggler-link-margin-y: map-get($map, toggler-link-margin-y);
	$toggler-link-padding-x: setter(map-get($map, toggler-link-padding-x), $link-padding-x-mobile);
	$toggler-link-padding-y: ($height-mobile - $border-bottom-width - $border-top-width - ($padding-y * 2) - ($toggler-link-font-size * $toggler-link-line-height)) / 2;

	@if ($enabled) {
		@include border-radius($navbar-border-radius);

		border-width: $border-top-width $border-right-width $border-bottom-width $border-left-width;

		@include box-shadow($box-shadow);

		font-size: $font-size;
		padding: $padding-y $padding-x;

		.container,
		.container-fluid {
			padding-left: $container-padding-x-mobile;
			padding-right: $container-padding-x-mobile;
		}

		.navbar-toggler {
			font-size: $toggler-font-size;
			height: $toggler-height;
			margin-bottom: $toggler-margin-y;
			margin-left: $toggler-margin-x;
			margin-right: $toggler-margin-x;
			margin-top: $toggler-margin-y;
			padding-bottom: $toggler-padding-y;
			padding-left: $toggler-padding-x;
			padding-right: $toggler-padding-x;
			padding-top: $toggler-padding-y;
		}

		.navbar-toggler-link {
			height: $toggler-link-height;
			font-size: $toggler-link-font-size;
			line-height: $toggler-link-line-height;
			margin-bottom: $toggler-link-margin-y;
			margin-left: $toggler-link-margin-x;
			margin-right: $toggler-link-margin-x;
			margin-top: $toggler-link-margin-y;
			padding-bottom: $toggler-link-padding-y;
			padding-left: $toggler-link-padding-x;
			padding-right: $toggler-link-padding-x;
			padding-top: $toggler-link-padding-y;
		}

		.navbar-brand {
			font-size: $brand-font-size-mobile;
			margin-right: $brand-margin-right-mobile;
			max-width: $brand-max-width;
			padding-bottom: $brand-padding-y-mobile;
			padding-left: $brand-padding-x-mobile;
			padding-right: $brand-padding-x-mobile;
			padding-top: $brand-padding-y-mobile;
		}

		.navbar-title {
			font-size: $title-font-size;
			font-weight: $title-font-weight;
			margin-bottom: $title-margin-bottom;
			text-transform: $title-text-transform;
		}

		.navbar-nav {
			.nav-btn {
				font-size: $btn-font-size-mobile;
				height: $btn-monospaced-size-mobile;
				margin-bottom: $btn-margin-y-mobile;
				margin-left: $btn-margin-x-mobile;
				margin-right: $btn-margin-x-mobile;
				margin-top: $btn-margin-y-mobile;
				min-width: $btn-monospaced-size-mobile;
			}

			.nav-btn-monospaced {
				font-size: $btn-monospaced-font-size-mobile;
			}

			.nav-item {
				> .custom-control,
				> .form-check {
					margin-left: $btn-margin-x-mobile;
					margin-right: $btn-margin-x-mobile;
				}
			}

			.nav-link,
			.navbar-text {
				margin-bottom: $link-margin-y-mobile;
				margin-left: $link-margin-x-mobile;
				margin-right: $link-margin-x-mobile;
				margin-top: $link-margin-y-mobile;
				padding-bottom: $link-padding-y-mobile;
				padding-left: $link-padding-x-mobile;
				padding-right: $link-padding-x-mobile;
				padding-top: $link-padding-y-mobile;
			}

			.nav-link-monospaced {
				font-size: $btn-monospaced-font-size-mobile;
				margin-bottom: $btn-margin-y-mobile;
				margin-left: $btn-margin-x-mobile;
				margin-right: $btn-margin-x-mobile;
				margin-top: $btn-margin-y-mobile;
				padding: 0;
			}
		}

		.dropdown-menu {
			margin-top: $nav-item-dropdown-margin-top;
		}

		// Navbar Expand

		&.navbar-expand {
			@each $breakpoint in map-keys($grid-breakpoints) {
				$next: breakpoint-next($breakpoint, $grid-breakpoints);
				$infix: breakpoint-infix($next, $grid-breakpoints);

				&#{$infix} { // .navbar-expand, sm, md, lg, xl
					@if not ($infix == '') { // .navbar-expand-sm, md, lg, xl
						@include media-breakpoint-down($breakpoint) {
							&.navbar-collapse-absolute {
								.navbar-collapse {
									border-color: transparent;
									border-style: solid;
									border-width: 0 $border-right-width $border-bottom-width $border-left-width;

									@include box-shadow($box-shadow);

									left: -$border-left-width;
									margin-top: $border-bottom-width;
									padding-bottom: $padding-y;
									padding-left: $padding-x;
									padding-right: $padding-x;
									padding-top: $padding-y;
									right: -$border-right-width;
								}
							}

							.navbar-collapse {
								.navbar-nav {
									.dropdown-divider {
										margin-left: -$padding-x;
										margin-right: -$padding-x;
									}

									.dropdown-item {
										padding-bottom: $collapse-dropdown-item-padding-y-mobile;
										padding-left: $collapse-dropdown-item-padding-x-mobile;
										padding-right: $collapse-dropdown-item-padding-x-mobile;
										padding-top: $collapse-dropdown-item-padding-y-mobile;
									}
								}
							}

							.navbar-form {
								height: $height-mobile - $border-bottom-width - $border-top-width;
								padding-bottom: $link-padding-y-mobile;
								padding-left: $link-padding-x-mobile;
								padding-right: $link-padding-x-mobile;
								padding-top: $link-padding-y-mobile;

								.form-control {
									height: $form-control-height-mobile;
									padding-bottom: 0;
									padding-top: 0;
								}
							}
						}
					}

					@include media-breakpoint-up($next) {
						.container,
						.container-fluid {
							@if ($scaling-navbar) {
								padding-left: $container-padding-x;
								padding-right: $container-padding-x;
							}
						}

						.navbar-brand {
							@if ($scaling-navbar) {
								font-size: $brand-font-size;
								margin-right: $brand-margin-right;
								padding-bottom: $brand-padding-y;
								padding-left: $brand-padding-x;
								padding-right: $brand-padding-x;
								padding-top: $brand-padding-y;
							}
						}

						.navbar-form {
							@if ($scaling-navbar) {
								height: $height - $border-bottom-width - $border-top-width;
								padding-left: $link-padding-x;
								padding-right: $link-padding-x;

								> .container,
								> .container-fluid {
									padding-left: 0;
									padding-right: 0;
								}

								.form-control {
									height: $form-control-height;
								}
							}
						}

						.nav-btn {
							@if ($scaling-navbar) {
								font-size: $btn-font-size;
								height: $btn-monospaced-size;
								margin-bottom: $btn-margin-y;
								margin-left: $btn-margin-x;
								margin-right: $btn-margin-x;
								margin-top: $btn-margin-y;
								min-width: $btn-monospaced-size;
							}
						}

						.nav-btn-monospaced {
							@if ($scaling-navbar) {
								font-size: $btn-monospaced-font-size;
							}
						}

						.nav-item {
							> .custom-control,
							> .form-check {
								@if ($scaling-navbar) {
									margin-left: $btn-margin-x;
									margin-right: $btn-margin-x;
								}
							}
						}

						.nav-link,
						.navbar-text {
							@if ($scaling-navbar) {
								margin-bottom: $link-margin-y;
								margin-left: $link-margin-x;
								margin-right: $link-margin-x;
								margin-top: $link-margin-y;
								padding-bottom: $link-padding-y;
								padding-left: $link-padding-x;
								padding-right: $link-padding-x;
								padding-top: $link-padding-y;
							}
						}

						.nav-link-monospaced {
							@if ($scaling-navbar) {
								font-size: $btn-monospaced-font-size;
								margin-bottom: $btn-margin-y;
								margin-left: $btn-margin-x;
								margin-right: $btn-margin-x;
								margin-top: $btn-margin-y;
								padding: 0;
							}
						}
					}
				}
			}
		}

		// Navbar Overlay Styles for `.navbar-overlay-xs-down`,
		// `.navbar-overlay-sm-down`, `.navbar-overlay-md-down`,
		// `.navbar-overlay-lg-down`, `.navbar-overlay-up`

		@each $breakpoint in map-keys($grid-breakpoints) {
			$index: index(map-keys($grid-breakpoints), $breakpoint);
			$length: length(map-keys($grid-breakpoints));
			$infix: '.navbar-overlay-#{$breakpoint}-down';

			@if ($index == $length) {
				$infix: '.navbar-overlay-up';
			}

			#{$infix} {
				@include media-breakpoint-down($breakpoint) {
					@include border-radius($navbar-border-radius);

					padding-bottom: $padding-y;
					padding-left: $padding-x;
					padding-right: $padding-x;
					padding-top: $padding-y;
				}
			}
		}

		// Navbar Underline

		&.navbar-underline {
			.navbar-toggler-link {
				&:after {
					bottom: -$border-bottom-width - $padding-y - $link-margin-y-mobile;
					height: $active-border-bottom-width;
					left: $active-border-offset-x;
					right: $active-border-offset-x;
				}
			}
		}

		&.navbar-underline.navbar-expand {
			@each $breakpoint in map-keys($grid-breakpoints) {
				$next: breakpoint-next($breakpoint, $grid-breakpoints);
				$infix: breakpoint-infix($next, $grid-breakpoints);

				&#{$infix} { // .navbar-expand, sm, md, lg, xl
					@include media-breakpoint-up($next) {
						.navbar-nav .nav-link {
							&.active:after {
								bottom: -$border-bottom-width - $padding-y - $link-margin-y;
								height: $active-border-bottom-width;
								left: $active-border-offset-x;
								right: $active-border-offset-x;
							}
						}
					}
				}
			}
		}
	}
}

// Creates a Navbar color variant
// @param $map - Sass map that contain Navbar Variant properties to modify

@mixin clay-navbar-variant($map) {
	$enabled: setter(map-get($map, enabled), true);
	$bg: map-get($map, bg);
	$border-color: setter(map-get($map, border-color), transparent);
	$border-style: setter(map-get($map, border-style), solid);
	$color: map-get($map, color);
	$link-border-radius: map-get($map, link-border-radius);
	$link-bg: map-get($map, link-bg);
	$link-color: map-get($map, link-color);
	$link-font-weight: map-get($map, link-font-weight);
	$link-hover-bg: map-get($map, link-hover-bg);
	$link-hover-color: map-get($map, link-hover-color);
	$link-active-bg: map-get($map, link-active-bg);
	$link-active-color: map-get($map, link-active-color);
	$link-disabled-bg: map-get($map, link-disabled-bg);
	$link-disabled-color: map-get($map, link-disabled-color);
	$link-disabled-opacity: map-get($map, link-disabled-opacity);
	$btn-font-weight: setter(map-get($map, btn-font-weight), $link-font-weight);
	$brand-color: map-get($map, brand-color);
	$brand-hover-color: map-get($map, brand-hover-color);
	$brand-bg: map-get($map, brand-bg);
	$brand-hover-bg: map-get($map, brand-hover-bg);
	$toggler-color: setter(map-get($map, toggler-color), $link-color);
	$toggler-font-weight: setter(map-get($map, toggler-font-weight), $link-font-weight);
	$underline-active-bg: map-get($map, underline-active-bg);

	@if ($enabled) {
		background-color: $bg;
		border-color: $border-color;
		border-style: $border-style;
		color: $color;

		.nav-link,
		.navbar-nav .btn-unstyled {
			background-color: $link-bg;

			@include border-radius($link-border-radius);

			color: $link-color;
			font-weight: $link-font-weight;

			&:hover {
				background-color: $link-hover-bg;
				color: $link-hover-color;
			}

			&.active,
			&[aria-expanded="true"] {
				background-color: $link-active-bg;
				color: $link-active-color;
			}

			&.disabled,
			&:disabled {
				background-color: $link-disabled-bg;
				color: $link-disabled-color;
				opacity: $link-disabled-opacity;
			}
		}

		.nav-btn {
			font-weight: $btn-font-weight;
		}

		.navbar-brand {
			background-color: $brand-bg;
			color: $brand-color;

			&:hover {
				background-color: $brand-bg;
				color: $brand-hover-color;
			}
		}

		.navbar-toggler {
			color: $toggler-color;
			font-weight: $toggler-font-weight;
		}

		.navbar-toggler-link {
			&[aria-expanded="true"] {
				color: $link-active-color;
			}
		}

		.navbar-overlay {
			background-color: $bg;
		}

		&.navbar-expand {
			@each $breakpoint in map-keys($grid-breakpoints) {
				$next: breakpoint-next($breakpoint, $grid-breakpoints);
				$infix: breakpoint-infix($next, $grid-breakpoints);

				&#{$infix} { // .navbar-expand, sm, md, lg, xl
					@if not ($infix == '') { // .navbar-expand-sm, md, lg, xl
						@include media-breakpoint-down($breakpoint) {
							&.navbar-collapse-absolute .navbar-collapse {
								background-color: $bg;
								border-color: $border-color;
							}

							.navbar-collapse .navbar-nav {
								.dropdown-header,
								.dropdown-item {
									color: $link-color;
									font-weight: $link-font-weight;
								}

								.dropdown-divider {
									border-color: $link-color;
								}

								.dropdown-item {
									&:hover {
										color: $link-hover-color;
									}

									&.active {
										color: $link-active-color;
									}

									&.disabled {
										color: $link-disabled-color;
									}
								}
							}
						}
					}

					@include media-breakpoint-up($next) {
						&.navbar-underline .navbar-nav .nav-link.active:after {
							background-color: $underline-active-bg;
						}
					}
				}
			}
		}

		@content;
	}
}
// Creates a Panel color variant
// @param $map - Sass map that contain Panel Variant properties to modify

@mixin clay-panel-variant($map) {
	$border-color: map-get($map, border-color);
	$box-shadow: map-get($map, box-shadow);
	$color: map-get($map, color);
	$header-bg: map-get($map, header-bg);
	$header-border-color: map-get($map, header-border-color);
	$header-color: map-get($map, header-color);
	$footer-bg: map-get($map, footer-bg);
	$footer-border-color: map-get($map, footer-border-color);
	$footer-color: map-get($map, footer-color);

	border-color: $border-color;
	box-shadow: $box-shadow;
	color: $color;

	.panel-header {
		background-color: $header-bg;
		border-color: $header-border-color;
		color: $header-color;

		.panel-group & {
			+ .panel-collapse > .panel-body {
				border-color: $border-color;
			}
		}
	}

	.panel-footer {
		background-color: $footer-bg;
		border-color: $footer-border-color;
		color: $footer-color;
	}

	@content;
}
// Absolutely positions an item relative to its container (9 places)
// @param $point - 'top-left', 'top-center', 'top-right', 'right-middle',
// 'bottom-right', 'bottom-center', 'bottom-left', 'left-middle',
// 'center-middle'
// @param $position - 'absolute', 'fixed'
// @param $rule-flag - specify a CSS flag for your rule e.g. !important

@mixin clay-position($point: top-left, $position: absolute, $rule-flag: '') {
	@if not ($rule-flag == '') {
		$rule-flag: ' #{$rule-flag}';
	}

	position: #{$position}#{$rule-flag};

	@if ($point == top-center) {
		bottom: auto#{$rule-flag};
		left: 50%#{$rule-flag};
		right: auto#{$rule-flag};
		top: 0#{$rule-flag};
		transform: translateX(-50%)#{$rule-flag};
	}
	@else if ($point == top-right) {
		bottom: auto#{$rule-flag};
		left: auto#{$rule-flag};
		right: 0#{$rule-flag};
		top: 0#{$rule-flag};
	}
	@else if ($point == right-middle) {
		bottom: auto#{$rule-flag};
		left: auto#{$rule-flag};
		right: 0#{$rule-flag};
		top: 50%#{$rule-flag};
		transform: translateY(-50%)#{$rule-flag};
	}
	@else if ($point == bottom-right) {
		bottom: 0#{$rule-flag};
		left: auto#{$rule-flag};
		right: 0#{$rule-flag};
		top: auto#{$rule-flag};
	}
	@else if ($point == bottom-center) {
		bottom: 0#{$rule-flag};
		left: 50%#{$rule-flag};
		right: auto#{$rule-flag};
		transform: translateX(-50%)#{$rule-flag};
	}
	@else if ($point == bottom-left) {
		bottom: 0#{$rule-flag};
		left: 0#{$rule-flag};
		right: auto#{$rule-flag};
		top: auto#{$rule-flag};
	}
	@else if ($point == left-middle) {
		bottom: auto#{$rule-flag};
		left: 0#{$rule-flag};
		right: auto#{$rule-flag};
		top: 50%#{$rule-flag};
		transform: translateY(-50%)#{$rule-flag};
	}
	@else if ($point == center-middle) {
		bottom: auto#{$rule-flag};
		left: 50%#{$rule-flag};
		right: auto#{$rule-flag};
		top: 50%#{$rule-flag};
		transform: translate(-50%, -50%)#{$rule-flag};
	}
	@else {
		bottom: auto#{$rule-flag};
		left: 0#{$rule-flag};
		right: auto#{$rule-flag};
		top: 0#{$rule-flag};
	}
}
@mixin clay-scale-component($scale: $enable-scaling-components) {
	@if ($scale) {
		@include media-breakpoint-down($scaling-breakpoint-down) {
			@content
		}
	}
}
@mixin sheet-footer-btn-block($map) {
	$enabled: setter(map-get($map, enabled), true);

	$breakpoint-down: map-get($map, breakpoint-down);

	$btn-margin-bottom-mobile: map-get($map, btn-margin-bottom-mobile);

	@if ($enabled) {
		@include media-breakpoint-down($breakpoint-down) {
			display: block;

			.btn {
				display: block;
				margin-bottom: $btn-margin-bottom-mobile;
				width: 100%;
			}

			.btn-group {
				display: block;
			}

			.btn-group-item {
				display: block;
				margin-right: 0;
			}
		}
	}
}
@mixin clay-sidebar-variant($map) {
	$bg: map-get($map, bg);
	$border-color: map-get($map, border-color);
	$border-bottom-width: setter(map-get($map, border-bottom-width), 0);
	$border-left-width: setter(map-get($map, border-left-width), 0);
	$border-right-width: setter(map-get($map, border-right-width), 0);
	$border-top-width: setter(map-get($map, border-top-width), 0);
	$box-shadow: map-get($map, box-shadow);
	$color: map-get($map, color);
	$panel-bg: map-get($map, panel-bg);

	$component-header-title: setter(map-get($map, component-header-title), ());
	$component-header-subtitle: setter(map-get($map, component-header-subtitle), ());
	$component-link: setter(map-get($map, component-link), ());

	$dt: setter(map-get($map, dt), ());
	$dd: setter(map-get($map, dd), ());

	$sidebar-list-group-item-bg: map-get($map, sidebar-list-group-item-bg);
	$sidebar-list-group-item-border-color: map-get($map, sidebar-list-group-item-border-color);
	$sidebar-list-group-title: setter(map-get($map, sidebar-list-group-title), ());
	$sidebar-list-group-subtitle: setter(map-get($map, sidebar-list-group-subtitle), ());
	$sidebar-list-group-text: setter(map-get($map, sidebar-list-group-text), ());
	$sidebar-list-group-subtext: setter(map-get($map, sidebar-list-group-subtext), ());

	background-color: $bg;
	border-color: $border-color;
	border-style: solid;
	border-width: $border-top-width $border-right-width $border-bottom-width $border-left-width;

	@include box-shadow($box-shadow);

	color: $color;

	.component-link {
		@include clay-text-typography($component-link);
	}

	.sidebar-header {
		.component-title {
			@include clay-text-typography($component-header-title);
		}

		.component-subtitle {
			@include clay-text-typography($component-header-subtitle);
		}
	}

	.sidebar-list-group {
		.list-group-item {
			background-color: $sidebar-list-group-item-bg;
			border-color: $sidebar-list-group-item-border-color;
		}

		.list-group-title {
			@include clay-text-typography($sidebar-list-group-title);
		}

		.list-group-subtitle {
			@include clay-text-typography($sidebar-list-group-subtitle);
		}

		.list-group-text {
			@include clay-text-typography($sidebar-list-group-text);
		}

		.list-group-subtext {
			@include clay-text-typography($sidebar-list-group-subtext);
		}
	}

	.sidebar-panel {
		background-color: $panel-bg;
	}

	.sidebar-dt {
		@include clay-text-typography($dt);
	}

	.sidebar-dd {
		@include clay-text-typography($dd);
	}
}
@mixin clay-sticker-size($map) {
	$font-size: map-get($map, font-size);
	$inline-item-font-size: map-get($map, inline-item-font-size);
	$outside-offset: setter(map-get($map, outside-offset), -(map-get($map, size) / 2));
	$size: map-get($map, size);

	font-size: $font-size;

	@include clay-monospace($size);

	> .inline-item {
		font-size: $inline-item-font-size;
	}

	&.sticker-outside {
		left: $outside-offset;
		top: $outside-offset;

		&.sticker-bottom-left {
			bottom: $outside-offset;
			top: auto;
		}

		&.sticker-bottom-right {
			bottom: $outside-offset;
			left: auto;
			right: $outside-offset;
			top: auto;
		}

		&.sticker-top-right {
			left: auto;
			right: $outside-offset;
		}
	}
}
@mixin clay-tbar-variant($map) {
	$border-color: map-get($map, border-color);
	$border-style: map-get($map, border-style);
	$border-width: map-get($map, border-width);
	$bg-color: map-get($map, bg-color);
	$color: map-get($map, color);
	$font-size: map-get($map, font-size);
	$height: map-get($map, height);
	$padding-x: map-get($map, padding-x);
	$padding-y: map-get($map, padding-y);

	$strong-font-weight: map-get($map, strong-font-weight);

	$item-justify-content: map-get($map, item-justify-content);
	$item-padding-x: map-get($map, item-padding-x);
	$item-padding-y: map-get($map, item-padding-y);

	$btn-height: map-get($map, btn-height);
	$btn-font-size: setter(map-get($map, btn-font-size), $font-size);
	$btn-font-weight: map-get($map, btn-font-weight);
	$btn-line-height: map-get($map, btn-line-height);
	$btn-margin-x: map-get($map, btn-margin-x);
	$btn-margin-y: map-get($map, btn-margin-y);
	$btn-padding-x: map-get($map, btn-padding-x);
	$btn-padding-y: map-get($map, btn-padding-y);

	$btn-monospaced-border-radius: map-get($map, btn-monospaced-border-radius);
	$btn-monospaced-border-width: map-get($map, btn-monospaced-border-width);
	$btn-monospaced-font-size: map-get($map, btn-monospaced-font-size);
	$btn-monospaced-margin-x: map-get($map, btn-monospaced-margin-x);
	$btn-monospaced-margin-y: map-get($map, btn-monospaced-margin-y);
	$btn-monospaced-padding: map-get($map, btn-monospaced-padding);
	$btn-monospaced-size: setter(map-get($map, btn-monospaced-size), $btn-height);

	$link-margin-x: map-get($map, link-margin-x);
	$link-margin-y: map-get($map, link-margin-y);
	$link-padding-x: map-get($map, link-padding-x);
	$link-padding-y: map-get($map, link-padding-y);

	$link-monospaced-border-radius: map-get($map, link-monospaced-border-radius);
	$link-monospaced-border-width: map-get($map, link-monospaced-border-width);
	$link-monospaced-font-size: map-get($map, link-monospaced-font-size);
	$link-monospaced-margin-x: map-get($map, link-monospaced-margin-x);
	$link-monospaced-margin-y: map-get($map, link-monospaced-margin-y);
	$link-monospaced-padding: map-get($map, link-monospaced-padding);
	$link-monospaced-size: map-get($map, link-monospaced-size);

	$section-text-align: map-get($map, section-text-align);

	$component-action: setter(map-get($map, component-action), ());

	$component-link: setter(map-get($map, component-link), ());

	$component-title: setter(map-get($map, component-title), ());

	$component-text: setter(map-get($map, component-text), ());

	$component-label: setter(map-get($map, component-label), ());

	$tbar-label-size: setter(map-get($map, tbar-label-size), ());

	background-color: $bg-color;
	border-color: $border-color;
	border-style: $border-style;
	border-width: $border-width;
	color: $color;
	font-size: $font-size;
	height: $height;
	padding-bottom: $padding-y;
	padding-left: $padding-x;
	padding-right: $padding-x;
	padding-top: $padding-y;

	strong {
		font-weight: $strong-font-weight;
	}

	.component-action {
		@include clay-link($component-action);
	}

	.component-link {
		@include clay-link($component-link);
	}

	.tbar-item {
		justify-content: $item-justify-content;
		padding-bottom: $item-padding-y;
		padding-left: $item-padding-x;
		padding-right: $item-padding-x;
		padding-top: $item-padding-y;
	}

	.tbar-btn {
		font-size: $btn-font-size;
		font-weight: $btn-font-weight;
		height: $btn-height;
		line-height: $btn-line-height;
		margin-bottom: $btn-margin-y;
		margin-left: $btn-margin-x;
		margin-right: $btn-margin-x;
		margin-top: $btn-margin-y;
		padding-bottom: $btn-padding-y;
		padding-left: $btn-padding-x;
		padding-right: $btn-padding-x;
		padding-top: $btn-padding-y;
	}

	.tbar-link {
		margin-bottom: $link-margin-y;
		margin-left: $link-margin-x;
		margin-right: $link-margin-x;
		margin-top: $link-margin-y;
		padding-bottom: $link-padding-y;
		padding-left: $link-padding-x;
		padding-right: $link-padding-x;
		padding-top: $link-padding-y;
	}

	.tbar-btn-monospaced {
		border-radius: $btn-monospaced-border-radius;
		border-width: $btn-monospaced-border-width;
		font-size: $btn-monospaced-font-size;
		height: $btn-monospaced-size;
		margin-bottom: $btn-monospaced-margin-y;
		margin-left: $btn-monospaced-margin-x;
		margin-right: $btn-monospaced-margin-x;
		margin-top: $btn-monospaced-margin-y;
		padding: $btn-monospaced-padding;
		width: $btn-monospaced-size;

		.inline-item {
			font-size: $btn-monospaced-font-size;
		}
	}

	.tbar-link-monospaced {
		border-radius: $link-monospaced-border-radius;
		border-width: $link-monospaced-border-width;
		font-size: $link-monospaced-font-size;
		height: $link-monospaced-size;
		margin-bottom: $link-monospaced-margin-y;
		margin-left: $link-monospaced-margin-x;
		margin-right: $link-monospaced-margin-x;
		margin-top: $link-monospaced-margin-y;
		padding: $link-monospaced-padding;
		width: $link-monospaced-size;

		.inline-item {
			font-size: $link-monospaced-font-size;
		}
	}

	.tbar-section {
		text-align: $section-text-align;
	}

	.component-title {
		@include clay-text-typography($component-title);
	}

	.component-text {
		@include clay-text-typography($component-text);
	}

	.component-label {
		@include clay-label-variant($component-label);
	}

	.tbar-label {
		@include clay-label-size($tbar-label-size);
	}
}

@mixin clay-tbar-inline-down($map) {
	$breakpoint-down: map-get($map, breakpoint-down);
	$item-padding-left: map-get($map, item-padding-left);
	$item-padding-right: map-get($map, item-padding-right);

	@if ($breakpoint-down) {
		@include media-breakpoint-down($breakpoint-down) {
			display: block;

			.container,
			.container-fluid {
				display: block;
			}

			.component-title,
			.tbar-nav,
			.tbar-section {
				display: inline;
			}

			.tbar-item {
				display: inline;
				padding-left: $item-padding-left;
				padding-right: $item-padding-right;
			}
		}
	}
}
@mixin clay-timeline-item-reverse() {
	padding-left: 0;
	padding-right: $timeline-inner-spacing;

	&:before {
		left: auto;
		right: -$timeline-border-width;
	}

	.panel {
		.timeline-increment {
			margin-left: auto;
			margin-right: -$card-border-width;
		}
	}

	.timeline-increment {
		left: auto;
		right: -($timeline-inner-spacing + $timeline-border-modifier);
		-ms-transform: translate(50%, -50%);
		transform: translate(50%, -50%);
	}
}

@mixin clay-timeline-spacing($outer-spacing, $inner-spacing, $item-padding-y: 10px) {
	&.timeline {
		padding-left: $outer-spacing;
	}

	&.timeline-center {
		@include media-breakpoint-up(md) {
			padding-left: 0;

			.timeline-item {
				.timeline-item-label {
					margin-left: -($inner-spacing * 2);
				}
			}

			.timeline-item.timeline-item-reverse {
				padding-right: $inner-spacing;

				.timeline-increment {
					right: -($inner-spacing + $timeline-border-modifier);
				}

				.timeline-item-label {
					margin-left: auto;
					margin-right: -($inner-spacing * 2);
				}
			}
		}
	}

	&.timeline-even .timeline-item:nth-of-type(even),
	&.timeline-odd .timeline-item:nth-of-type(odd) {
		@include media-breakpoint-up(md) {
			padding-right: $inner-spacing;

			.timeline-increment {
				right: -($inner-spacing + $timeline-border-modifier);
			}

			.timeline-item-label {
				margin-left: auto;
				margin-right: -($inner-spacing * 2);
			}
		}
	}

	&.timeline-right {
		padding-right: $outer-spacing;

		.timeline-item {
			padding-right: $inner-spacing;

			.timeline-increment {
				right: -($inner-spacing + $timeline-border-modifier);
			}
		}
	}

	&.timeline-right-xs-only {
		@include media-breakpoint-down(xs) {
			padding-left: 0;
			padding-right: $outer-spacing;

			.timeline-item {
				padding-left: 0;
				padding-right: $inner-spacing;

				.timeline-increment {
					left: auto;
					right: -($inner-spacing + $timeline-border-modifier);
				}
			}
		}
	}

	.timeline-item {
		padding-bottom: $item-padding-y;
		padding-left: $inner-spacing;
		padding-top: $item-padding-y;

		.timeline-increment {
			left: -($inner-spacing - $timeline-border-modifier);
		}
	}
}
// Calculates text-indent of data-label-on and data-label-off
// @param $toggle-switch-width - Width of switch bar
// @param $toggle-switch-padding - Space between button and bar
// @param $label-spacer-x - Space between toggle-switch-bar and data-label

@function clay-data-label-text-position($toggle-switch-width, $toggle-switch-padding, $label-spacer-x: 8px) {
	@if ($toggle-switch-padding < 0) {
		$toggle-switch-width: $toggle-switch-width + abs($toggle-switch-padding);
	}

	@return $toggle-switch-width + $label-spacer-x;
}
// Highlight inline text
// @param $bg-color - Color of the highlight
// @param $color - Colors the text

@mixin clay-highlight-text($bg-color: theme-color-level(warning, -10), $color: $body-color) {
	background-color: $bg-color;
	box-decoration-break: clone;
	box-shadow: -0.25em 0 0 $bg-color;
	color: $color;
	display: inline;
	line-height: normal;
	padding: 2px 0.25em 3px 0;
	position: relative;
	white-space: pre-wrap;

	&:before {
		background-color: $bg-color;
		bottom: 0;
		content: '';
		display: block;
		position: absolute;
		right: 100%;
		top: 0;
		width: 0.25em;
		z-index: -1;
	}
}
@mixin clay-autofit-float {
	flex-wrap: wrap;

	> .autofit-col {
		max-width: 100%;
	}

	// `.autofit-col end` is deprecated in v2.0.0 use `.autofit-float-end`
	// pattern instead

	> .autofit-col-end {
		margin-left: auto;

		+ .autofit-col-end {
			margin-left: 0;
		}
	}
}
@if ($font-import-url) { @import url($font-import-url); }
@if ($enable-grid-classes) {
	.container-fluid-max {
		@each $breakpoint, $max-width in $container-max-widths {
			$infix: '-#{$breakpoint}';

			&#{$infix} {
				max-width: $max-width;
			}
		}
	}

	.container-no-gutters {
		@include clay-container-no-gutters;

		@each $breakpoint in map-keys($grid-breakpoints) {
			$next: breakpoint-next($breakpoint, $grid-breakpoints);
			$infix: breakpoint-infix($next, $grid-breakpoints);

			@if not ($infix == '') { // .container-no-gutters-sm-down, md-down, lg-down, xl-down
				&#{$infix}-down {
					@include media-breakpoint-down($breakpoint) {
						@include clay-container-no-gutters;
					}
				}
			}
		}
	}

	%clay-custom-grid-wrapper {
		display: flex;
		flex-wrap: wrap;
		list-style: none;
		margin-bottom: 0;
		padding-left: 0;

		.container &,
		.container-fluid & {
			margin-left: -($grid-gutter-width / 2);
			margin-right: -($grid-gutter-width / 2);
		}
	}

	.container-form-lg {
		@include clay-container($container-form-lg);

		.menubar-vertical-expand-lg {
			$container-form-lg-breakpoint-down: clay-breakpoint-prev(map-get($container-form-lg, breakpoint-up));

			@include media-breakpoint-down($container-form-lg-breakpoint-down) {
				margin-top: -(map-get($container-form-lg, padding-top-mobile));
			}
		}
	}

	.container-view {
		@include clay-container($container-view);
	}
}
.alert {
	border-style: $alert-border-style;

	@if ($alert-border-width != 1px) {
		border-width: $alert-border-width;
	}

	display: block;
	font-size: $alert-font-size;
	word-wrap: break-word;

	.close {
		font-size: $alert-close-font-size;
		height: $alert-close-height;
		line-height: $alert-close-line-height;
		opacity: $alert-close-opacity;
		margin-left: $alert-close-margin-left;
		padding-bottom: $alert-close-padding-bottom;
		padding-left: $alert-close-padding-left;
		padding-right: $alert-close-padding-right;
		padding-top: $alert-close-padding-top;
		position: absolute;
		right: $alert-close-position-right;
		top: $alert-close-position-top;
		width: $alert-close-width;
	}

	.lead {
		font-size: $alert-lead-font-size;
		font-weight: $alert-lead-font-weight;
		margin-right: $alert-lead-spacer-x;
	}

	.component-title {
		@include clay-text-typography($alert-title);
	}

	.component-subtitle {
		@include clay-text-typography($alert-subtitle);
	}
}

.alert-link,
.alert-link.btn-unstyled {
	font-weight: $alert-link-font-weight;
	text-decoration: $alert-link-decoration;

	&:hover,
	&:focus {
		text-decoration: $alert-link-hover-decoration;
	}
}

.alert-indicator {
	font-size: $alert-indicator-font-size;

	+ .lead {
		margin-left: $alert-lead-spacer-x;
	}
}

// Alert Dismissible

.alert-dismissible {
	padding-bottom: $alert-dismissible-padding-bottom;
	padding-left: $alert-dismissible-padding-left;
	padding-right: $alert-dismissible-padding-right;
	padding-top: $alert-dismissible-padding-top;
}

// Alert Fluid

.alert-fluid {
	@include border-radius(0);

	border-width: $alert-fluid-border-width;
	margin-bottom: $alert-fluid-margin-bottom;
	padding: 0;

	&.alert-dismissible {
		.container,
		.container-fluid {
			padding-bottom: $alert-dismissible-padding-bottom;
			padding-left: $alert-dismissible-padding-left;
			padding-right: calc(#{$alert-dismissible-padding-right} + #{$grid-gutter-width / 2});
			padding-top: $alert-dismissible-padding-top;
			position: relative;
		}
	}

	.container,
	.container-fluid {
		padding: $alert-padding-y $alert-padding-x;
	}

	.close {
		right: calc(#{$grid-gutter-width / 2} + #{$nav-btn-margin-x});
	}
}

// Alert Notifications

.alert-container {
	height: 0;
	position: relative;
}

.alert-notifications {
	.alert {
		@include box-shadow($alert-notifications-box-shadow);

		width: $alert-notifications-max-width;

		@include clay-scale-component {
			max-width: none;
			width: 100%;
		}

		&:last-child {
			margin-bottom: 0;
		}
	}
}

.alert-notifications-absolute {
	bottom: $alert-notifications-absolute-bottom;
	height: 0;
	left: $alert-notifications-absolute-left;
	position: absolute;
	right: $alert-notifications-absolute-right;
	top: $alert-notifications-absolute-top;
	z-index: $zindex-alert-notifications;

	@include clay-scale-component {
		bottom: $alert-notifications-absolute-bottom-mobile;
		left: $alert-notifications-absolute-left-mobile;
		right: $alert-notifications-absolute-right-mobile;
		top: $alert-notifications-absolute-top-mobile;
	}
}

.alert-notifications-fixed {
	bottom: $alert-notifications-fixed-bottom;
	left: $alert-notifications-fixed-left;
	position: fixed;
	right: $alert-notifications-fixed-right;
	top: $alert-notifications-fixed-top;
	z-index: $zindex-alert-notifications;

	@include clay-scale-component {
		bottom: $alert-notifications-fixed-bottom-mobile;
		left: $alert-notifications-fixed-left-mobile;
		right: $alert-notifications-fixed-right-mobile;
		top: $alert-notifications-fixed-top-mobile;
	}
}

// Alert List

.alert-list {
	display: flex;
	flex-direction: column;
	margin-bottom: 0;
	padding-left: 0;

	.close {
		top: 50%;
		transform: translateY(-50%);
	}
}

// Alert in Modal

.modal-body {
	.alert {
		.close {
			right: $modal-inner-padding;
		}
	}

	.alert-list {
		.alert-fluid:last-child {
			margin-bottom: -$alert-fluid-border-bottom-width;
		}
	}
}

// Alert Variants

@each $color, $value in $alert-palette {
	.alert-#{$color} {
		background-color: map-get($value, bg);
		border-color: map-get($value, border-color);
		color: map-get($value, color);

		.close {
			color: map-get($value, close-color);

			&:hover,
			&:focus {
				color: map-get($value, close-hover-color);
			}
		}

		.alert-link {
			color: map-get($value, link-color);

			&:hover,
			&:focus {
				color: map-get($value, link-hover-color);
			}
		}

		.lead {
			color: map-get($value, lead-color);
		}
	}
}
%aspect-ratio {
	display: block;
	overflow: hidden;
	position: relative;

	@include clay-aspect-ratio;
}

.aspect-ratio {
	@extend %aspect-ratio;
}

// Aspect Ratio Item

%aspect-ratio-item {
	position: absolute;
	word-wrap: break-word;
}

.aspect-ratio-item {
	@extend %aspect-ratio-item;
}

// Fluid

%aspect-ratio-item-fluid {
	max-width: 100%;
	position: absolute;
	word-wrap: break-word;
}

.aspect-ratio-item-fluid {
	@extend %aspect-ratio-item-fluid;
}

// Vertical Fluid

%aspect-ratio-item-vertical-fluid {
	max-height: 100%;
	position: absolute;
	word-wrap: break-word;
}

.aspect-ratio-item-vertical-fluid {
	@extend %aspect-ratio-item-vertical-fluid;
}

// Top Center

%aspect-ratio-item-top-center {
	@include clay-position(top-center);
}

.aspect-ratio-item-top-center {
	@extend %aspect-ratio-item-top-center;
}

// Top Right

%aspect-ratio-item-top-right {
	@include clay-position(top-right);
}

.aspect-ratio-item-top-right {
	@extend %aspect-ratio-item-top-right;
}

// Right Middle

%aspect-ratio-item-right-middle {
	@include clay-position(right-middle);
}

.aspect-ratio-item-right-middle {
	@extend %aspect-ratio-item-right-middle;
}

// Bottom Right

%aspect-ratio-item-bottom-right {
	@include clay-position(bottom-right);
}

.aspect-ratio-item-bottom-right {
	@extend %aspect-ratio-item-bottom-right;
}

// Bottom Center

%aspect-ratio-item-bottom-center {
	@include clay-position(bottom-center);
}

.aspect-ratio-item-bottom-center {
	@extend %aspect-ratio-item-bottom-center;
}

// Bottom Left

%aspect-ratio-item-bottom-left {
	@include clay-position(bottom-left);
}

.aspect-ratio-item-bottom-left {
	@extend %aspect-ratio-item-bottom-left;
}

// Left Middle

%aspect-ratio-item-left-middle {
	@include clay-position(left-middle);
}

.aspect-ratio-item-left-middle {
	@extend %aspect-ratio-item-left-middle;
}

// Center Middle

%aspect-ratio-item-center-middle {
	@include clay-position(center-middle);
}

.aspect-ratio-item-center-middle {
	@extend %aspect-ratio-item-center-middle;
}

// 3 to 2

%aspect-ratio-3-to-2 {
	@include clay-aspect-ratio(3, 2);
}

.aspect-ratio-3-to-2 {
	@extend %aspect-ratio-3-to-2;
}

// 4 to 3

%aspect-ratio-4-to-3 {
	@include clay-aspect-ratio(4, 3);
}

.aspect-ratio-4-to-3 {
	@extend %aspect-ratio-4-to-3;
}

// 8 to 5

%aspect-ratio-8-to-5 {
	@include clay-aspect-ratio(8, 5);
}

.aspect-ratio-8-to-5 {
	@extend %aspect-ratio-8-to-5;
}

// 16 to 9

%aspect-ratio-16-to-9 {
	@include clay-aspect-ratio(16, 9);
}

.aspect-ratio-16-to-9 {
	@extend %aspect-ratio-16-to-9;
}

// Bg Contain

%aspect-ratio-bg-contain {
	background-position: center;
	background-repeat: no-repeat;
	background-size: contain;
}

.aspect-ratio-bg-contain {
	@extend %aspect-ratio-bg-contain;
}

// Bg Cover

%aspect-ratio-bg-cover {
	background-position: center;
	background-repeat: no-repeat;
	background-size: cover;
}

.aspect-ratio-bg-cover {
	@extend %aspect-ratio-bg-cover;
}

// Bg Center

%aspect-ratio-bg-center {
	background-position: center;
	background-repeat: no-repeat;
}

.aspect-ratio-bg-center {
	@extend %aspect-ratio-bg-center;
}
.badge {
	border-color: $badge-border-color;
	border-style: $badge-border-style;
	border-width: $badge-border-width;
	line-height: $badge-line-height;
	margin-bottom: $badge-spacer-y;
	margin-right: $badge-spacer-x;
	margin-top: $badge-spacer-y;
	max-width: 100%;
	white-space: inherit;
	word-wrap: break-word;

	a {
		color: $badge-link-color;
		text-decoration: $badge-link-text-decoration;

		&:hover,
		&:focus {
			color: $badge-link-hover-color;
			text-decoration: $badge-link-hover-text-decoration;
		}
	}

	// Inline Item in Badges are deprecated in v2.0.0-rc.11 use .badge-item
	// pattern instead
	.inline-item {
		a {
			align-items: center;
			display: inline-flex;
			margin-top: $badge-lexicon-icon-margin-top;
		}

		.btn-unstyled {
			color: inherit;
			display: inline-flex;
			margin-top: $badge-lexicon-icon-margin-top;
			max-width: none;
		}

		.close {
			color: inherit;
			display: inline-flex;
			float: none;
			font-size: inherit;
			margin-top: $badge-lexicon-icon-margin-top;
			opacity: 1;
		}

		a,
		.btn-unstyled,
		.close {
			.lexicon-icon {
				margin-top: 0;
			}
		}

		.lexicon-icon {
			height: $badge-lexicon-icon-height;
			margin-top: $badge-lexicon-icon-margin-top;
			width: $badge-lexicon-icon-width;
		}
	}
}

.badge {
	display: inline-flex;
}

.badge-item {
	display: flex;
	flex-direction: column;
	flex-shrink: 0;
	justify-content: center;
	min-height: 0;
	position: relative;
	text-align: left;

	a {
		display: inline-flex;
	}

	.btn-unstyled {
		color: inherit;
		display: inline-flex;
	}

	.close {
		@include clay-link($badge-close);
	}

	.lexicon-icon {
		height: $badge-lexicon-icon-height;
		margin-top: $badge-lexicon-icon-margin-top;
		width: $badge-lexicon-icon-width;
	}
}

.badge-item-expand {
	flex-grow: 1;
	flex-shrink: 1;
	min-width: $badge-item-expand-min-width;
	word-wrap: break-word;

	a {
		flex-direction: column;
	}
}

.badge-item-before {
	margin-right: $badge-item-spacer-x;
}

.badge-item-after {
	margin-left: $badge-item-spacer-x;
}


// Badge Variants

@each $color, $value in $badge-palette {
	.badge-#{$color} {
		background-color: map-get($value, bg);
		border-color: map-get($value, border-color);
		color: map-get($value, color);

		&[href] {
			&:hover,
			&:focus {
				background-color: map-get($value, hover-bg);
				border-color: map-get($value, hover-border-color);
				color: map-get($value, hover-color);
			}
		}

		a {
			color: map-get($value, link-color);

			&:hover,
			&:focus {
				color: map-get($value, link-hover-color);
			}
		}
	}
}
.breadcrumb {
	border-radius: $breadcrumb-border-radius;
}

.breadcrumb-link {
	display: block;
	color: $breadcrumb-link-color;

	@if not ($breadcrumb-link-text-decoration == $link-decoration) {
		text-decoration: $breadcrumb-link-text-decoration;
	}

	text-transform: $breadcrumb-text-transform;

	&:hover,
	&:focus {
		color: $breadcrumb-link-hover-color;

		@if not ($breadcrumb-link-hover-text-decoration == $link-hover-decoration) {
			text-decoration: $breadcrumb-link-hover-text-decoration;
		}
	}

	> .breadcrumb-text-truncate {
		text-decoration: $breadcrumb-link-text-decoration;

		&:hover,
		&:focus {
			text-decoration: $breadcrumb-link-hover-text-decoration;
		}
	}
}

.breadcrumb-item {
	font-size: $breadcrumb-font-size;
	font-weight: $breadcrumb-font-weight;

	@if ($breadcrumb-divider-svg-icon) {
		margin-right: 0.5em;
		position: relative;
	}

	&.active {
		font-weight: $breadcrumb-active-font-weight;
	}

	> span {
		text-transform: $breadcrumb-text-transform;
	}

	+ .breadcrumb-item {
		@if ($breadcrumb-divider-svg-icon) {
			padding-left: 1em;
		}

		&::before {
			float: left;

			@if ($breadcrumb-divider-svg-icon) {
				background-image: $breadcrumb-divider-svg-icon;
				background-repeat: no-repeat;
				background-size: 100%;
				content: '';
				display: block;
				height: $breadcrumb-divider-svg-icon-height;
				left: 0;
				margin-top: -$breadcrumb-divider-svg-icon-height / 2;
				padding: 0;
				position: absolute;
				top: 50%;
				width: $breadcrumb-divider-svg-icon-width;
			}
			@else {
				font-family: $breadcrumb-divider-font-family;
				font-weight: $breadcrumb-divider-font-weight;
				padding-left: 0.4em;
				padding-right: 0.4em;
			}
		}
	}

	.dropdown-toggle {
		text-decoration: none;

		&:hover,
		&:focus {
			text-decoration: none;
		}
	}
}

.breadcrumb-text-truncate {
	display: inline-block;
	max-width: $breadcrumb-text-truncate-max-width;
	pointer-events: none;

	@include text-truncate;

	vertical-align: bottom;

	@include clay-scale-component {
		max-width: $breadcrumb-text-truncate-max-width-mobile;
	}
}
.btn-group,
.btn-group-vertical {
	> .btn {
		&:focus {
			z-index: 3;
		}

		&:active,
		&.active {
			z-index: 2;
		}
	}
}

.btn-group {
	flex-wrap: wrap;
}

.btn-group-nowrap {
	flex-wrap: nowrap;
}

.btn-group-item {
	align-items: center;
	display: inline-flex;
	margin-right: $btn-group-item-margin-right;
}

.btn-group-item:last-child,
.btn-group-item-last {
	margin-right: 0;
}

.btn-toolbar {
	.btn-group,
	.input-group {
		margin-bottom: $btn-toolbar-spacer-y;
		margin-top: $btn-toolbar-spacer-y;

		&:not(:last-child) {
			margin-right: $btn-toolbar-spacer-x;
		}
	}
}

.btn-group-lg {
	.btn-group > .btn {
		@extend .btn-lg;
	}

	.btn-monospaced {
		padding: 0;
	}
}

.btn-group-sm {
	.btn-group > .btn {
		@extend .btn-sm;
	}

	.btn-monospaced {
		padding: 0;
	}
}
.btn {
	font-size: $btn-font-size;

	@include clay-scale-component {
		font-size: $btn-font-size-mobile;
		padding-bottom: $btn-padding-y-mobile;
		padding-left: $btn-padding-x-mobile;
		padding-right: $btn-padding-x-mobile;
		padding-top: $btn-padding-y-mobile;
	}

	&:not(:disabled):not(.disabled) {
		cursor: $btn-cursor;
	}

	&.disabled,
	&:disabled {
		cursor: $btn-disabled-cursor;
	}
}

.btn .inline-item {
	font-size: $btn-inline-item-font-size;
}

.btn-section {
	display: block;
	font-size: $btn-section-font-size;
	font-weight: $btn-section-font-weight;
	line-height: $btn-section-line-height;
}

// Button Sizes

.btn-lg {
	font-size: $btn-font-size-lg;

	@include clay-scale-component {
		font-size: $btn-font-size-lg-mobile;
		padding-bottom: $btn-padding-y-lg-mobile;
		padding-left: $btn-padding-x-lg-mobile;
		padding-right: $btn-padding-x-lg-mobile;
		padding-top: $btn-padding-y-lg-mobile;
	}

	.inline-item {
		font-size: $btn-inline-item-font-size-lg;
	}

	.btn-section {
		font-size: $btn-section-font-size-lg;
	}
}

.btn-sm {
	font-size: $btn-font-size-sm;

	@include clay-scale-component {
		font-size: $btn-font-size-sm-mobile;
		padding-bottom: $btn-padding-y-sm-mobile;
		padding-left: $btn-padding-x-sm-mobile;
		padding-right: $btn-padding-x-sm-mobile;
		padding-top: $btn-padding-y-sm-mobile;
	}

	.inline-item {
		font-size: $btn-inline-item-font-size-sm;
	}

	.btn-section {
		font-size: $btn-section-font-size-sm;
	}
}

// Button Link

.btn-link {
	@include border-radius(1px);

	&:focus {
		box-shadow: $btn-focus-box-shadow;
		text-decoration: $link-decoration;
	}

	&.disabled,
	&:disabled {
		text-decoration: none;

		&:hover {
			text-decoration: none;
		}
	}

	&:hover {
		text-decoration: $link-hover-decoration;
	}
}

// Button Unstyled

%btn-unstyled {
	background-color: rgba(0, 0, 0, 0.001);
	border-width: 0;
	cursor: $btn-cursor;
	font-size: inherit;
	font-weight: inherit;
	line-height: inherit;
	max-width: 100%;
	padding: 0;
	text-align: left;
	text-transform: inherit;
	vertical-align: baseline;
}

.btn-unstyled {
	@extend %btn-unstyled;

	&.btn-lg {
		border-color: transparent;
		border-width: $btn-border-width;
		font-size: $btn-font-size-lg;
		line-height: $btn-line-height-lg;
		padding: $btn-padding-y-lg $btn-padding-x-lg;
	}

	&.btn-sm {
		border-color: transparent;
		border-width: $btn-border-width;
		font-size: $btn-font-size-sm;
		line-height: $btn-line-height-sm;
		padding: $btn-padding-y-sm $btn-padding-x-sm;
	}
}

// Button Monospaced

.btn-monospaced {
	height: $btn-monospaced-size;
	line-height: 1;
	overflow: hidden;
	padding-bottom: $btn-monospaced-padding-y;
	padding-left: $btn-monospaced-padding-x;
	padding-right: $btn-monospaced-padding-x;
	padding-top: $btn-monospaced-padding-y;
	text-align: center;
	white-space: normal;
	width: $btn-monospaced-size;
	word-wrap: break-word;

	@include clay-scale-component {
		height: $btn-monospaced-size-mobile;
		width: $btn-monospaced-size-mobile;
	}

	&.btn-lg {
		height: $btn-monospaced-size-lg;
		padding-bottom: $btn-monospaced-padding-y-lg;
		padding-left: $btn-monospaced-padding-x-lg;
		padding-right: $btn-monospaced-padding-x-lg;
		padding-top: $btn-monospaced-padding-y-lg;
		width: $btn-monospaced-size-lg;

		@include clay-scale-component {
			height: $btn-monospaced-size-lg-mobile;
			width: $btn-monospaced-size-lg-mobile;
		}
	}

	&.btn-sm {
		height: $btn-monospaced-size-sm;
		padding-bottom: $btn-monospaced-padding-y-sm;
		padding-left: $btn-monospaced-padding-x-sm;
		padding-right: $btn-monospaced-padding-x-sm;
		padding-top: $btn-monospaced-padding-y-sm;
		width: $btn-monospaced-size-sm;

		@include clay-scale-component {
			height: $btn-monospaced-size-sm-mobile;
			width: $btn-monospaced-size-sm-mobile;
		}
	}

	&.btn .lexicon-icon {
		margin-top: 0;
	}
}

// Button Variants

@each $color, $value in $btn-palette {
	.btn-#{$color} {
		@include clay-button-variant($value);
	}
}

// Button Outline Variants

@each $color, $value in $btn-outline-palette {
	.btn-outline-#{$color} {
		@include clay-button-variant($value);
	}
}

.btn-outline-borderless {
	border-color: transparent;

	&:hover,
	&:focus {
		border-color: transparent;
	}

	&:disabled,
	&.disabled {
		border-color: transparent;
	}
}

.btn-outline-borderless:not(:disabled):not(.disabled):active {
	border-color: transparent;
}

.show > .btn-outline-borderless.dropdown-toggle {
	border-color: transparent;
}

// Loading Icons with Buttons

.btn .loading-animation {
	font-size: 1em;
	margin-top: $inline-item-lexicon-icon-margin-top;
}
.label {
	border-color: $label-border-color;

	@include border-radius($label-border-radius);

	border-style: $label-border-style;
	border-width: $label-border-width;
	color: $label-color;
	display: inline-flex;
	font-size: $label-font-size;
	font-weight: $label-font-weight;
	height: $label-height;
	line-height: $label-line-height;
	margin-bottom: $label-spacer-y;
	margin-right: $label-spacer-x;
	margin-top: $label-spacer-y;
	max-width: 100%;
	padding-bottom: $label-padding-y;
	padding-left: $label-padding-x;
	padding-right: $label-padding-x;
	padding-top: $label-padding-y;
	text-transform: $label-text-transform;
	white-space: inherit;
	word-wrap: break-word;

	a {
		color: $label-color;
		display: inline-block;
		text-decoration: $label-link-text-decoration;

		&:hover,
		&:focus {
			color: $label-link-hover-color;
			text-decoration: $label-link-hover-text-decoration;
		}
	}

	// Inline Item in Labels are deprecated in v2.0.0-rc.11 use .label-item
	// pattern instead
	.inline-item {
		a {
			align-items: center;
			display: inline-flex;
			margin-top: $label-lexicon-icon-margin-top;
		}

		.btn-unstyled {
			color: inherit;
			display: inline-flex;
			margin-top: $label-lexicon-icon-margin-top;
			max-width: none;
		}

		.close {
			color: inherit;
			display: inline-flex;
			float: none;
			font-size: inherit;
			margin-top: $label-lexicon-icon-margin-top;
			opacity: 1;
		}

		a,
		.btn-unstyled,
		.close {
			.lexicon-icon {
				margin-top: 0;
			}
		}

		.lexicon-icon {
			height: $label-lexicon-icon-height;
			margin-top: $label-lexicon-icon-margin-top;
			width: $label-lexicon-icon-width;
		}
	}
}

a.label {
	text-decoration: $label-anchor-text-decoration;

	&:hover,
	&:focus {
		text-decoration: $label-anchor-hover-text-decoration;
	}
}

.label-dismissible {
	text-transform: $label-dismissible-text-transform;
}

.label-item {
	display: flex;
	flex-direction: column;
	flex-shrink: 0;
	justify-content: center;
	min-height: 0;
	position: relative;

	a {
		display: inline-flex;
	}

	.btn-unstyled {
		color: inherit;
		display: inline-flex;
	}

	.close {
		@include clay-link($label-close);
	}

	.lexicon-icon {
		height: $label-lexicon-icon-height;
		margin-top: $label-lexicon-icon-margin-top;
		width: $label-lexicon-icon-width;
	}

	.text-truncate-inline {
		display: inline-flex;
	}
}

.label-item-expand {
	flex-grow: 1;
	flex-shrink: 1;
	min-width: 1rem;
	word-wrap: break-word;

	a {
		flex-direction: column;
	}
}

.label-item-before {
	margin-right: $label-item-spacer-x;
}

.label-item-after {
	margin-left: $label-item-spacer-x;
}

// Label Sizes

.label-lg {
	@include clay-label-size($label-lg);
}

// Label Variants

@each $color, $value in $label-palette {
	.label-#{$color} {
		background-color: map-get($value, bg);
		border-color: map-get($value, border-color);
		color: map-get($value, color);

		&[href] {
			&:hover,
			&:focus {
				background-color: map-get($value, hover-bg);
				border-color: map-get($value, hover-border-color);
				color: map-get($value, hover-color);
			}
		}

		a {
			color: map-get($value, link-color);

			&:hover,
			&:focus {
				color: map-get($value, link-hover-color);
			}
		}
	}
}
.sticker {
	align-items: center;

	border-color: $sticker-border-color;

	@include border-radius($sticker-border-radius);

	border-style: $sticker-border-style;
	border-width: $sticker-border-width;
	color: $sticker-color;

	@include clay-monospace($sticker-size);

	display: inline-flex;
	font-size: $sticker-font-size;
	font-weight: $sticker-font-weight;
	justify-content: center;
	position: relative;
	text-align: center;
	vertical-align: middle;

	.lexicon-icon {
		display: block;
		height: 100%;
		margin: auto;
	}

	> .inline-item {
		font-size: $sticker-inline-item-font-size;

		.lexicon-icon {
			margin-top: 0;
		}
	}

	&.rounded .sticker-overlay {
		border-radius: $rounded-border-radius;
	}

	&.rounded-circle .sticker-overlay {
		border-radius: $rounded-circle-border-radius;
	}

	&.rounded-0 .sticker-overlay {
		border-radius: 0;
	}
}

.sticker-img {
	@extend %aspect-ratio-item-center-middle;
	@extend %aspect-ratio-item-fluid;
}

.sticker-overlay {
	align-items: center;

	@include border-radius($sticker-border-radius);

	bottom: 0;
	display: flex;
	justify-content: center;
	left: 0;
	overflow: hidden;
	position: absolute;
	right: 0;
	top: 0;
}

// Sticker Positions

.sticker-bottom-left {
	bottom: $sticker-inside-offset;
	left: $sticker-inside-offset;
	position: absolute;
	right: auto;
	top: auto;
}

.sticker-bottom-right {
	bottom: $sticker-inside-offset;
	left: auto;
	position: absolute;
	right: $sticker-inside-offset;
	top: auto;
}

.sticker-top-left {
	left: $sticker-inside-offset;
	position: absolute;
	top: $sticker-inside-offset;
}

.sticker-top-right {
	left: auto;
	position: absolute;
	right: $sticker-inside-offset;
	top: $sticker-inside-offset;
}

.sticker-outside {
	left: $sticker-outside-offset;
	top: $sticker-outside-offset;

	&.sticker-bottom-left {
		bottom: $sticker-outside-offset;
		top: auto;
	}

	&.sticker-bottom-right {
		bottom: $sticker-outside-offset;
		left: auto;
		right: $sticker-outside-offset;
		top: auto;
	}

	&.sticker-top-right {
		left: auto;
		right: $sticker-outside-offset;
	}
}

// Sticker Sizes

.sticker-sm {
	@include clay-sticker-size($sticker-sm);
}

.sticker-lg {
	@include clay-sticker-size($sticker-lg);
}

.sticker-xl {
	@include clay-sticker-size($sticker-xl);
}

// Sticker Variants

@each $color, $value in $sticker-palette {
	.sticker-#{$color} {
		background-color: map-get($value, bg);
		border-color: map-get($value, border-color);
		color: map-get($value, color);
	}
}

// Sticker Circle

.sticker-circle,
.sticker-circle .sticker-overlay {
	@include border-radius($sticker-circle-border-radius);
}
.card,
.card-horizontal {
	border-style: $card-border-style;

	@include box-shadow($card-box-shadow);

	display: block;
	margin-bottom: $card-margin-bottom;
	position: relative;

	@if ($card-border-radius > 0) {
		.autofit-col {
			&:first-child {
				@include border-left-radius($card-inner-border-radius);
			}

			&:last-child {
				@include border-right-radius($card-inner-border-radius);
			}
		}
	}
}

.card-body {
	padding-bottom: $card-body-padding-bottom;
	padding-left: $card-body-padding-left;
	padding-right: $card-body-padding-right;
	padding-top: $card-body-padding-top;
}

.card-section-header {
	color: $card-section-header-color;
	font-size: $card-section-header-font-size;
	font-weight: $card-section-header-font-weight;
	line-height: $card-section-header-line-height;
	margin-bottom: $card-section-header-margin-bottom;
	padding: $card-section-header-padding;
	text-transform: $card-section-header-text-transform;
}

// Card Title

.card-title {
	@include clay-text-typography($card-title);
}

.card-title a {
	@include clay-link($card-title-link);
}

// Card Subtitle

.card-subtitle {
	@include clay-text-typography($card-subtitle);
}

.card-subtitle a {
	@include clay-link($card-subtitle-link);
}

// Card Link

.card-link {
	@include clay-link($card-link);

	&.btn-unstyled {
		white-space: normal;
	}

	+ .card-link {
		margin-left: 0;
	}
}

.card-divider {
	background-color: $card-divider-bg;
	height: $card-divider-height;
	margin-bottom: $card-divider-spacer-y;
	margin-left: $card-divider-spacer-x;
	margin-right: $card-divider-spacer-x;
	margin-top: $card-divider-spacer-y;
}

.card-row {
	display: flex;
	width: 100%;

	.autofit-col {
		justify-content: center;
		padding-left: 0;
		padding-right: 0;
	}

	.autofit-col-expand {
		min-width: 25px;
	}
}

.card-row .autofit-col-gutters {
	padding-left: 10px;
	padding-right: 10px;

	.card-divider {
		margin-left: -10px;
		margin-right: -10px;
	}
}

// Card Row Content Alignment

.autofit-col {
	.justify-content-center & {
		justify-content: center;
	}

	.justify-content-start & {
		justify-content: flex-start;
	}

	.justify-content-end & {
		justify-content: flex-end;
	}

	.text-center & {
		text-align: center;
	}

	.text-left & {
		text-align: left;
	}

	.text-right & {
		text-align: right;
	}
}

// Card Helpers

.card-item-first {
	@include border-top-radius($card-inner-border-radius);

	width: 100%;
}

.autofit-col:first-child .card-item-first {
	@include border-radius($card-inner-border-radius 0 0 $card-inner-border-radius);
}

.card-item-last {
	@include border-bottom-radius($card-inner-border-radius);

	width: 100%;
}

.autofit-col:last-child .card-item-last {
	@include border-radius(0 $card-inner-border-radius $card-inner-border-radius 0);
}

.rounded {
	.card-header,
	.card-item-first {
		border-top-left-radius: $card-rounded-inner-border-radius;
		border-top-right-radius: $card-rounded-inner-border-radius;
	}

	.card-footer,
	.card-item-last {
		border-bottom-left-radius: $card-rounded-inner-border-radius;
		border-bottom-right-radius: $card-rounded-inner-border-radius;
	}

	.autofit-col:first-child {
		border-bottom-left-radius: $card-rounded-inner-border-radius;
		border-top-left-radius: $card-rounded-inner-border-radius;

		.card-item-first {
			border-radius: $card-rounded-inner-border-radius 0 0 $card-rounded-inner-border-radius;
		}
	}

	.autofit-col:last-child{
		border-bottom-right-radius: $card-rounded-inner-border-radius;
		border-top-right-radius: $card-rounded-inner-border-radius;

		.card-item-last {
			border-radius: 0 $card-rounded-inner-border-radius $card-rounded-inner-border-radius 0;
		}
	}
}

.rounded-0 {
	.card-header,
	.card-item-first {
		border-top-left-radius: $card-rounded-0-inner-border-radius;
		border-top-right-radius: $card-rounded-0-inner-border-radius;
	}

	.card-footer,
	.card-item-last {
		border-bottom-left-radius: $card-rounded-0-inner-border-radius;
		border-bottom-right-radius: $card-rounded-0-inner-border-radius;
	}

	.autofit-col:first-child {
		border-bottom-left-radius: $card-rounded-0-inner-border-radius;
		border-top-left-radius: $card-rounded-0-inner-border-radius;

		.card-item-first {
			border-radius: $card-rounded-0-inner-border-radius 0 0 $card-rounded-0-inner-border-radius;
		}
	}

	.autofit-col:last-child {
		border-bottom-right-radius: $card-rounded-0-inner-border-radius;
		border-top-right-radius: $card-rounded-0-inner-border-radius;

		.card-item-last {
			border-radius: 0 $card-rounded-0-inner-border-radius $card-rounded-0-inner-border-radius 0;
		}
	}
}

.rounded-circle {
	.card-header,
	.card-item-first {
		border-top-left-radius: $card-rounded-circle-inner-border-radius;
		border-top-right-radius: $card-rounded-circle-inner-border-radius;
	}

	.card-footer,
	.card-item-last {
		border-bottom-left-radius: $card-rounded-circle-inner-border-radius;
		border-bottom-right-radius: $card-rounded-circle-inner-border-radius;
	}

	.autofit-col:first-child {
		border-bottom-left-radius: $card-rounded-circle-inner-border-radius;
		border-top-left-radius: $card-rounded-circle-inner-border-radius;

		.card-item-first {
			border-radius: $card-rounded-circle-inner-border-radius 0 0 $card-rounded-circle-inner-border-radius;
		}
	}

	.autofit-col:last-child {
		border-bottom-right-radius: $card-rounded-circle-inner-border-radius;
		border-top-right-radius: $card-rounded-circle-inner-border-radius;

		.card-item-last {
			border-radius: 0 $card-rounded-circle-inner-border-radius $card-rounded-circle-inner-border-radius 0;
		}
	}
}

// Checkbox and Radio Cards

.form-check-card {
	margin-bottom: $card-margin-bottom;
	margin-top: 0;
	padding-left: 0;

	.card {
		margin-bottom: 0;
	}

	.custom-control {
		display: inline;
		margin-right: 0;
		position: static;

		> label {
			font-weight: $font-weight-normal;
			padding-left: 0;
		}
	}

	.custom-control-input {
		z-index: 1;
	}

	.custom-control-label {
		position: absolute;
		z-index: 1;

		&::before,
		&::after {
			top: 0;
		}
	}

	.form-check-input {
		margin-left: 0;
		margin-top: 0;
		position: absolute;
		z-index: 1;
	}

	.form-check-label {
		color: $body-color;
		display: inline;
		font-weight: $font-weight-normal;
		padding-left: 0;
		position: static;
	}

	&.active .card,
	.custom-control-input:checked ~ .card,
	.form-check-input:checked ~ .card {
		box-shadow: $form-check-card-checked-box-shadow;
	}
}

.form-check-card {
	&:hover {
		.card {
			box-shadow: $form-check-card-checked-box-shadow;
		}
	}
}

.custom-control-input,
.form-check-input {
	&:hover {
		~ .card {
			box-shadow: $form-check-card-checked-box-shadow;
		}
	}
}

.form-check-bottom-left,
.form-check-middle-left,
.form-check-top-left {
	.card-horizontal {
		> .card-body {
			padding-left: $checkbox-left-card-padding;
		}
	}
}

.form-check-bottom-right,
.form-check-middle-right,
.form-check-top-right {
	.card-horizontal {
		> .card-body {
			padding-right: $checkbox-right-card-padding;
		}
	}
}

.form-check-bottom-left {
	.custom-control-input,
	.custom-control-label,
	.form-check-input {
		bottom: $checkbox-position;
		left: $checkbox-position;
		top: auto;
		transform: none;
	}
}

.form-check-bottom-right {
	.custom-control-input,
	.custom-control-label,
	.form-check-input {
		bottom: $checkbox-position;
		left: auto;
		right: $checkbox-position;
		top: auto;
		transform: none;
	}
}

.form-check-middle-left {
	.custom-control-input,
	.custom-control-label,
	.form-check-input {
		left: $checkbox-position;
		margin-top: 0;
		top: 50%;
		transform: translateY(-50%);
	}
}

.form-check-middle-right {
	.custom-control-input,
	.custom-control-label,
	.form-check-input {
		left: auto;
		margin-top: 0;
		right: $checkbox-position;
		top: 50%;
		transform: translateY(-50%);
	}
}

.form-check-top-left {
	.custom-control-input,
	.custom-control-label,
	.form-check-input {
		left: $checkbox-position;
		top: $checkbox-position;
		transform: none;
	}
}

.form-check-top-right {
	.custom-control-input,
	.custom-control-label,
	.form-check-input {
		left: auto;
		right: $checkbox-position;
		top: $checkbox-position;
		transform: none;
	}
}

// Card Page

.card-page {
	@extend %clay-custom-grid-wrapper;
}

.card-page-item-header {
	padding-left: $grid-gutter-width / 2;
	padding-right: $grid-gutter-width / 2;
	width: 100%;
}

.card-page-item-directory {
	@include clay-custom-grid-columns($card-page-item-directory);
}

.card-page-item-asset {
	@include clay-custom-grid-columns($card-page-item-asset);
}

// Card Type Asset

.card-type-asset {
	@include clay-card-type-asset($card-type-asset);
}

.image-card {
	@include clay-card-type-asset-variant($image-card);
}

.file-card {
	@include clay-card-type-asset-variant($file-card);
}

.user-card {
	@include clay-card-type-asset-variant($user-card);
}

// Card Type Directory

.card-type-directory {
	@include clay-card-type-directory($card-type-directory);
}
.dropdown-header {
	font-size: $dropdown-header-font-size;
	margin-bottom: $dropdown-header-margin-bottom;
	margin-top: $dropdown-header-margin-top;
	text-transform: $dropdown-header-text-transform;
	white-space: normal;
	word-wrap: break-word;

	@if not ($dropdown-header-padding-y == $dropdown-padding-y) {
		padding-bottom: $dropdown-header-padding-y;
		padding-top: $dropdown-header-padding-y;
	}

	@if not ($dropdown-header-padding-x == $dropdown-item-padding-x) {
		padding-left: $dropdown-header-padding-x;
		padding-right: $dropdown-header-padding-x;
	}

	@include clay-scale-component {
		font-size: $dropdown-header-font-size-mobile;
	}

	&:first-child {
		margin-top: 0;
	}
}

.dropdown-subheader {
	color: $dropdown-subheader-color;
	font-size: $dropdown-subheader-font-size;
	font-weight: $dropdown-subheader-font-weight;
	margin-bottom: $dropdown-subheader-margin-bottom;
	margin-top: $dropdown-subheader-margin-top;
	padding-bottom: $dropdown-subheader-padding-y;
	padding-left: $dropdown-subheader-padding-x;
	padding-right: $dropdown-subheader-padding-x;
	padding-top: $dropdown-subheader-padding-y;
	text-transform: $dropdown-subheader-text-transform;
	white-space: normal;
	word-wrap: break-word;

	&:first-child {
		margin-top: 0;
	}
}

.dropdown-caption {
	color: $dropdown-caption-color;
	font-size: $dropdown-caption-font-size;
	font-weight: $dropdown-caption-font-weight;
	padding: $dropdown-item-padding-y $dropdown-item-padding-x;
	white-space: normal;
	word-wrap: break-word;
}

.dropdown-item {
	overflow: hidden;
	position: relative;
	white-space: normal;
	word-wrap: break-word;

	&.active {
		font-weight: $dropdown-link-active-font-weight;

		label {
			color: $dropdown-link-active-color;
		}

		.form-check-label {
			color: $dropdown-link-active-color;
			font-weight: $dropdown-link-active-font-weight;
		}

		.custom-control-label {
			font-weight: $dropdown-link-active-font-weight;
		}
	}

	&.disabled,
	&:disabled {
		cursor: $dropdown-item-disabled-cursor;

		label,
		.form-check-label {
			color: $dropdown-link-disabled-color;
		}

		&.btn-link,
		&.btn-unstyled {
			opacity: 1;
		}
	}

	&.btn-link {
		line-height: $line-height-base;
		transition: none;

		&:hover,
		&:focus {
			text-decoration: none;
		}
	}

	&.btn-unstyled {
		font-weight: $dropdown-link-font-weight;
		padding: $dropdown-item-padding-y $dropdown-item-padding-x;
		transition: none;
	}

	.form-check {
		margin-bottom: 0;
	}

	.form-check-label {
		font-weight: $dropdown-link-font-weight;
	}

	.custom-control {
		margin-bottom: 0;
		margin-right: 0;
		min-height: $custom-control-indicator-size;
	}

	.custom-control-label {
		font-weight: $dropdown-link-font-weight;
	}
}

.dropdown-section {
	padding: $dropdown-item-padding-y $dropdown-item-padding-x;

	.form-group + .form-group {
		margin-top: $dropdown-item-padding-y * 2;
	}
}

.dropdown-menu {
	border-style: $dropdown-border-style;
	font-size: $dropdown-font-size;
	max-height: $dropdown-max-height;
	max-width: $dropdown-max-width;
	min-height: $dropdown-min-height;
	overflow: auto;

	@include media-breakpoint-down(md) {
		max-height: $dropdown-max-height-mobile;
		max-width: $dropdown-max-width-mobile;
	}

	@include clay-scale-component {
		font-size: $dropdown-font-size-mobile;
	}

	.alert {
		font-size: $dropdown-alert-font-size;
		line-height: $dropdown-alert-line-height;
		margin: $dropdown-alert-margin;
		padding: $dropdown-alert-padding-y $dropdown-alert-padding-x;

		&:first-child {
			margin-top: 0;
		}

		&:last-child {
			margin-bottom: 0;
		}
	}

	.alert-fluid {
		margin-left: 0;
		margin-right: 0;

		&:first-child {
			margin-top: -$dropdown-padding-y;
		}

		&:last-child {
			margin-bottom: -$dropdown-padding-y;
		}
	}

	.form-group {
		margin-bottom: 0;
	}

	.inline-scroller {
		max-height: $dropdown-inline-scroller-max-height;

		@include media-breakpoint-down(md) {
			max-height: $dropdown-inline-scroller-max-height-mobile;
		}
	}

	> .list-unstyled {
		margin-bottom: 0;
	}
}

// Dropdown Action

.dropdown-action {
	display: inline-block;
	font-size: $dropdown-action-toggle-font-size;
	vertical-align: middle;

	> .dropdown-toggle {
		align-items: center;

		@include border-radius($dropdown-action-toggle-border-radius);

		cursor: $btn-cursor;
		display: flex;

		@include clay-monospace($dropdown-action-toggle-size);

		font-size: inherit;
		font-weight: inherit;
		justify-content: center;
		line-height: inherit;
		padding: 0;
		text-transform: inherit;
		vertical-align: baseline;

		&:disabled,
		&.disabled {
			cursor: $dropdown-action-toggle-disabled-cursor;
			opacity: $dropdown-action-toggle-disabled-opacity;
		}

		.inline-item .lexicon-icon,
		.lexicon-icon {
			margin-top: 0;
		}
	}
}

// Dropdown Menu with Indicators

.dropdown-menu-indicator-start {
	// `.dropdown-item-indicator` is deprecated in v2.3.5 use
	// `.dropdown-item-indicator-start` instead
	.dropdown-item-indicator {
		height: $dropdown-item-indicator-size;
		left: $dropdown-item-padding-x;
		position: absolute;
		top: $dropdown-item-padding-y;
		width: $dropdown-item-indicator-size;
	}

	.dropdown-item-indicator-start {
		height: $dropdown-item-indicator-size;
		left: $dropdown-item-padding-x;
		position: absolute;
		right: auto;
		top: $dropdown-item-padding-y;
		width: $dropdown-item-indicator-size;
	}

	.dropdown-header,
	.dropdown-subheader,
	.dropdown-caption,
	.dropdown-item {
		padding-left: $dropdown-item-padding-x + $dropdown-item-indicator-size + $dropdown-item-indicator-spacer-x;
	}
}

.dropdown-menu-indicator-end {
	// `.dropdown-item-indicator` is deprecated in v2.3.5 use
	// `.dropdown-item-indicator-end` instead
	.dropdown-item-indicator {
		position: absolute;
		right: $dropdown-item-padding-x;
		top: $dropdown-item-padding-y;
	}

	.dropdown-item-indicator-end {
		left: auto;
		position: absolute;
		right: $dropdown-item-padding-x;
		top: $dropdown-item-padding-y;
	}

	.dropdown-item {
		padding-right: $dropdown-item-padding-x + $dropdown-item-indicator-size + $dropdown-item-indicator-spacer-x;
	}
}

// Dropdown Menu Positions

.dropdown-menu-top {
	bottom: 100% !important;
	left: 0 !important;
	margin-top: 0;
	margin-bottom: $dropdown-spacer;
	right: auto !important;
	top: auto !important;
	transform: none !important;
	will-change: auto !important;
}

.dropdown-menu-top-right {
	bottom: 100% !important;
	left: auto !important;
	margin-top: 0;
	margin-bottom: $dropdown-spacer;
	right: 0 !important;
	top: auto !important;
	transform: none !important;
	will-change: auto !important;
}

.dropdown-menu-top-center {
	bottom: 100% !important;
	left: 50% !important;
	margin-top: 0;
	margin-bottom: $dropdown-spacer;
	right: auto !important;
	top: auto !important;
	transform: translateX(-50%) !important;
	will-change: auto !important;
}

.dropdown-menu-center {
	bottom: auto !important;
	left: 50% !important;
	right: auto !important;
	top: 100% !important;
	transform: translateX(-50%) !important;
	will-change: auto !important;
}

.dropdown-menu-left-side {
	bottom: auto !important;
	left: auto !important;
	margin-right: $dropdown-spacer;
	margin-top: 0;
	right: 100% !important;
	top: 0 !important;
	transform: none !important;
	will-change: auto !important;
}

.dropdown-menu-left-side-bottom {
	bottom: 0 !important;
	left: auto !important;
	margin-right: $dropdown-spacer;
	margin-top: 0;
	right: 100% !important;
	top: auto !important;
	transform: none !important;
	will-change: auto !important;
}

.dropdown-menu-left-side-middle {
	bottom: auto !important;
	left: auto !important;
	margin-right: $dropdown-spacer;
	margin-top: 0;
	right: 100% !important;
	top: 50% !important;
	transform: translate(0 , -50%) !important;
	will-change: auto !important;
}

.dropdown-menu-right-side {
	bottom: auto !important;
	left: 100% !important;
	margin-left: $dropdown-spacer;
	margin-top: 0;
	right: auto !important;
	top: 0 !important;
	transform: none !important;
	will-change: auto !important;
}

.dropdown-menu-right-side-bottom {
	bottom: 0 !important;
	left: 100% !important;
	margin-left: $dropdown-spacer;
	margin-top: 0;
	right: auto !important;
	top: auto !important;
	transform: none !important;
	will-change: auto !important;
}

.dropdown-menu-right-side-middle {
	bottom: auto !important;
	left: 100% !important;
	margin-left: $dropdown-spacer;
	margin-top: 0;
	right: auto !important;
	top: 50% !important;
	transform: translate(0 , -50%) !important;
	will-change: auto !important;
}

// Dropdown wide / full

%dropdown-full-wide-dropdown-menu {
	max-width: none;
	width: 100%;

	@include media-breakpoint-up(md) {
		max-height: none;
		width: 100%;
	}
}

.dropdown-full,
.dropdown-wide {
	.dropdown-header ~ .dropdown-header {
		margin-top: $dropdown-full-wide-header-spacer-y;
	}

	.dropdown-menu {
		@extend %dropdown-full-wide-dropdown-menu;

		> .row {
			margin-left: 0;
			margin-right: 0;
			min-width: $dropdown-wide-width;
		}
	}
}

.dropdown-wide .dropdown-menu {
	@include media-breakpoint-up(lg) { // min-width 992px
		min-width: $dropdown-wide-width;
	}
}

// Navbar Component Dropdowns

.nav-item.dropdown-full {
	position: static;
}

.nav-item.dropdown-wide {
	@include media-breakpoint-down(md) { // max-width 991px
		position: static;
	}
}

.navbar-nav .dropdown-menu-center {
	@include media-breakpoint-down(sm) { // max-width 767px
		-ms-transform: none;
		transform: none;
	}
}

.navbar-right .dropdown-menu-center {
	left: 50%;
	right: auto;
}
[type="checkbox"] {
	cursor: $form-check-input-cursor;
	height: 14px;
	width: 14px;
}

[type="radio"] {
	cursor: $form-check-input-cursor;
	height: 15px;
	width: 14px;
}

fieldset {
	word-wrap: break-word;

	@-moz-document url-prefix() { // FF Fieldset workaround
		display: table-cell;
	}
}

label {
	color: $input-label-color;
	font-size: $input-label-font-size;
	font-weight: $input-label-font-weight;
	margin-bottom: $input-label-margin-bottom;
	max-width: 100%;
	word-wrap: break-word;

	@include clay-scale-component {
		font-size: $input-label-font-size-mobile;
	}

	&.focus {
		color: $input-label-focus-color;
	}

	&[for] {
		cursor: $input-label-for-cursor;
	}

	+ .form-text {
		margin-bottom: $input-label-margin-bottom;
		margin-top: 0;
	}

	.reference-mark {
		color: $input-label-reference-mark-color;
		font-size: $input-label-reference-mark-font-size;
		margin-left: $input-label-reference-mark-spacer;
		margin-right: $input-label-reference-mark-spacer;
		vertical-align: $input-label-reference-mark-vertical-align;
	}
}

.form-group {
	position: relative;

	@include clay-scale-component {
		margin-bottom: $form-group-margin-bottom-mobile;
	}
}

// Inputs

.form-control {
	background-clip: border-box;
	border-color: $input-border-color;
	border-style: $input-border-style;
	border-bottom-width: $input-border-bottom-width;
	border-left-width: $input-border-left-width;
	border-right-width: $input-border-right-width;
	border-top-width: $input-border-top-width;

	@if not ($input-font-size == $font-size-base) {
		font-size: $input-font-size;
	}

	height: $input-height;
	min-width: 0;

	@if not ($input-padding-y == $btn-padding-y) {
		padding-bottom: $input-padding-y;
		padding-top: $input-padding-y;
	}

	@if not ($input-padding-x == $btn-padding-x) {
		padding-left: $input-padding-x;
		padding-right: $input-padding-x;
	}

	@include clay-scale-component {
		font-size: $input-font-size-mobile;
		height: $input-height-mobile;
	}

	&:focus {
		&::placeholder {
			color: $input-placeholder-focus-color;
		}
	}

	&[type="range"] {
		background-color: transparent;
		border-color: transparent;
	}

	&:not([type="range"]) {
		@media screen and (-webkit-min-device-pixel-ratio: 0) {
			-webkit-appearance: none;
		}
	}

	&::-ms-clear,
	&::-ms-reveal {
		display: none;
		height: 0;
		width: 0;
	}

	.label {
		@include clay-label-size($form-control-label-size);
	}
}

.form-control-plaintext {
	background-clip: border-box;
	border-bottom-width: $input-border-bottom-width;
	border-left-width: $input-border-left-width;
	border-right-width: $input-border-right-width;
	border-top-width: $input-border-top-width;

	@if not ($input-font-size == $font-size-base) {
		font-size: $input-font-size;
	}

	height: $input-height;
	min-width: 0;

	@if not ($input-padding-y == $btn-padding-y) {
		padding-bottom: $input-padding-y;
		padding-top: $input-padding-y;
	}

	text-overflow: ellipsis;

	@include clay-scale-component {
		font-size: $input-font-size-mobile;
		height: $input-height-mobile;
	}
}

.form-control-hidden {
	left: 0;
	opacity: 0;
	position: absolute;
	z-index: -1;
}

div {
	&.form-control {
		height: auto;
		min-height: $input-height;
	}

	&.form-control-lg {
		min-height: $input-height-lg;
	}

	&.form-control-sm {
		min-height: $input-height-sm;
	}
}

.form-control-tag-group {
	align-items: center;
	display: flex;
	flex-wrap: wrap;
	height: auto;
	padding-bottom: $form-control-tag-group-padding-y;
	padding-top: $form-control-tag-group-padding-y;
}

.form-control-inset {
	background-color: transparent;
	border-width: 0;
	color: $input-color;
	flex-grow: 1;
	margin-bottom: $form-control-inset-margin-y;
	margin-top: $form-control-inset-margin-y;
	min-height: $form-control-inset-min-height;
	padding: 0;

	&:focus {
		outline: 0;
	}
}

// Select

.form-control[multiple],
.form-control[size] {
	height: auto;
}

select.form-control {
	cursor: $input-select-cursor;

	option {
		cursor: $input-select-cursor;
	}
}

// Will need to be revisted if action is taken on https://github.com/twbs/bootstrap/issues/23058
select.form-control:not([multiple]):not([size]) {
	-moz-appearance: none;
	-webkit-appearance: none;

	&::-ms-expand {
		display: none;
	}

	background-color: $input-select-bg;
	background-image: $input-select-icon;
	background-position: $input-select-bg-position;
	background-repeat: no-repeat;
	background-size: $input-select-bg-size;
	padding-bottom: $input-select-padding-bottom;
	padding-left: $input-select-padding-left;
	padding-right: $input-select-padding-right;
	padding-top: $input-select-padding-top;

	&:focus {
		background-color: $input-select-focus-bg;
		background-image: $input-select-icon-focus;
	}

	&:disabled {
		background-image: $input-select-icon-disabled;
	}
}

// Textarea

textarea {
	&.form-control {
		height: $input-textarea-height;
	}

	&.form-control-plaintext {
		height: $input-textarea-height;
	}
}

// File

.form-control-file {
	cursor: $input-file-cursor;

	&::-webkit-file-upload-button {
		cursor: $input-file-cursor;
	}
}

// Checkbox and Radio

.form-check-label {
	cursor: $form-check-label-cursor;
	display: inline;
	position: relative;
}

.form-check-input {
	position: static;

	&:disabled {
		cursor: $form-check-input-disabled-cursor;

		+ .form-check-label-text {
			color: $input-label-disabled-color;
			cursor: $form-check-label-text-disabled-cursor;
		}
	}
}

.form-check-label-text {
	margin-left: $form-check-label-text-margin-left;
	padding-left: $form-check-label-text-padding-left;
}

// Disabled State

fieldset[disabled] label,
label.disabled {
	color: $input-label-disabled-color;
	cursor: $input-label-disabled-cursor;
	opacity: $input-disabled-opacity;
}

fieldset[disabled] label {
	.form-control {
		font-weight: normal;
		opacity: 1;
	}
}

.form-control {
	fieldset[disabled] &,
	&[disabled] {
		border-color: $input-disabled-border-color;
		color: $input-disabled-color;
		cursor: $input-disabled-cursor;
		opacity: $input-disabled-opacity;

		&::placeholder {
			color: $input-placeholder-disabled-color;
		}
	}
}

.form-control[disabled] > option {
	@media (-webkit-min-device-pixel-ratio: 0) { // Webkit only
		color: $input-disabled-color;
	}
}

.form-check.disabled .form-check-label {
	@if not ($input-label-disabled-color == $text-muted) {
		color: $input-label-disabled-color;
	}
}

.form-control-file:disabled {
	cursor: $input-disabled-cursor;

	&::-webkit-file-upload-button {
		cursor: $input-disabled-cursor;
	}
}

// Readonly State

.form-control[readonly] {
	background-color: $input-readonly-bg;
	border-color: $input-readonly-border-color;
	color: $input-readonly-color;
	cursor: $input-readonly-cursor;

	&:focus {
		background-color: $input-readonly-focus-bg;
		border-color: $input-readonly-focus-border-color;
		color: $input-readonly-focus-color;
	}
}

// Input Sizes

.form-control-lg {
	@if not ($input-font-size-lg == $font-size-lg) {
		font-size: $input-font-size-lg;
	}

	height: $input-height-lg;

	@if not ($input-padding-y-lg == $btn-padding-y-lg) {
		padding-bottom: $input-padding-y-lg;
		padding-top: $input-padding-y-lg;
	}

	@if not ($input-padding-x-lg == $btn-padding-x-lg) {
		padding-left: $input-padding-x-lg;
		padding-right: $input-padding-x-lg;
	}

	@include clay-scale-component {
		height: $input-height-lg-mobile;
	}
}

.form-control-sm {
	@if not ($input-font-size-sm == $font-size-sm) {
		font-size: $input-font-size-sm;
	}

	height: $input-height-sm;

	@if not ($input-padding-y-sm == $btn-padding-y-sm) {
		padding-bottom: $input-padding-y-sm;
		padding-top: $input-padding-y-sm;
	}

	@if not ($input-padding-x-sm == $btn-padding-x-sm) {
		padding-left: $input-padding-x-sm;
		padding-right: $input-padding-x-sm;
	}

	@include clay-scale-component {
		height: $input-height-sm-mobile;
	}
}

// Form Group Autofit

.form-group-autofit {
	align-items: flex-start;
	display: flex;
	flex-direction: column;
	margin-bottom: $form-group-autofit-margin-bottom;

	@include media-breakpoint-up(sm) {
		flex-direction: row;
		width: 100%;
	}

	label {
		align-self: flex-start;
	}

	.form-group-item {
		display: flex;
		flex-basis: auto;
		flex-direction: column;
		flex-grow: 0;
		flex-shrink: 1;
		min-width: 25px;
		position: relative;
		width: 100%;

		&:not(:last-child) {
			margin-bottom: 1rem;
		}
	}

	> .form-group-item:not(:last-child) {
		@include media-breakpoint-up(sm) {
			margin-bottom: 0;
			margin-right: $grid-gutter-width / 2;
		}
	}

	.form-group-item-shrink {
		flex-shrink: 0;
		max-width: 100%;
		width: auto;
	}
}

// Form Group Item Label

.form-group-autofit .form-group-item-label:not(:last-child) {
	@include media-breakpoint-down(xs) {
		margin-bottom: 0;
	}
}

.form-group-item-label {
	@include media-breakpoint-up(sm) {
		justify-content: center;
		min-height: $input-height;

		> label {
			margin-bottom: 0;
			max-width: $form-group-item-label-max-width;
		}
	}
}

.form-group-item-label-spacer {
	@include media-breakpoint-up(sm) {
		margin-top: $form-group-item-label-spacer;
	}
}
.component-link {
	@include clay-link($component-link);
}

.single-link {
	font-weight: $single-link-font-weight;
}

.link-primary {
	@include clay-link($link-primary);
}

.link-secondary {
	@include clay-link($link-secondary);
}

// Link Outline

button.link-outline {
	cursor: $btn-cursor;
}

.link-outline {
	align-items: center;
	background-color: transparent;
	border-color: transparent;

	@include border-radius($link-outline-border-radius);

	border-style: solid;
	border-width: $link-outline-border-width;
	display: inline-flex;
	font-size: $link-outline-font-size;
	font-weight: $link-outline-font-weight;
	justify-content: center;
	line-height: $link-outline-line-height;
	padding-bottom: $link-outline-padding-y;
	padding-left: $link-outline-padding-x;
	padding-right: $link-outline-padding-x;
	padding-top: $link-outline-padding-y;
	transition: $link-outline-transition;
	vertical-align: middle;

	&:hover {
		text-decoration: none;
	}

	.inline-item .lexicon-icon,
	.lexicon-icon {
		margin-top: 0;
	}
}

.link-outline-primary {
	@include clay-link($link-outline-primary);
}

.link-outline-secondary {
	@include clay-link($link-outline-secondary);
}

.link-outline-borderless {
	border-color: transparent;
}

%link-monospaced {
	align-items: center;
	display: inline-flex;
	height: $link-monospaced-size;
	justify-content: center;
	overflow: hidden;
	padding: 0;
	vertical-align: middle;
	width: $link-monospaced-size;

	.inline-item .lexicon-icon,
	.lexicon-icon {
		margin-top: 0;
	}
}

.link-monospaced {
	@extend %link-monospaced;
}

// Component Links

.component-title {
	@include clay-text-typography($component-title);

	a {
		@include clay-link($component-title-link);
	}
}

.component-subtitle {
	@include clay-text-typography($component-subtitle);

	a {
		@include clay-link($component-subtitle-link);
	}
}

.component-action {
	@include clay-link($component-action);

	@extend %link-monospaced;
}
.form-file {
	display: flex;
	position: relative;
}

.form-file-input {
	cursor: $input-file-cursor;
	height: 100%;
	opacity: 0;
	overflow: hidden;
	position: absolute;
	width: 100%;
	z-index: 10;

	&::-webkit-file-upload-button {
		cursor: $input-file-cursor;
	}

	&:focus {
		+ .btn-primary {
			@extend .btn-primary.focus !optional;
		}

		+ .btn-secondary {
			@extend .btn-secondary.focus !optional;
		}

		+ .btn-success {
			@extend .btn-success.focus !optional;
		}

		+ .btn-warning {
			@extend .btn-warning.focus !optional;
		}

		+ .btn-danger {
			@extend .btn-danger.focus !optional;
		}

		+ .btn-light {
			@extend .btn-light.focus !optional;
		}

		+ .btn-dark {
			@extend .btn-dark.focus !optional;
		}

		+ .input-group {
			border-radius: 1px;
			box-shadow: 0 0 0 0.075rem #FFF, $btn-focus-box-shadow;
		}
	}

	&:disabled {
		cursor: $input-disabled-cursor;

		&::-webkit-file-upload-button {
			cursor: $input-disabled-cursor;
		}
	}
}

.custom-file-input:focus + .custom-file-control {
	border-radius: 1px;
}

// Custom Checkbox and Radio

.custom-control {
	label {
		cursor: $custom-control-description-cursor;
		font-size: 1rem;
	}
}

.custom-control-label {
	font-size: $custom-control-description-font-size;
	line-height: $custom-control-description-line-height;
}

.custom-control-label-text {
	padding-left: $custom-control-description-padding-left;
}

// Custom Control Indicator

.custom-control-label::before {
	border-color: $custom-control-indicator-border-color;
	border-style: $custom-control-indicator-border-style;
	border-width: $custom-control-indicator-border-width;
	font-size: $custom-control-indicator-size;
}

.custom-control-input {
	cursor: $form-check-input-cursor;

	&:active ~ .custom-control-label::before {
		border-color: $custom-control-indicator-active-border-color;
	}

	&:active:checked ~ .custom-control-label::before {
		background-color: $custom-control-indicator-checked-active-bg;
		border-color: $custom-control-indicator-checked-active-border-color;
	}

	&:checked ~ .custom-control-label::before {
		border-color: $custom-control-indicator-checked-border-color;
	}

	&:disabled {
		cursor: $custom-control-indicator-disabled-cursor;

		~ .custom-control-label::before {
			background-color: $custom-control-indicator-disabled-bg;
			border-color: $custom-control-indicator-disabled-border-color;
			box-shadow: none;
		}

		~ .custom-control-label {
			cursor: $custom-control-description-disabled-cursor;
		}
	}

	&:disabled:checked ~ .custom-control-label::before {
		background-color: $custom-control-indicator-checked-disabled-bg;
		border-color: $custom-control-indicator-checked-disabled-border-color;
	}
}

.custom-control .custom-control-input:focus ~ .custom-control-label::before {
	box-shadow: $custom-control-indicator-focus-box-shadow;
}

// Custom Checkbox

.custom-checkbox {
	.custom-control-input {
		&:checked ~ .custom-control-label::after {
			background-size: $custom-checkbox-indicator-icon-checked-bg-size;
		}

		&:indeterminate ~ .custom-control-label::before {
			background-color: $custom-checkbox-indicator-indeterminate-bg;
			border-color: $custom-control-indicator-indeterminate-border-color;
		}

		&:indeterminate ~ .custom-control-label::after {
			background-size: $custom-checkbox-indicator-icon-indeterminate-bg-size;
		}

		&:disabled:indeterminate ~ .custom-control-label::before {
			background-color: $custom-control-indicator-checked-disabled-bg;
			border-color: $custom-control-indicator-checked-disabled-border-color;
		}
	}
}

// Custom Radio

.custom-radio {
	.custom-control-input {
		&:checked ~ .custom-control-label::after {
			background-size: $custom-radio-indicator-icon-checked-bg-size;
		}

		&:disabled ~ .custom-control-label::before {
			border-color: $custom-radio-indicator-disabled-border-color;
		}

		&:disabled:checked ~ .custom-control-label::before {
			border-color: $custom-radio-indicator-checked-disabled-border-color;
		}
	}
}

// Will need to be revisited once https://github.com/twbs/bootstrap/pull/25184 is merged

.custom-control {
	padding-left: 0;

	label {
		display: inline;
		margin-bottom: 0;
	}
}

.custom-control-input {
	height: $custom-control-indicator-size;
	left: 0;
	top: (($line-height-base - $custom-control-indicator-size) / 2);
	width: $custom-control-indicator-size;
	z-index: 0;
}

.custom-control-label::before {
	display: block;
	float: left;
	position: relative;
}

.custom-control-inline {
	margin-right: 0;

	+ .custom-control-inline {
		margin-left: $custom-control-spacer-x;
	}
}
// Form Feedback

.invalid-feedback,
.valid-feedback {
	font-size: $form-feedback-font-size;
	font-weight: $form-feedback-font-weight;
}

.form-feedback-group {
	width: 100%;
	word-wrap: break-word;
}

.form-feedback-item {
	font-size: $form-feedback-font-size;
	font-weight: $form-feedback-font-weight;
	margin-top: $form-feedback-margin-top;
	word-wrap: break-word;
}

.form-feedback-indicator {
	margin-left: $form-feedback-indicator-margin-x;
	margin-right: $form-feedback-indicator-margin-x;

	&:first-child {
		margin-left: 0;
	}
}

.form-text {
	color: $form-text-color;
	font-size: $form-text-font-size;
	font-weight: $form-text-font-weight;
	word-wrap: break-word;
}

// HTML 5 Form Validator

.was-validated .form-control:valid,
.was-validated .form-control.is-valid {
	background-color: $input-success-bg;
	border-color: $input-success-border-color;
	box-shadow: $input-success-box-shadow;
	color: $input-success-color;

	&:focus {
		background-color: $input-success-focus-bg;
		border-color: $input-success-focus-border-color;
		box-shadow: $input-success-focus-box-shadow;
		color: $input-success-focus-color;
	}
}

.was-validated .form-control:invalid,
.was-validated .form-control.is-invalid {
	background-color: $input-danger-bg;
	border-color: $input-danger-border-color;
	box-shadow: $input-danger-box-shadow;
	color: $input-danger-color;

	&:focus {
		background-color: $input-danger-focus-bg;
		border-color: $input-danger-focus-border-color;
		box-shadow: $input-danger-focus-box-shadow;
		color: $input-danger-focus-color;
	}
}

// Non HTML5 Form Validator

.has-error {
	label {
		color: $input-danger-label-color;
	}

	.custom-control-label,
	.form-check-label {
		color: $input-danger-checkbox-label-color;
	}

	.form-control {
		background-color: $input-danger-bg;
		border-color: $input-danger-border-color;
		box-shadow: $input-danger-box-shadow;
		color: $input-danger-color;

		&:focus {
			background-color: $input-danger-focus-bg;
			border-color: $input-danger-focus-border-color;
			box-shadow: $input-danger-focus-box-shadow;
			color: $input-danger-focus-color;
		}
	}

	.form-feedback-item {
		color: $form-feedback-invalid-color;
	}

	select.form-control:not([multiple]):not([size]) {
		background-image: $input-danger-select-icon;
	}

	.input-group-inset-item {
		background-color: $input-danger-bg;
		border-color: $input-danger-border-color;
		box-shadow: $input-danger-box-shadow;
	}

	.form-control:focus ~ .input-group-inset-item {
		background-color: setter($input-danger-focus-bg, $input-danger-bg);
		border-color: setter($input-danger-focus-border-color, $input-danger-border-color);
		box-shadow: setter($input-danger-focus-box-shadow, $input-danger-box-shadow);
	}
}

.has-warning {
	label {
		color: $input-warning-label-color;
	}

	.custom-control-label,
	.form-check-label {
		color: $input-warning-checkbox-label-color;
	}

	.form-control {
		background-color: $input-warning-bg;
		border-color: $input-warning-border-color;
		box-shadow: $input-warning-box-shadow;
		color: $input-warning-color;

		&:focus {
			background-color: $input-warning-focus-bg;
			border-color: $input-warning-focus-border-color;
			box-shadow: $input-warning-focus-box-shadow;
			color: $input-warning-focus-color;
		}
	}

	.form-feedback-item {
		color: $form-feedback-warning-color;
	}

	select.form-control:not([multiple]):not([size]) {
		background-image: $input-warning-select-icon;
	}

	.input-group-inset-item {
		background-color: $input-warning-bg;
		border-color: $input-warning-border-color;
		box-shadow: $input-warning-box-shadow;
	}

	.form-control:focus ~ .input-group-inset-item {
		background-color: setter($input-warning-focus-bg, $input-warning-bg);
		border-color: setter($input-warning-focus-border-color, $input-warning-border-color);
		box-shadow: setter($input-warning-focus-box-shadow, $input-warning-box-shadow);
	}
}

.has-success {
	label {
		color: $input-success-label-color;
	}

	.custom-control-label,
	.form-check-label {
		color: $input-success-checkbox-label-color;
	}

	.form-control {
		background-color: $input-success-bg;
		border-color: $input-success-border-color;
		box-shadow: $input-success-box-shadow;
		color: $input-success-color;

		&:focus {
			background-color: $input-success-focus-bg;
			border-color: $input-success-focus-border-color;
			box-shadow: $input-success-focus-box-shadow;
			color: $input-success-focus-color;
		}
	}

	.form-feedback-item {
		color: $form-feedback-valid-color;
	}

	select.form-control:not([multiple]):not([size]) {
		background-image: $input-success-select-icon;
	}

	.input-group-inset-item {
		background-color: $input-success-bg;
		border-color: $input-success-border-color;
		box-shadow: $input-success-box-shadow;
	}

	.form-control:focus ~ .input-group-inset-item {
		background-color: setter($input-success-focus-bg, $input-success-bg);
		border-color: setter($input-success-focus-border-color, $input-success-border-color);
		box-shadow: setter($input-success-focus-box-shadow, $input-success-box-shadow);
	}
}
.lexicon-icon {
	display: inline-block;
	fill: currentColor;
	height: $lexicon-icon-size;
	margin-top: -3px;
	pointer-events: none;
	vertical-align: middle;
	width: $lexicon-icon-size;
}

.lexicon-icon-sm {
	font-size: $lexicon-icon-sm-font-size;
}

.lexicon-icon-lg {
	font-size: $lexicon-icon-lg-font-size;
}

.lexicon-icon-xl {
	font-size: $lexicon-icon-xl-font-size;
}

.order-arrow-down-active {
	.order-arrow-arrow-down {
		fill: $order-arrow-down-active-color;
	}
}

.order-arrow-up-active {
	.order-arrow-arrow-up {
		fill: $order-arrow-up-active-color;
	}
}

// Collapse Icon

a.collapse-icon {
	padding-left: $collapse-icon-padding-left;
	padding-right: $collapse-icon-padding-right;
}

.collapse-icon-closed,
.collapse-icon-open {
	.lexicon-icon {
		display: block;
	}
}

.collapse-icon {
	.collapse-icon-closed,
	.collapse-icon-open {
		bottom: $collapse-icon-position-bottom;
		height: 1em;
		left: $collapse-icon-position-left;
		position: absolute;
		right: $collapse-icon-position-right;
		top: $collapse-icon-position-top;
		width: 1em;

		.lexicon-icon {
			margin-top: 0;
		}
	}

	.collapse-icon-closed {
		display: none;
	}

	.collapse-icon-open {
		display: inline-block;
	}
}

.collapsed {
	.collapse-icon-closed {
		display: inline-block;
	}

	.collapse-icon-open {
		display: none;
	}
}

.collapse-icon-middle {
	.collapse-icon-closed,
	.collapse-icon-open {
		margin-top: 0;
		top: 50%;

		-ms-transform: translateY(-50%);
		transform: translateY(-50%);
	}
}
.input-group {
	.btn:hover {
		z-index: $zindex-input-group-hover;
	}

	.btn:focus,
	.form-control:focus {
		z-index: $zindex-input-group-focus;
	}

	.btn-unstyled {
		color: inherit;
	}
}

// Input Group Item

.input-group-item {
	display: flex;
	flex-grow: 1;
	flex-wrap: wrap;
	margin-left: 0.5rem;
	width: 1%;
	word-wrap: break-word;

	&:first-child {
		margin-left: 0;
	}

	> .btn {
		align-self: flex-start;
	}
}

.input-group-item-shrink {
	flex-grow: 0;
	width: auto;
}

// Input Group Prepend

.input-group-prepend {
	align-items: stretch;
	margin-right: -$input-border-left-width;

	+ .input-group-prepend,
	+ .input-group-append,
	+ .input-group-item:not(.input-group-append) {
		margin-left: 0;
	}

	+ .input-group-item:not(.input-group-append) .form-control {
		@include border-left-radius(0);
	}
}

.input-group > .input-group-prepend {
	&:not(:first-child) > .form-control {
		@include border-left-radius(0);
	}

	> .form-control {
		@include border-right-radius(0);
	}
}

.input-group-item:not(.input-group-prepend) + .input-group-prepend {
	.btn {
		@include border-left-radius($btn-border-radius);
	}

	.form-control,
	.input-group-text {
		@include border-left-radius($input-border-radius);
	}
}

// Input Group Append

.input-group-append {
	align-items: stretch;
	margin-left: -$input-border-right-width;
}

.input-group > .input-group-append {
	> .form-control {
		@include border-left-radius(0);
	}
}

// Input Group Prepend and Append Rounded Corners

.input-group > .input-group-prepend > .form-file .btn,
.input-group > .input-group-append:not(:last-child) > .form-file .btn,
.input-group > .input-group-append:last-child > .form-file:not(:last-child) .btn {
	@include border-right-radius(0);
}

.input-group > .input-group-append > .form-file .btn,
.input-group > .input-group-prepend:not(:first-child) > .form-file .btn,
.input-group > .input-group-prepend:first-child > .form-file:not(:first-child) .btn {
	@include border-left-radius(0);
}

// Input Group Text

.input-group-text {
	align-items: center;
	border-bottom-width: $input-border-bottom-width;
	border-left-width: $input-border-left-width;
	border-right-width: $input-border-right-width;
	border-top-width: $input-border-top-width;
	color: $input-group-addon-color;
	display: flex;
	font-weight: $input-group-addon-font-weight;
	height: $input-height;
	justify-content: center;
	min-width: $input-group-addon-min-width;
	padding-bottom: $input-group-addon-padding-y;
	padding-left: $input-group-addon-padding-x;
	padding-right: $input-group-addon-padding-x;
	padding-top: $input-group-addon-padding-y;

	@include clay-scale-component {
		height: $input-height-mobile;
	}

	label {
		color: $input-group-addon-color;
	}

	.custom-control,
	.form-check {
		margin-bottom: 0;
	}
}

.input-group-text-secondary {
	background-color: $input-group-secondary-addon-bg;
	border-color: $input-group-secondary-addon-border-color;
	border-width: $input-group-secondary-addon-border-width;
	color: $input-group-secondary-addon-color;
	z-index: 2;

	label {
		color: $input-group-secondary-addon-color;
	}
}

// Input Group Inset

.input-group-item.focus {
	@include border-radius($input-border-radius);

	box-shadow: $input-focus-box-shadow;

	.form-control,
	.form-control[readonly] ~ .input-group-inset-item,
	.input-group-inset-item {
		background-color: $input-focus-bg;
		border-color: $input-focus-border-color;
	}
}

.input-group-inset {
	flex-grow: 1;
	order: 5;
	width: 1%;

	&[readonly] {
		&:focus {
			~ .input-group-inset-item {
				background-color: $input-readonly-focus-bg;
				border-color: $input-readonly-focus-border-color;
				color: $input-readonly-focus-color;
			}
		}

		~ .input-group-inset-item {
			background-color: $input-readonly-bg;
			border-color: $input-readonly-border-color;
			color: $input-readonly-color;
			cursor: $input-readonly-cursor;
		}
	}

	&:focus {
		box-shadow: none;

		~ .input-group-inset-item {
			background-color: $input-focus-bg;
			border-color: $input-focus-border-color;
		}
	}

	&:disabled {
		~ .input-group-inset-item {
			background-color: $input-disabled-bg;
			border-color: $input-disabled-border-color;
		}
	}

	~ .form-feedback-group {
		order: 13;
	}
}

.input-group-inset-item {
	align-items: center;
	background-color: $input-bg;
	border-bottom-width: $input-border-bottom-width;
	border-color: $input-border-color;
	border-left-width: $input-border-left-width;
	border-right-width: $input-border-right-width;
	border-style: solid;
	border-top-width: $input-border-top-width;
	display: flex;
	padding-left: 5px;
	padding-right: 5px;
	transition: $input-transition;

	.btn {
		height: 75%;
		padding-bottom: 0;
		padding-top: 0;
		padding-left: ($btn-padding-x - 0.1875rem);
		padding-right: ($btn-padding-x - 0.1875rem);
	}
}

.input-group-item .input-group-inset-before.form-control {
	@include border-left-radius(0);
	@include border-right-radius($input-border-radius);

	border-left-width: 0;
	padding-left: 0;
}

.input-group-inset-item-before {
	@include border-left-radius($input-border-radius);

	border-right-width: 0;
}

.input-group-inset-item-before {
	color: $input-group-inset-item-color;
	order: 3;
}

.input-group-item .input-group-inset-after.form-control {
	@include border-right-radius(0);

	border-right-width: 0;
	padding-right: 0;
}

.input-group-inset-item-after {
	@include border-right-radius($input-border-radius);

	border-left-width: 0;
	color: $input-group-inset-item-color;
	order: 9;
}

// Input Group Stacked

.input-group-stacked-sm-down {
	@include clay-input-group-stacked($input-group-stacked-sm-down);
}

// Input Group Sizes

.input-group-lg {
	.input-group-item {
		.btn {
			font-size: $btn-font-size-lg;

			@include clay-scale-component {
				font-size: $btn-font-size-lg-mobile;
				padding-bottom: $btn-padding-y-lg-mobile;
				padding-left: $btn-padding-x-lg-mobile;
				padding-right: $btn-padding-x-lg-mobile;
				padding-top: $btn-padding-y-lg-mobile;
			}

			.inline-item {
				font-size: $btn-inline-item-font-size-lg;
			}

			.btn-section {
				font-size: $btn-section-font-size-lg;
			}
		}

		.btn-monospaced {
			height: $btn-monospaced-size-lg;
			line-height: 1;
			padding-bottom: $btn-monospaced-padding-y-lg;
			padding-left: $btn-monospaced-padding-x-lg;
			padding-right: $btn-monospaced-padding-x-lg;
			padding-top: $btn-monospaced-padding-y-lg;
			width: $btn-monospaced-size-lg;

			@include clay-scale-component {
				height: $btn-monospaced-size-lg-mobile;
				width: $btn-monospaced-size-lg-mobile;
			}
		}

		.form-control,
		.form-file .btn {
			font-size: $input-font-size-lg;
			height: $input-height-lg;
			line-height: $input-line-height-lg;
			padding-bottom: $input-padding-y-lg;
			padding-left: $input-padding-x-lg;
			padding-right: $input-padding-x-lg;
			padding-top: $input-padding-y-lg;

			@include clay-scale-component {
				height: $input-height-lg-mobile;
			}
		}

		.form-control-plaintext {
			font-size: $input-font-size-lg;
			height: $input-height-lg;
			line-height: $input-line-height-lg;
			padding-bottom: $input-padding-y-lg;
			padding-top: $input-padding-y-lg;

			@include clay-scale-component {
				height: $input-height-lg-mobile;
			}
		}

		.input-group-text {
			font-size: $input-font-size-lg;
			height: $input-height-lg;
			min-width: $input-group-addon-min-width-lg;
			padding-bottom: $input-group-addon-padding-y-lg;
			padding-left: $input-group-addon-padding-x-lg;
			padding-right: $input-group-addon-padding-x-lg;
			padding-top: $input-group-addon-padding-y-lg;
		}
	}

	.input-group-inset-item {
		.btn {
			font-size: $btn-font-size-lg;

			@include clay-scale-component {
				font-size: $btn-font-size-lg-mobile;
			}
		}

		.form-file {
			height: 75%;

			.btn {
				font-size: $btn-font-size-lg;
				height: 100%;
				padding-bottom: 0;
				padding-top: 0;
				padding-left: ($btn-padding-x - 0.1875rem);
				padding-right: ($btn-padding-x - 0.1875rem);

				@include clay-scale-component {
					font-size: $btn-font-size-lg-mobile;
				}
			}
		}
	}
}

.input-group-sm {
	.input-group-item {
		.btn {
			font-size: $btn-font-size-sm;

			@include clay-scale-component {
				font-size: $btn-font-size-sm-mobile;
				padding-bottom: $btn-padding-y-sm-mobile;
				padding-left: $btn-padding-x-sm-mobile;
				padding-right: $btn-padding-x-sm-mobile;
				padding-top: $btn-padding-y-sm-mobile;
			}

			.inline-item {
				font-size: $btn-inline-item-font-size-sm;
			}

			.btn-section {
				font-size: $btn-section-font-size-sm;
			}
		}

		.btn-monospaced {
			height: $btn-monospaced-size-sm;
			line-height: 1;
			padding-bottom: $btn-monospaced-padding-y-sm;
			padding-left: $btn-monospaced-padding-x-sm;
			padding-right: $btn-monospaced-padding-x-sm;
			padding-top: $btn-monospaced-padding-y-sm;
			width: $btn-monospaced-size-sm;

			@include clay-scale-component {
				height: $btn-monospaced-size-sm-mobile;
				width: $btn-monospaced-size-sm-mobile;
			}
		}

		.form-control,
		.form-file .btn {
			font-size: $input-font-size-sm;
			height: $input-height-sm;
			line-height: $input-line-height-sm;
			padding-bottom: $input-padding-y-sm;
			padding-left: $input-padding-x-sm;
			padding-right: $input-padding-x-sm;
			padding-top: $input-padding-y-sm;

			@include clay-scale-component {
				height: $input-height-sm-mobile;
			}
		}

		.form-control-plaintext {
			font-size: $input-font-size-sm;
			height: $input-height-sm;
			line-height: $input-line-height-sm;
			padding-bottom: $input-padding-y-sm;
			padding-top: $input-padding-y-sm;

			@include clay-scale-component {
				height: $input-height-sm-mobile;
			}
		}

		.input-group-text {
			font-size: $input-font-size-sm;
			height: $input-height-sm;
			min-width: $input-group-addon-min-width-sm;
			padding-bottom: $input-group-addon-padding-y-sm;
			padding-left: $input-group-addon-padding-x-sm;
			padding-right: $input-group-addon-padding-x-sm;
			padding-top: $input-group-addon-padding-y-sm;
		}
	}

	.input-group-inset-item {
		.btn {
			font-size: $btn-font-size-sm;

			@include clay-scale-component {
				font-size: $btn-font-size-sm-mobile;
			}
		}

		.form-file {
			height: 75%;

			.btn {
				font-size: $btn-font-size-sm;
				height: 100%;
				padding-bottom: 0;
				padding-top: 0;
				padding-left: ($btn-padding-x - 0.1875rem);
				padding-right: ($btn-padding-x - 0.1875rem);

				@include clay-scale-component {
					font-size: $btn-font-size-sm-mobile;
				}
			}
		}
	}
}

// Input Group Password

.input-group-password {
	.form-control[type="text"] ~ .input-group-inset-item {
		.input-password-label {
			display: none;
		}
	}

	.form-control[type="password"] ~ .input-group-inset-item {
		.input-text-label {
			display: none;
		}
	}
}
.list-group {
	@include border-radius($list-group-border-radius);
	@include box-shadow($list-group-box-shadow);

	color: $list-group-color;
	font-size: $list-group-font-size;
	margin-bottom: $list-group-margin-bottom;
	margin-top: $list-group-margin-top;

	.list-group {
		@if ($list-group-box-shadow != null) {
			@include box-shadow(none);
		}
	}
}

.list-group-bordered {
	.list-group-item-flex {
		padding: 0;

		&.active {
			.autofit-col {
				border-color: $list-group-active-border-color;
			}
		}
	}

	.autofit-col {
		border-left: $list-group-border-width solid $list-group-border-color;
		border-right: $list-group-border-width solid $list-group-border-color;
		margin-left: -$list-group-border-width;
		padding: $list-group-item-padding-y $list-group-item-padding-x;

		&:first-child,
		&:last-child {
			border-left-width: 0;
			border-right-width: 0;
			margin-left: 0;
		}
	}
}

// List Group Header

.list-group-header {
	align-items: center;
	background-color: $list-group-header-bg;
	border: $list-group-border-width solid $list-group-border-color;
	display: flex;
	justify-content: space-between;
	margin-bottom: -$list-group-border-width;
	padding: $list-group-header-padding-y $list-group-header-padding-x;

	&:first-child {
		@include border-top-radius($list-group-border-radius);
	}

	&:last-child {
		@include border-bottom-radius($list-group-border-radius);
	}
}

.list-group-header-title {
	@include clay-text-typography($list-group-header-title);
}

// List Group Title

.list-group-title {
	@include clay-text-typography($list-group-title);
}

// List Group Subtitle

.list-group-subtitle {
	@include clay-text-typography($list-group-subtitle);
}

// List Group Text

.list-group-text {
	@include clay-text-typography($list-group-text);
}

// List Group Subtext

.list-group-subtext {
	@include clay-text-typography($list-group-subtext);
}

// List Group Details

.list-group-detail {
	margin-bottom: $list-group-detail-margin-bottom;
	margin-top: $list-group-detail-margin-top;
}

// List Group Item

.show-dropdown-action-on-active {
	.list-group-item.active {
		.dropdown-action {
			.dropdown-menu {
				background-color: $list-group-active-bg;
			}

			.dropdown-item {
				color: $list-group-active-color;
			}
		}
	}
}

.list-group-item {
	&.active {
		&:focus,
		&.focus {
			z-index: 2;
		}

		.dropdown-action .dropdown-toggle,
		.list-group-link {
			color: $list-group-active-color;
		}

		.list-group-title,
		a.list-group-title,
		.list-group-title a {
			color: $list-group-title-active-color;
		}

		.list-group-text,
		a.list-group-text,
		.list-group-text a {
			color: $list-group-text-active-color;
		}

		.list-group-subtext,
		a.list-group-subtext,
		.list-group-subtext a {
			color: $list-group-subtext-active-color;
		}

		.list-group-link {
			color: $list-group-link-active-color;
		}
	}
}

.list-group-item-flex {
	display: flex;
	padding-left: $list-group-item-padding-x / 2;
	padding-right: $list-group-item-padding-x / 2;

	.autofit-col {
		justify-content: $list-group-item-flex-align-items;
		padding-left: $list-group-item-padding-x / 2;
		padding-right: $list-group-item-padding-x / 2;

		.custom-control:only-child {
			margin-bottom: 0;
			margin-top: $list-group-item-flex-offset-top;

			.custom-control-input,
			.custom-control-label::before,
			.custom-control-label::after {
				margin-top: $list-group-item-flex-checkbox-offset-top;
			}
		}

		.form-check:only-child {
			margin-bottom: 0;
			margin-top: $list-group-item-flex-offset-top;
			padding-top: $list-group-item-flex-checkbox-offset-top;
		}

		.sticker:only-child {
			margin-top: $list-group-item-flex-offset-top;
		}

		.list-group-title:only-child {
			align-items: center;
			display: flex;
			height: 32px;
			margin-top: 0;
		}

		.dropdown-action {
			margin-top: $list-group-item-flex-offset-top;
		}

		.quick-action-item {
			margin-top: $list-group-item-flex-offset-top;
		}
	}
}

.list-group-item-action:focus {
	z-index: 1;
}

// List Group Link

.list-group-link {
	color: $list-group-link-color;

	&:hover,
	&:focus {
		color: $list-group-link-hover-color;
	}
}

// List Group Flush

%list-group-flush {
	.list-group-item {
		border-left-width: 0;

		@include border-radius(0);

		border-right-width: 0;

		> .autofit-col {
			&:first-child {
				padding-left: 0;
			}

			&:last-child {
				padding-right: 0;
			}
		}
	}
}

%list-group-flush-vertical {
	.list-group-item {
		border-left-width: 0;

		@include border-radius(0);

		border-right-width: 0;

		> .autofit-col {
			&:first-child {
				padding-left: 0;
			}

			&:last-child {
				padding-right: 0;
			}
		}
	}

	&:first-child {
		.list-group-item:first-child {
			border-top-width: 0;
		}
	}

	&:last-child {
		.list-group-item:last-child {
			border-bottom-width: 0;
		}
	}
}

// Show Quick Action

.show-quick-actions-on-hover {
	.list-group-item:not(.active) {
		&:hover {
			.quick-action-menu {
				display: flex;
			}
		}
	}

	.focus:not(.active) {
		.quick-action-menu {
			display: flex;
		}
	}
}

.list-group {
	.quick-action-menu {
		align-items: $list-group-item-flex-align-items;
		background-color: $list-group-bg;
		margin-bottom: -$list-group-item-padding-y;
		margin-top: -$list-group-item-padding-y;
		padding-bottom: $list-group-item-padding-y;
		padding-top: $list-group-item-padding-y;
	}
}

.list-group-bordered .quick-action-menu {
	margin-bottom: 0;
	margin-top: 0;
	padding-bottom: $list-group-item-padding-y;
	padding-top: $list-group-item-padding-y;
}

.list-group-item-flex.active {
	.quick-action-menu {
		background-color: $list-group-active-bg;
	}

	.quick-action-item {
		color: $list-group-active-color;
	}
}

// List Group Notification

.list-group-notification {
	&.list-group-bordered {
		.quick-action-menu {
			margin-bottom: $list-group-notification-item-border-bottom-width;
			margin-top: $list-group-notification-item-border-top-width;
		}
	}

	.list-group-item {
		border-width: 0;

		@include clay-list-group-notification-item-variant($list-group-notification-item);
	}

	.list-group-item-primary {
		@include clay-list-group-notification-item-variant($list-group-notification-item-primary);
	}

	.quick-action-menu {
		margin-bottom: -$list-group-item-padding-y + $list-group-notification-item-border-bottom-width;
		margin-top: -$list-group-item-padding-y + $list-group-notification-item-border-top-width;
	}

	.autofit-col .quick-action-item {
		margin-top: $list-group-notification-item-border-top-width - $list-group-item-flex-offset-top;
	}
}
.modal-content {
	@if not ($modal-content-border-radius == $border-radius-lg) {
		@include border-radius($modal-content-border-radius);
	}

	overflow: hidden;
}

.modal-header {
	align-items: center;
	background-color: $modal-header-bg;
	border-color: $modal-header-border-color;
	color: $modal-header-color;
	flex-shrink: 0;
	height: $modal-header-height;
	padding-bottom: 0;
	padding-top: 0;

	@include clay-scale-component {
		height: $modal-header-height-mobile;
	}

	.close {
		margin: 0;
		padding: 0;
	}
}

.modal-body {
	background-color: $modal-body-bg;
	color: $modal-body-color;

	&.inline-scroller {
		-webkit-overflow-scrolling: touch;
		overflow: auto;
		padding: $modal-inner-padding;
	}
}

.modal-body-flush {
	padding: 0;
}

.modal-footer {
	background-color: $modal-footer-bg;

	@include box-shadow($modal-footer-box-shadow);

	color: $modal-footer-color;
	flex-shrink: 0;
	flex-wrap: wrap;
	height: $modal-footer-height;
	padding-bottom: $modal-footer-padding-y;
	padding-left: $modal-footer-padding-x;
	padding-right: $modal-footer-padding-x;
	padding-top: $modal-footer-padding-y;

	@include clay-scale-component {
		height: $modal-footer-height-mobile;
	}
}

// Modal Item

.modal-item-first,
.modal-item,
.modal-item-last {
	padding-bottom: $modal-item-padding-y;
	padding-left: $modal-item-padding-x;
	padding-right: $modal-item-padding-x;
	padding-top: $modal-item-padding-y;
}

.modal-item-first {
	margin-right: auto;
}

.modal-item {
	flex-grow: 1;
}

.modal-footer {
	> .modal-item-first {
		margin-right: auto;
	}
}

// Modal Title

.modal-title {
	font-size: $modal-title-font-size;
	font-weight: $modal-title-font-weight;
	flex-grow: 1;
	text-align: $modal-title-text-align;

	@include text-truncate;

	@include clay-scale-component {
		font-size: $modal-title-font-size-mobile;
	}
}

.modal-title-indicator {
	display: inline-block;
	font-size: $modal-title-indicator-font-size;
	margin-right: $modal-title-indicator-spacer-x;
	margin-top: -0.2em;
	vertical-align: middle;
}

// Modal Close

.modal .close {
	&:first-child {
		margin-left: -$modal-close-spacer-x;
	}

	&:last-child {
		margin-right: -$modal-close-spacer-x;
	}
}

.close + .modal-title {
	margin-left: $modal-close-spacer-x;
}

.modal-title + .close {
	margin-right: $modal-close-spacer-x;
}

// Modal Iframe

.modal-body-iframe {
	height: 160px;
	padding: 0;

	iframe {
		border-width: 0;
		height: 100%;
		position: absolute;
		width: 100%;
	}
}

// Modal Full Screen

.modal-full-screen {
	bottom: 48px;
	left: 48px;
	margin: 0;
	max-width: none;
	position: absolute;
	right: 48px;
	top: 48px;

	@include clay-scale-component {
		bottom: 0;
		left: 0;
		right: 0;
		top: 0;
	}

	.modal-content {
		border-color: $modal-content-border-color;

		@include border-radius($modal-content-border-radius);

		border-width: $modal-content-border-width;
		height: 100%;

		@include clay-scale-component {
			@include border-radius(0);

			border-width: 0;
		}
	}

	.modal-body {
		overflow: auto;
	}
}

// Modal Responsive Full Screen

.modal-full-screen-sm-down {
	@include media-breakpoint-down(sm) {
		bottom: 0;
		left: 0;
		margin: 0;
		max-width: none;
		position: absolute;
		right: 0;
		top: 0;

		.modal-body {
			overflow: auto;
		}

		.modal-content {
			@include border-radius(0);

			border-width: 0;
			height: 100%;
		}
	}
}

// Modal Variants

@each $color, $value in $modal-palette {
	.modal-#{$color} {
		@include clay-modal-variant($value);
	}
}
.multi-step-nav {
	align-items: flex-end;
	display: flex;
	flex-wrap: wrap;
	list-style: none;
	margin-bottom: $multi-step-nav-margin-bottom;
	padding: $multi-step-nav-padding-y $multi-step-nav-padding-x;
	position: relative;
}

.multi-step-indicator-label-bottom {
	.multi-step-item {
		padding-bottom: $multi-step-indicator-label-font-size * $line-height-base;
	}

	.multi-step-indicator-label {
		top: $multi-step-icon-size;
	}
}

.multi-step-indicator-label-top {
	.multi-step-item {
		padding-top: $multi-step-indicator-label-font-size * $line-height-base;
	}

	.multi-step-indicator-label {
		bottom: $multi-step-icon-size + $multi-step-divider-height;
	}
}

.multi-step-title-center {
	.multi-step-title {
		margin-left: $multi-step-icon-size / 2;
		max-width: $multi-step-title-max-width;
		overflow: hidden;
		position: relative;
		text-align: center;
		text-overflow: ellipsis;
		transform: translateX(-50%);
		white-space: nowrap;
		width: auto;
	}
}

.multi-step-item {
	margin-bottom: $multi-step-item-margin-bottom;
	position: relative;

	&.active {
		.multi-step-icon {
			background-color: $multi-step-icon-active-bg;
			background-image: $multi-step-icon-active-bg-image;
			background-position: $multi-step-icon-active-bg-position;
			background-repeat: no-repeat;
			background-size: $multi-step-icon-active-bg-size;
			color: $multi-step-icon-active-color;

			@if ($multi-step-icon-active-bg-image) {
				&[data-multi-step-icon] {
					&:before {
						content: normal;
					}
				}
			}
		}

		.multi-step-divider {
			background-color: $multi-step-divider-active-bg;
		}
	}

	&.active.complete {
		.multi-step-icon {
			background-color: $multi-step-icon-active-bg;
			color: $multi-step-icon-active-color;
		}
	}

	&.complete {
		.dropdown .multi-step-icon {
			&, &:active {
				background-image: none;
			}
		}

		.multi-step-icon {
			background-color: $multi-step-icon-complete-bg;
			color: $multi-step-icon-complete-color;

			@if ($multi-step-icon-complete-bg-image) {
				background-image: $multi-step-icon-complete-bg-image;
				background-position: $multi-step-icon-complete-bg-position;
				background-repeat: no-repeat;
				background-size: $multi-step-icon-complete-bg-size;

				&[data-multi-step-icon] {
					&:before {
						content: normal;
					}
				}

				// BS4 resets background-image in buttons https://github.com/twbs/bootstrap/issues/23353
				&:active {
					background-image: $multi-step-icon-complete-bg-image;
				}
			}
		}

		.multi-step-divider {
			background-color: $multi-step-divider-complete-bg;
		}
	}

	&.disabled {
		.multi-step-title {
			color: $multi-step-title-disabled-color;
		}

		.multi-step-icon {
			background-color: $multi-step-icon-disabled-bg;
			background-image: $multi-step-icon-disabled-bg-image;
			background-position: $multi-step-icon-disabled-bg-position;
			background-repeat: no-repeat;
			background-size: $multi-step-icon-disabled-bg-size;
			color: $multi-step-icon-disabled-color;
			cursor: $multi-step-icon-disabled-cursor;

			@if ($multi-step-icon-disabled-bg-image) {
				&[data-multi-step-icon] {
					&:before {
						content: normal;
					}
				}
			}
		}

		.multi-step-indicator-label {
			color: $multi-step-indicator-label-disabled-color;
		}

		.multi-step-divider {
			background-color: $multi-step-divider-disabled-bg;
		}
	}
}

.multi-step-title {
	color: $multi-step-title-color;
	font-size: $multi-step-title-font-size;
	font-weight: $multi-step-title-font-weight;
	line-height: normal;
	margin-bottom: $multi-step-title-margin-bottom;
	word-wrap: break-word;
}

.multi-step-item-expand {
	flex-grow: 1;
	width: $multi-step-item-width;
}

.multi-step-divider {
	background-color: $multi-step-divider-bg;
	height: $multi-step-divider-height;
	margin-left: $multi-step-icon-size;
	margin-top: -$multi-step-divider-height;
	position: relative;
	top: $multi-step-divider-top;
}

.multi-step-indicator {
	position: relative;
	width: $multi-step-indicator-width;

	.dropdown-item-indicator,
	.dropdown-item-indicator-start,
	.dropdown-item-indicator-end {
		display: none;
	}

	.complete {
		.dropdown-item-indicator,
		.dropdown-item-indicator-start,
		.dropdown-item-indicator-end {
			display: block;
		}
	}

	.multi-step-indicator-label {
		color: $multi-step-indicator-label-color;
		font-size: $multi-step-indicator-label-font-size;
		font-weight: $multi-step-indicator-label-font-weight;
		left: 50%;
		max-width: $multi-step-indicator-label-max-width;
		position: absolute;
		transform: translateX(-50%);

		@include text-truncate;
	}
}

button.multi-step-icon {
	cursor: pointer;
	border-width: 0;
	padding: 0;

	&:hover,
	&:focus {
		background-color: $multi-step-icon-hover-bg;
		color: $multi-step-icon-hover-color;
		text-decoration: $multi-step-icon-hover-text-decoration;
	}
}

a.multi-step-icon {
	&:hover,
	&:focus {
		background-color: $multi-step-icon-hover-bg;
		color: $multi-step-icon-hover-color;
		text-decoration: $multi-step-icon-hover-text-decoration;
	}
}

.multi-step-icon {
	align-items: center;
	background-color: $multi-step-icon-bg;
	border-radius: $multi-step-icon-border-radius;
	color: $multi-step-icon-color;
	display: flex;
	font-size: $multi-step-icon-font-size;
	font-weight: $multi-step-icon-font-weight;
	justify-content: center;
	height: $multi-step-icon-size;
	width: $multi-step-icon-size;

	&[data-multi-step-icon]:before {
		content: attr(data-multi-step-icon);
		height: $multi-step-icon-size;
		line-height: $multi-step-icon-size;
		text-align: center;
		width: $multi-step-icon-size;
	}

	.btn-link {
		vertical-align: baseline;
	}

	.lexicon-icon {
		height: $multi-step-icon-font-size;
		margin-top: 0;
		width: $multi-step-icon-font-size;
	}
}

.multi-step-item-fixed-width {
	&.multi-step-item,
	.multi-step-item-expand {
		flex-grow: 0;
		width: $multi-step-item-fixed-width;
	}
}

.multi-step-nav-collapse-sm {
	@include media-breakpoint-down(sm) {
		flex-wrap: nowrap;

		&.multi-step-indicator-label-top {
			.multi-step-indicator-label {
				bottom: auto;
				top: 0;
			}
		}

		&.multi-step-indicator-label-bottom {
			.multi-step-indicator-label {
				bottom: 0;
				top: auto;
			}
		}

		&.multi-step-title-center {
			.multi-step-title {
				margin-left: 0;
				max-width: none;
				transform: none;
			}
		}

		.active {
			&.multi-step-item {
				position: static;
			}

			.multi-step-title {
				display: block;
				left: 0;
				position: absolute;
				right: 0;
				text-align: center;
				top: 0;

				+ .multi-step-indicator {
					margin-top: calc(1rem * #{$line-height-base});
				}
			}

			.multi-step-indicator {
				position: static;
			}

			.multi-step-indicator-label {
				display: block;
				left: 0;
				max-width: none;
				position: absolute;
				right: 0;
				text-align: center;
				transform: none;
				width: auto;
			}
		}

		.multi-step-item {
			margin-bottom: 0;
			min-width: $multi-step-icon-size;
			padding-top: $multi-step-title-font-size + $multi-step-title-margin-bottom + ($multi-step-divider-height / 2);
		}

		.multi-step-title {
			display: none;
		}

		.multi-step-indicator-label {
			display: none;
		}
	}
}
.nav {
	font-size: $nav-font-size;
}

.nav-btn.btn-unstyled,
.nav-link {
	position: relative;

	&:focus {
		z-index: 1;
	}

	&.disabled {
		color: $nav-link-disabled-color;
		cursor: $nav-link-disabled-cursor;
	}
}

// Nav Btn

.nav-btn {
	align-items: center;
	display: flex;
	height: $nav-item-monospaced-size;
	justify-content: center;
	line-height: $line-height-base;
	margin: $nav-btn-margin-y $nav-btn-margin-x;
	min-width: $nav-item-monospaced-size;
	padding-bottom: $nav-btn-padding-y;
	padding-left: $nav-btn-padding-x;
	padding-right: $nav-btn-padding-x;
	padding-top: $nav-btn-padding-y;
	text-align: center;
	width: auto;

	&.btn-link {
		margin-left: 0;
		margin-right: 0;
	}

	.lexicon-icon {
		margin-top: 0;
	}
}

.nav-btn,
.nav-link {
	&.disabled {
		opacity: 1;
	}
}

.nav-link.btn-unstyled {
	padding: $nav-link-padding-y $nav-link-padding-x;
}

// Nav Item Monospaced

.nav-btn-monospaced {
	padding: 0;
}

.nav-link-monospaced {
	align-items: center;
	display: flex;
	height: $nav-item-monospaced-size;
	justify-content: center;
	margin: $nav-btn-margin-y $nav-btn-margin-x;
	min-width: $nav-item-monospaced-size;
	padding: 0;

	.lexicon-icon {
		margin-top: 0;
	}
}

// Nav Item

.nav-item {
	word-wrap: break-word;
}

.nav-item[class*='col-'] {
	padding-left: 0;
	padding-right: 0;
	text-align: center;
}

.nav-text-truncate {
	display: inline-block;
	margin-bottom: -6px;
	max-width: 100%;

	@include text-truncate;
}

.dropdown-toggle .nav-text-truncate {
	max-width: calc(100% - 24px);
}

// Nav Form

.nav-form {
	padding-bottom: $nav-stacked-nav-form-padding-bottom;
	padding-left: $nav-stacked-nav-form-padding-left;
	padding-right: $nav-stacked-nav-form-padding-right;
	padding-top: $nav-stacked-nav-form-padding-top;
}

.nav .nav-form {
	padding-bottom: $nav-form-padding-bottom;
	padding-left: $nav-form-padding-left;
	padding-right: $nav-form-padding-right;
	padding-top: $nav-form-padding-top;
}

// Nav Stacked

.nav-stacked {
	display: block;

	.nav-form {
		padding-bottom: $nav-stacked-nav-form-padding-bottom;
		padding-left: $nav-stacked-nav-form-padding-left;
		padding-right: $nav-stacked-nav-form-padding-right;
		padding-top: $nav-stacked-nav-form-padding-top;
	}
}

// Nav Unstyled

.nav-unstyled {
	flex-wrap: nowrap;

	.nav-btn {
		margin: 0 0.25rem;
		padding: 0 0.25rem;
	}

	.nav-link {
		line-height: $nav-item-monospaced-size;
		padding: 0 0.25rem;
	}

	.nav-link-monospaced {
		margin: 0 0.25rem;
	}
}

// Nav Nested

.nav-nested {
	flex-direction: column;
	flex-wrap: nowrap;

	@include clay-nav-nested($nav-nested-spacer-x);
}

.nav-nested-margins {
	flex-direction: column;
	flex-wrap: nowrap;

	> li .nav > li {
		margin-left: $nav-nested-margins-spacer-x;
	}
}

// Nav Tabs

.nav-tabs {
	font-size: $nav-tabs-font-size;

	.nav-item.show .nav-link {
		background-color: $nav-tabs-link-show-bg;
		border-color: $nav-tabs-link-show-border-color;
		color: $nav-tabs-link-show-color;
	}

	.nav-link {
		color: $nav-tabs-link-color;
		padding-bottom: $nav-tabs-link-padding-y;
		padding-left: $nav-tabs-link-padding-x;
		padding-right: $nav-tabs-link-padding-x;
		padding-top: $nav-tabs-link-padding-y;
		white-space: nowrap;
	}

	+ .tab-content {
		.tab-pane {
			background-color: $nav-tabs-tab-pane-bg;

			@include border-radius($nav-tabs-tab-pane-border-radius);

			padding: $nav-tabs-tab-pane-padding;

			&.active:first-child {
				border-top-left-radius: 0;
			}
		}
	}
}

.dropdown-item[data-toggle="tab"] {
	.dropdown-item-indicator,
	.dropdown-item-indicator-start,
	.dropdown-item-indicator-end {
		display: none;
	}

	&.active {
		.dropdown-item-indicator,
		.dropdown-item-indicator-start,
		.dropdown-item-indicator-end {
			display: block;
		}
	}
}

// Nav Underline

@each $value in $nav-underline-link-highlight-palette {
	$index: index($nav-underline-link-highlight-palette, $value);

	.nav-underline .nav-item:nth-of-type(#{$index}n + 0) {
		.nav-link::after {
			background-color: nth($nav-underline-link-highlight-palette, $index);
		}
	}
}

.nav-underline {
	font-size: $nav-underline-font-size;

	.nav-link {
		color: $nav-underline-link-color;
		padding: $nav-underline-link-padding-y $nav-underline-link-padding-x;

		&:hover,
		&:focus {
			color: $nav-underline-link-hover-color;
		}

		&:after {
			bottom: $nav-underline-link-highlight-bottom;
			content: $nav-underline-link-highlight-content;
			display: block;
			height: $nav-underline-link-highlight-height;
			position: absolute;
			left: $nav-underline-link-highlight-left;
			right: $nav-underline-link-highlight-right;
			top: $nav-underline-link-highlight-top;
			width: auto;
		}
	}

	.nav-item .nav-link.active:after {
		background-color: $nav-underline-link-active-highlight;
	}

	.nav-link.active,
	.nav-item.show .nav-link {
		color: $nav-underline-link-active-color;

		&:after {
			@if not ($nav-underline-link-active-content == $nav-underline-link-highlight-content) {
				content: $nav-underline-link-active-content;
			}

			@if not ($nav-underline-link-active-highlight-height == $nav-underline-link-highlight-height) {
				height: $nav-underline-link-active-highlight-height;
			}
		}
	}

	.nav-item .nav-link.disabled:after {
		background-color: $nav-underline-link-disabled-highlight;
	}

	.nav-link.disabled {
		color: $nav-underline-link-disabled-color;
	}
}
.menubar {
	position: relative;
}

.menubar-toggler {
	@extend %btn-unstyled;

	display: none;
}

// Menubar Vertical MD

.menubar-vertical-expand-md {
	@include clay-menubar-vertical-expand($menubar-vertical-expand-md);

	&.menubar-transparent {
		@include clay-menubar-vertical-variant($menubar-vertical-transparent-md);
	}
}

// Menubar Vertical LG

.menubar-vertical-expand-lg {
	@include clay-menubar-vertical-expand($menubar-vertical-expand-lg);

	&.menubar-transparent {
		@include clay-menubar-vertical-variant($menubar-vertical-transparent-lg);
	}
}
// Navbar

.navbar {
	border-width: 0;
	font-size: $navbar-font-size;

	.container,
	.container-fluid {
		display: flex;
		flex-wrap: wrap;
		justify-content: space-between;
	}
}

.navbar-nowrap {
	flex-wrap: nowrap;

	.container,
	.container-fluid,
	.navbar-nav {
		flex-wrap: nowrap !important;
	}

	.navbar-text {
		min-width: 0;
		white-space: nowrap;
	}
}

.navbar-nav,
.navbar-form {
	.dropdown-menu-right {
		left: auto;
		right: 0;
	}
}

.navbar-nav {
	flex-direction: row;

	.dropdown-menu {
		position: absolute;
	}

	.nav-link {
		padding-left: $navbar-nav-link-padding-x;
		padding-right: $navbar-nav-link-padding-x;
	}
}

.navbar-nav-expand {
	flex-grow: 1;
	min-width: 0;
}

.navbar-nav-last {
	margin-left: auto;
}

.navbar-nav .nav-item {
	word-wrap: normal;

	> .custom-control,
	> .form-check {
		margin-bottom: 0;
		margin-left: $navbar-nav-link-padding-x;
		margin-right: $navbar-nav-link-padding-x;
	}
}

.nav-item-expand {
	flex-grow: 1;
	min-width: 0;
}

.nav-item-shrink {
	min-width: 0;
}

.navbar-title {
	font-size: $navbar-title-font-size;
	font-weight: $navbar-title-font-weight;
	margin-bottom: $navbar-title-margin-bottom;
	text-transform: $navbar-title-text-transform;
}

.navbar-text {
	padding-left: 0.5rem;
	padding-right: 0.5rem;
}

.navbar-collapse {
	max-width: 100%;

	.navbar-nav {
		flex-direction: column;
	}

	.dropdown-toggle .navbar-text-truncate {
		max-width: calc(100% - #{$navbar-text-truncate-spacer-right});
	}
}

.navbar-text-truncate {
	display: inline-block;
	max-width: 100%;
	pointer-events: none;

	@include text-truncate;

	vertical-align: bottom;
}

// Navbar Toggler

.navbar-toggler {
	&:focus {
		z-index: $zindex-navbar-toggler-focus;
	}

	&:not(:disabled):not(.disabled) {
		cursor: $navbar-toggler-cursor;
	}
}

.navbar-toggler-link {
	align-items: center;
	display: flex;
	border-width: 0;
	line-height: $line-height-base;
	max-width: 100%;
	padding: $navbar-brand-padding-y $navbar-nav-link-padding-x;
	position: relative;

	.lexicon-icon {
		min-width: 1em;
		margin-left: 3px;
		margin-top: 0;
	}
}

// Navbar Brand

.navbar-brand {
	margin-right: 0;
	max-width: calc(100% - 72px);
	padding-left: $navbar-nav-link-padding-x;
	padding-right: $navbar-nav-link-padding-x;
}

// Navbar Form

.navbar-form {
	align-items: center;
	display: flex;
	padding-left: $navbar-nav-link-padding-x;
	padding-right: $navbar-nav-link-padding-x;

	> form {
		width: 100%;
	}
}

.navbar-form-autofit {
	flex-basis: 100px;
	flex-grow: 1;

	form {
		display: flex;
		width: 100%;
	}
}

// Navbar Overlay

.navbar-overlay {
	background-color: $body-bg;
}

// Navbar Display Utilities

.navbar-breakpoint-d-block,
.navbar-breakpoint-d-inline-block,
.navbar-breakpoint-d-flex {
	display: none !important;
}

// Navbar Expand

.navbar-expand {
	flex-wrap: wrap;
	justify-content: space-between;

	.navbar-nav {
		flex-wrap: wrap;
	}

	@each $breakpoint in map-keys($grid-breakpoints) {
		$next: breakpoint-next($breakpoint, $grid-breakpoints);
		$infix: breakpoint-infix($next, $grid-breakpoints);

		&#{$infix} { // .navbar-expand, sm, md, lg, xl
			justify-content: space-between;

			.nav-item {
				align-items: center;
				display: flex;
			}

			.nav-item .navbar-text-truncate {
				max-width: $navbar-text-truncate-max-width;
			}

			.container,
			.container-fluid {
				display: flex;
				flex-wrap: wrap;
				justify-content: space-between;
				padding-left: $grid-gutter-width / 2;
				padding-right: $grid-gutter-width / 2;
			}

			.navbar-collapse {
				.container,
				.container-fluid {
					padding-left: 0;
					padding-right: 0;
				}
			}

			@if not ($infix == '') { // .navbar-expand-sm, md, lg, xl
				@include media-breakpoint-down($breakpoint) {
					&.navbar-collapse-absolute {
						.navbar-collapse {
							left: 0;
							padding: 0 $navbar-padding-x;
							position: absolute;
							right: 0;
							top: 100%;
							z-index: $zindex-navbar-collapse-absolute;

							.container,
							.container-fluid {
								padding-left: $grid-gutter-width / 2;
								padding-right: $grid-gutter-width / 2;
							}

							.navbar-nav,
							.navbar-form {
								&:last-child {
									padding-bottom: $navbar-padding-y;
								}
							}
						}
					}

					.navbar-collapse {
						.container,
						.container-fluid {
							display: block;
							padding-left: 0;
							padding-right: 0;
						}

						.nav-item {
							display: block;
						}

						.navbar-text-truncate {
							max-width: 100%;
						}

						.navbar-nav {
							.dropdown-toggle .navbar-text-truncate {
								max-width: calc(100% - #{$navbar-text-truncate-spacer-right});
							}

							.dropdown-divider {
								margin-left: -$navbar-padding-x;
								margin-right: -$navbar-padding-x;
							}

							.dropdown-item {
								&:hover,
								&:focus {
									background-color: transparent;
								}

								&.active {
									background-color: transparent;
								}
							}

							.dropdown-menu {
								background-color: transparent;
								border-width: 0;
								box-shadow: none;
								margin: 0;
								max-height: none;
								max-width: none;
								overflow: visible;
								padding: 0;
								position: static;
							}
						}
					}

					.show-dropdown-on-collapse {
						.dropdown-header,
						.dropdown-item {
							padding: $nav-link-padding-y $navbar-nav-link-padding-x;
						}

						.dropdown-menu {
							display: block;
						}

						.dropdown-toggle {
							display: none;
						}
					}

					.navbar-breakpoint-down-d-block {
						display: block !important;
					}

					.navbar-breakpoint-down-d-inline-block {
						display: inline-block !important;
					}

					.navbar-breakpoint-down-d-flex {
						display: flex !important;
					}

					.navbar-breakpoint-down-d-none {
						display: none !important;
					}
				}
			}

			@include media-breakpoint-up($next) {
				@if not ($infix == '') { // .navbar-expand-sm, md, lg, xl
					.navbar-brand .navbar-text-truncate {
						max-width: $navbar-text-truncate-max-width;
					}

					.navbar-collapse {
						flex-grow: 1;
						flex-wrap: wrap;
						justify-content: space-between;

						.navbar-nav {
							flex-direction: row;
							flex-wrap: wrap;
						}

						.dropdown-toggle .navbar-text-truncate {
							max-width: $navbar-text-truncate-max-width - $navbar-text-truncate-spacer-right;
						}
					}

					.navbar-breakpoint-d-block {
						display: block !important;
					}

					.navbar-breakpoint-d-inline-block {
						display: inline-block !important;
					}

					.navbar-breakpoint-d-flex {
						display: flex !important;
					}

					.navbar-breakpoint-d-none {
						display: none !important;
					}
				}
			}
		}
	}
}

// Navbar Overlay Styles for `.navbar-overlay-xs-down`,
// `.navbar-overlay-sm-down`, `.navbar-overlay-md-down`,
// `.navbar-overlay-lg-down`, `.navbar-overlay-up`

@each $breakpoint in map-keys($grid-breakpoints) {
	$index: index(map-keys($grid-breakpoints), $breakpoint);
	$length: length(map-keys($grid-breakpoints));
	$infix: '.navbar-overlay-#{$breakpoint}-down';

	@if ($index == $length) {
		$infix: '.navbar-overlay-up';
	}

	#{$infix} {
		@include media-breakpoint-down($breakpoint) {
			@include border-radius($navbar-border-radius);

			bottom: 0;
			display: none;
			justify-content: space-between;
			left: 0;
			margin-left: 0;
			margin-right: 0;
			padding-bottom: $navbar-padding-y;
			padding-left: $navbar-padding-x;
			padding-right: $navbar-padding-x;
			padding-top: $navbar-padding-y;
			position: absolute;
			right: 0;
			top: 0;
			z-index: $zindex-navbar-overlay;

			&.show {
				display: flex;
			}
		}
	}
}

// Navbar Underline

.navbar-underline {
	.navbar-toggler-link {
		&:after {
			background-color: $navbar-underline-active-bg;
			bottom: -$navbar-padding-y;
			content: '';
			display: block;
			height: 0.1875rem;
			left: 0;
			position: absolute;
			right: 0;
			width: auto;
		}
	}
}

.navbar-underline.navbar-expand {
	@each $breakpoint in map-keys($grid-breakpoints) {
		$next: breakpoint-next($breakpoint, $grid-breakpoints);
		$infix: breakpoint-infix($next, $grid-breakpoints);

		&#{$infix} { // .navbar-expand, sm, md, lg, xl
			@include media-breakpoint-up($next) {
				.navbar-nav .nav-link {
					&.active:after {
						background-color: $navbar-underline-active-bg;
						bottom: -$navbar-padding-y;
						content: '';
						display: block;
						height: 0.1875rem;
						left: 0;
						position: absolute;
						right: 0;
						width: auto;
					}
				}
			}
		}
	}
}
.application-bar {
	flex-wrap: nowrap;

	@include clay-navbar-size($application-bar-size);

	.container,
	.container-fluid {
		flex-wrap: nowrap;
	}

	.navbar-nav {
		flex-wrap: nowrap;
	}
}

.application-bar-dark {
	@include clay-navbar-variant($application-bar-dark);
}
.management-bar {
	@include clay-navbar-size($management-bar-size);
}

.management-bar-light {
	@include clay-navbar-variant($management-bar-light);
}

.management-bar-primary {
	@include clay-navbar-variant($management-bar-primary);
}
.navigation-bar {
	@include clay-navbar-size($navigation-bar-size);
}

.navigation-bar-light {
	@include clay-navbar-variant($navigation-bar-light);
}

.navigation-bar-secondary {
	@include clay-navbar-variant($navigation-bar-secondary);
}
.pagination {
	flex-wrap: wrap;
	font-size: $pagination-font-size;
	margin-bottom: $pagination-margin-bottom;
}

.pagination-bar {
	align-items: center;
	display: flex;
	flex-wrap: wrap;

	@include clay-scale-component {
		flex-direction: column;
		justify-content: center;
	}

	.pagination {
		@include clay-scale-component {
			margin-top: 0.5rem;
		}
	}
}

.page-link {
	@include border-radius($pagination-link-border-radius);

	&:focus {
		z-index: 3;
	}

	&:not(:disabled):not(.disabled) {
		cursor: $pagination-link-cursor;
	}

	&.btn-unstyled {
		background-color: $pagination-bg;
		border-width: $pagination-border-width;
		line-height: $pagination-line-height;
		max-width: none;
		padding: $pagination-padding-y $pagination-padding-x;
	}
}

.page-item {
	margin-bottom: $pagination-item-margin-y;
	margin-left: $pagination-item-margin-x;
	margin-right: $pagination-item-margin-x;
	margin-top: $pagination-item-margin-y;

	&:first-child,
	&:last-child {
		.page-link {
			@include border-radius($pagination-link-border-radius);
		}
	}

	&.disabled .page-link {
		cursor: $pagination-disabled-cursor;
		opacity: $pagination-disabled-opacity;
		pointer-events: $pagination-disabled-pointer-events;
	}

	&.active .page-link {
		cursor: default;
	}
}

.pagination-items-per-page {
	font-size: $pagination-items-per-page-font-size;
	margin-bottom: $pagination-margin-bottom;

	> a,
	> .btn-unstyled {
		background-color: $pagination-items-per-page-bg;
		border-color: $pagination-items-per-page-border-color;

		@include border-radius($pagination-items-per-page-border-radius);

		border-style: solid;
		border-width: $pagination-border-width;
		color: $pagination-items-per-page-color;
		display: block;
		line-height: $pagination-line-height;
		padding: $pagination-padding-y $pagination-padding-x;
		text-decoration: none;

		&:hover,
		&:focus {
			background-color: $pagination-items-per-page-hover-bg;
			border-color: $pagination-items-per-page-hover-border-color;
			color: $pagination-items-per-page-hover-color;
		}
	}

	+ .pagination-results {
		@include clay-scale-component {
			margin-left: auto;
		}
	}
}

.show {
	&.page-item,
	&.pagination-items-per-page {
		.dropdown-toggle {
			background-color: $pagination-active-bg;
			border-color: $pagination-active-border-color;
			color: $pagination-active-color;
		}
	}
}

.page-item .dropdown-menu,
.pagination-items-per-page .dropdown-menu {
	margin-bottom: $pagination-dropdown-menu-spacer-y;
	margin-top: $pagination-dropdown-menu-spacer-y;
}

.pagination-results {
	border-color: transparent;
	border-style: solid;
	border-width: $pagination-border-width;
	color: $pagination-results-color;
	font-size: $pagination-font-size;
	line-height: $pagination-line-height;
	margin-bottom: $pagination-margin-bottom;
	margin-right: auto;
	padding: $pagination-padding-y $pagination-padding-x;
}

// Pagination Sizes

.pagination-sm {
	.pagination-items-per-page {
		@include border-radius($pagination-link-border-radius-sm);
	}

	.pagination-items-per-page > a,
	.pagination-items-per-page > .btn-unstyled,
	.pagination-results {
		font-size: $pagination-font-size-sm;
		line-height: $pagination-line-height-sm;
		padding: $pagination-padding-y-sm $pagination-padding-x;
	}

	.page-link {
		font-size: $pagination-font-size-sm;
		line-height: $pagination-line-height-sm;

		&.btn-unstyled {
			padding: $pagination-padding-y-sm $pagination-padding-x-sm;
		}
	}
}

.pagination-lg {
	.pagination-items-per-page {
		@include border-radius($pagination-link-border-radius-lg);
	}

	.pagination-items-per-page > a,
	.pagination-items-per-page > .btn-unstyled,
	.pagination-results {
		font-size: $pagination-font-size-lg;
		line-height: $pagination-line-height-lg;
		padding: $pagination-padding-y-lg $pagination-padding-x;
	}

	.page-link {
		font-size: $pagination-font-size-lg;
		line-height: $pagination-line-height-lg;

		&.btn-unstyled {
			padding: $pagination-padding-y-lg $pagination-padding-x-lg;
		}
	}
}
.panel {
	background-color: $panel-bg;
	border-color: $panel-border-color;
	border-style: $panel-border-style;
	border-width: $panel-border-width;

	@include border-radius($panel-border-radius);

	margin-bottom: $panel-margin-bottom;
	word-wrap: break-word;
}

.panel-header {
	border-bottom: $panel-header-border-bottom-width solid transparent;

	@if not ($panel-header-offset-border-radius == 0) {
		@include border-top-radius($panel-header-offset-border-radius);
	}

	display: block;
	font-size: $panel-header-font-size;
	line-height: $panel-header-line-height;
	padding: $panel-header-padding-y $panel-header-padding-x;
	position: relative;
	width: 100%;

	&.collapsed {
		@if not ($panel-header-offset-border-radius == 0) {
			@include border-bottom-radius($panel-header-offset-border-radius);
		}

		@include transition(border-radius 1s ease, border-width 1s ease);

		border-bottom-width: 0;
	}

	&.collapse-icon {
		padding-left: $panel-header-collapse-icon-padding-left;
		padding-right: $panel-header-collapse-icon-padding-right;
	}

	.collapse-icon-closed,
	.collapse-icon-open {
		bottom: $panel-header-collapse-icon-bottom;
		font-size: $panel-header-collapse-icon-font-size;
		left: $panel-header-collapse-icon-left;
		right: $panel-header-collapse-icon-right;
		top: $panel-header-collapse-icon-top;
	}
}

.panel-header-link {
	color: inherit;
	display: block;
	padding: $panel-header-padding-y $panel-header-padding-x;
	text-decoration: $panel-header-link-text-decoration;

	&:hover {
		color: inherit;
		text-decoration: $panel-header-link-hover-text-decoration;
	}

	&:focus {
		z-index: 1;
	}

	.collapse-icon {
		padding-left: $collapse-icon-padding-left;
		padding-right: $collapse-icon-padding-right;
	}
}

.panel-body {
	padding: $panel-body-padding-y $panel-header-padding-x;
}

.panel-footer {
	@if not ($panel-footer-offset-border-radius == 0) {
		@include border-bottom-radius($panel-footer-offset-border-radius);
	}

	border-top: $panel-footer-border-top-width solid transparent;
	padding: $panel-footer-padding-y $panel-footer-padding-x;
}

.panel-title {
	font-size: $panel-title-font-size;
	font-weight: $panel-title-font-weight;
	text-transform: $panel-title-text-transform;
}

// Panel Group

.panel-group {
	background-color: $panel-bg;

	@include border-radius($panel-border-radius);

	.panel {
		margin-bottom: $panel-group-panel-margin-bottom;

		&:first-child,
		&:first-child .panel-header {
			@include border-bottom-radius(0);
		}

		&:not(:first-child) {
			@include border-radius(0);

			@if ($panel-border-bottom-width > 0) {
				margin-top: -$panel-border-bottom-width;
			}

			.panel-header {
				@include border-radius(0);
			}
		}

		&:last-child {
			@include border-bottom-radius($panel-border-radius);

			.panel-header.collapsed {
				@if not ($panel-header-offset-border-radius == 0) {
					@include border-bottom-radius($panel-header-offset-border-radius);
				}

				@include transition(border-radius 1s ease);
			}
		}
	}

	.panel-header {
		border-bottom-width: 0;

		+ .panel-collapse > .panel-body {
			border-top: $panel-header-border-bottom-width solid transparent;
		}
	}
}

// Panel Group Fluid

.panel-group-fluid,
.panel-group-flush {
	.panel {
		@if ($panel-border-left-width > 0) {
			border-left-width: 0;
		}

		@if ($panel-border-right-width > 0) {
			border-right-width: 0;
		}

		&:first-child,
		&:last-child {
			@if ($panel-border-radius > 0) {
				border-radius: 0;
			}
		}
	}
}

.panel-group-fluid-first {
	.panel {
		@if ($panel-border-left-width > 0) {
			border-left-width: 0;
		}

		@if ($panel-border-right-width > 0) {
			border-right-width: 0;
		}

		&:first-child {
			@if ($panel-border-top-width > 0) {
				border-top-width: 0;
			}
		}

		&:last-child {
			@if ($panel-border-radius > 0) {
				border-bottom-left-radius: 0;
				border-bottom-right-radius: 0;
			}
		}
	}
}

.panel-group-fluid-last {
	.panel {
		@if ($panel-border-left-width > 0) {
			border-left-width: 0;
		}

		@if ($panel-border-right-width > 0) {
			border-right-width: 0;
		}

		&:first-child {
			@if ($panel-border-radius > 0) {
				border-top-left-radius: 0;
				border-top-right-radius: 0;
			}
		}

		&:last-child {
			@if ($panel-border-bottom-width > 0) {
				border-bottom-width: 0;
			}
		}
	}
}

.card-body {
	> .panel-group-fluid,
	> .panel-group-fluid-first,
	> .panel-group-fluid-last {
		margin-left: -$card-spacer-x;
		margin-right: -$card-spacer-x;
	}
}

.sheet {
	> .panel-group-fluid {
		margin-left: -$sheet-padding-left;
		margin-right: -$sheet-padding-right;
	}

	> .panel-group-fluid-first {
		margin-left: -$sheet-padding-left;
		margin-right: -$sheet-padding-right;
		margin-top: -$sheet-padding-top;
	}

	> .panel-group-fluid-last {
		margin-bottom: -$sheet-padding-bottom;
		margin-left: -$sheet-padding-left;
		margin-right: -$sheet-padding-right;
	}
}

// Panel Group Flush

.panel-group-flush {
	.panel-header,
	.panel-header-link {
		padding-left: 0;
		padding-right: 0;
	}

	.panel-body {
		margin-bottom: $panel-group-flush-body-margin-bottom;
		padding: $panel-group-flush-body-padding;
	}

	.collapse-icon {
		padding-left: $panel-group-flush-collapse-icon-padding-left;
		padding-right: $panel-group-flush-collapse-icon-padding-right;
	}

	.collapse-icon-closed,
	.collapse-icon-open {
		left: $panel-group-flush-collapse-icon-left;
		right: $panel-group-flush-collapse-icon-right;
	}
}

// Panel Variants

.panel-secondary {
	@include clay-panel-variant($panel-secondary);
}
.bs-popover-bottom .arrow::after {
	border-bottom-color: $popover-bottom-arrow-color;
}

.bs-popover-left .arrow::after {
	border-left-color: $popover-left-arrow-color;
}

.bs-popover-right .arrow::after {
	border-right-color: $popover-right-arrow-color;
}

.bs-popover-top .arrow::after {
	border-top-color: $popover-top-arrow-color;
}

.popover {
	.inline-scroller {
		max-height: $popover-inline-scroller-max-height;
	}
}

.popover-header {
	border-color: $popover-header-border-color;

	@if not ($popover-offset-border-width == calc(#{$border-radius-lg} - #{$popover-border-width})) {
		@include border-top-radius($popover-offset-border-width);
	}

	@if not ($popover-header-font-size == $font-size-base) {
		font-size: $popover-header-font-size;
	}

	font-weight: $popover-header-font-weight;

	margin-bottom: $popover-header-margin-y;
	margin-left: $popover-header-margin-x;
	margin-right: $popover-header-margin-x;
	margin-top: $popover-header-margin-y;
}

.popover-body {
	@include border-bottom-radius($popover-offset-border-width);
}

// Top

.clay-popover-top,
.clay-popover-top-left,
.clay-popover-top-right {
	margin-bottom: $popover-arrow-height;

	.arrow {
		bottom: calc((#{$popover-arrow-height} + #{$popover-border-width}) * -1);
		margin: 0;

		&::after {
			border-top-color: $popover-arrow-color;
			border-width: $popover-arrow-height ($popover-arrow-width / 2) 0;
			bottom: $popover-border-width;
		}

		&::before {
			border-top-color: $popover-arrow-outer-color;
			border-width: $popover-arrow-height ($popover-arrow-width / 2) 0;
			bottom: 0;
		}
	}
}

.clay-popover-top .arrow::after {
	border-top-color: $popover-top-arrow-color;
}

.clay-popover-top-left .arrow::after {
	border-top-color: $popover-top-left-arrow-color;
}

.clay-popover-top-right .arrow::after {
	border-top-color: $popover-top-right-arrow-color;
}

// Right

.clay-popover-right,
.clay-popover-right-bottom,
.clay-popover-right-top {
	margin-left: $popover-arrow-height;

	.arrow {
		height: $popover-arrow-width;
		left: calc((#{$popover-arrow-height} + #{$popover-border-width}) * -1);
		margin: 0;
		width: $popover-arrow-height;

		&::after {
			border-right-color: $popover-arrow-color;
			border-width: ($popover-arrow-width / 2) $popover-arrow-height ($popover-arrow-width / 2) 0;
			left: $popover-border-width;
		}

		&::before {
			border-right-color: $popover-arrow-outer-color;
			border-width: ($popover-arrow-width / 2) $popover-arrow-height ($popover-arrow-width / 2) 0;
			left: 0;
		}
	}
}

.clay-popover-right .arrow::after {
	border-right-color: $popover-right-arrow-color;
}

.clay-popover-right-bottom .arrow::after {
	border-right-color: $popover-right-bottom-arrow-color;
}

.clay-popover-right-top .arrow::after {
	border-right-color: $popover-right-top-arrow-color;
}

// Bottom

.clay-popover-bottom,
.clay-popover-bottom-left,
.clay-popover-bottom-right {
	margin-top: $popover-arrow-height;

	.arrow {
		margin: 0;
		top: calc((#{$popover-arrow-height} + #{$popover-border-width}) * -1);

		&:after {
			border-bottom-color: $popover-arrow-color;
			border-width: 0 ($popover-arrow-width / 2) $popover-arrow-height ($popover-arrow-width / 2);
			top: $popover-border-width;
		}

		&:before {
			border-bottom-color: $popover-arrow-outer-color;
			border-width: 0 ($popover-arrow-width / 2) $popover-arrow-height ($popover-arrow-width / 2);
			top: 0;
		}
	}
}

.clay-popover-bottom .arrow::after {
	border-bottom-color: $popover-bottom-arrow-color;
}

.clay-popover-bottom-left .arrow::after {
	border-bottom-color: $popover-bottom-left-arrow-color;
}

.clay-popover-bottom-right .arrow::after {
	border-bottom-color: $popover-bottom-right-arrow-color;
}

// Left

.clay-popover-left,
.clay-popover-left-bottom,
.clay-popover-left-top {
	margin-right: $popover-arrow-height;

	.arrow {
		height: $popover-arrow-width;
		margin: 0;
		right: calc((#{$popover-arrow-height} + #{$popover-border-width}) * -1);
		width: $popover-arrow-height;

		&::after {
			border-left-color: $popover-arrow-color;
			border-width: ($popover-arrow-width / 2) 0 ($popover-arrow-width / 2) $popover-arrow-height;
			right: $popover-border-width;
		}

		&::before {
			border-left-color: $popover-arrow-outer-color;
			border-width: ($popover-arrow-width / 2) 0 ($popover-arrow-width / 2) $popover-arrow-height;
			right: 0;
		}
	}
}

.clay-popover-left .arrow::after {
	border-left-color: $popover-left-arrow-color;
}

.clay-popover-left-bottom .arrow::after {
	border-left-color: $popover-left-bottom-arrow-color;
}

.clay-popover-left-top .arrow::after {
	border-left-color: $popover-left-top-arrow-color;
}

// Bottom / Top

.clay-popover-bottom,
.clay-popover-top {
	.arrow {
		left: 50%;
		margin-left: -($popover-arrow-width / 2);
	}
}

.clay-popover-bottom-left,
.clay-popover-top-left {
	.arrow {
		left: $popover-arrow-offset;
	}
}

.clay-popover-bottom-right,
.clay-popover-top-right {
	.arrow {
		right: $popover-arrow-offset;
	}
}

// Right / Left

.clay-popover-left,
.clay-popover-right {
	.arrow {
		margin-top: -($popover-arrow-height / 2);
		top: 50%;
	}
}

.clay-popover-left-bottom,
.clay-popover-right-bottom {
	.arrow {
		bottom: $popover-arrow-offset;
	}
}

.clay-popover-left-top,
.clay-popover-right-top {
	.arrow {
		top: $popover-arrow-offset;
	}
}
.progress {
	flex-grow: 1;
	min-width: $progress-min-width;
}

.progress-bar {
	@if ($progress-bar-box-shadow) {
		@include box-shadow($progress-bar-box-shadow);
	}
}

.progress-lg,
.progress-lg > .progress {
	@include border-radius($progress-border-radius-lg);

	font-size: $progress-font-size-lg;
	height: $progress-height-lg;
	line-height: $progress-height-lg;
}

// Progress Group

.progress-group {
	align-items: center;
	display: flex;

	.component-subtitle {
		@include clay-link($progress-group-subtitle);
	}
}

.progress-group-addon {
	font-size: $progress-group-addon-font-size;
	font-weight: $progress-group-addon-font-weight;
	margin-right: $progress-group-addon-spacer-x;
	text-align: center;

	&:first-child {
		padding-left: 0;
	}

	&:last-child {
		padding-right: 0;
	}
}

.progress ~ .progress-group-addon {
	margin-left: $progress-group-addon-spacer-x;
	margin-right: 0;
}

.progress-group-feedback {
	color: $progress-group-feedback-color;
}

.progress-group-stacked {
	display: block;

	.progress {
		margin-bottom: $progress-group-stacked-progress-margin-bottom;
		margin-top: $progress-group-stacked-progress-margin-top;
	}

	.progress-group-addon {
		margin-left: 0;
		margin-right: 0;
	}
}

// Progress Variants

@each $color, $value in $progress-palette {
	.progress-#{$color} {
		.progress-bar {
			background-color: map-get($value, bar-bg);
		}

		.progress-group-feedback {
			color: map-get($value, group-feedback-color);
		}
	}
}
.quick-action-menu {
	align-items: center;
	bottom: 0;
	display: none;
	font-size: $quick-action-font-size;
	left: auto;
	padding-bottom: $quick-action-padding-y;
	padding-left: $quick-action-padding-x;
	padding-right: $quick-action-padding-x;
	padding-top: $quick-action-padding-y;
	position: absolute;
	right: 100%;
	top: 0;
}

.quick-action-item {
	@include border-radius($quick-action-item-border-radius);

	display: flex;
	line-height: 1;
	margin-bottom: $quick-action-item-margin-y;
	margin-left: $quick-action-item-margin-x;
	margin-right: $quick-action-item-margin-x;
	margin-top: $quick-action-item-margin-y;
	min-height: $quick-action-item-min-height;
	min-width: $quick-action-item-min-width;
	padding-bottom: $quick-action-item-padding-y;
	padding-left: $quick-action-item-padding-x;
	padding-right: $quick-action-item-padding-x;
	padding-top: $quick-action-item-padding-y;

	&:disabled,
	&.disabled {
		cursor: $quick-action-item-disabled-cursor;
		opacity: $quick-action-item-disabled-opacity;
	}

	.lexicon-icon {
		margin-top: 0;
	}
}
.sheet {
	background-color: $sheet-bg;
	border-color: $sheet-border-color;
	border-style: $sheet-border-style;
	border-width: $sheet-border-width;

	@include border-radius($sheet-border-radius);

	padding-bottom: $sheet-padding-bottom;
	padding-left:  $sheet-padding-left;
	padding-right:  $sheet-padding-right;
	padding-top: $sheet-padding-top;

	@include clay-scale-component {
		padding-bottom: $sheet-padding-bottom-mobile;
		padding-left:  $sheet-padding-left-mobile;
		padding-right:  $sheet-padding-right-mobile;
		padding-top: $sheet-padding-top-mobile;
	}

	.panel-group {
		&,
		.panel:last-child .panel-body {
			margin-bottom: $sheet-panel-group-margin-bottom;

			@include clay-scale-component {
				margin-bottom: $sheet-panel-group-margin-bottom-mobile;
			}
		}

		.panel-body {
			margin-bottom: $sheet-section-margin-bottom;

			@include clay-scale-component {
				margin-bottom: $sheet-section-margin-bottom-mobile;
			}
		}
	}
}

.sheet-header {
	margin-bottom: $sheet-header-margin-bottom;

	@include clay-scale-component {
		margin-bottom: $sheet-header-margin-bottom-mobile;
	}

	&::after {
		clear: both;
		content: '';
		display: block;
	}
}

.sheet-section {
	margin-bottom: $sheet-section-margin-bottom;

	@include clay-scale-component {
		margin-bottom: $sheet-section-margin-bottom-mobile;
	}

	> fieldset {
		margin-bottom: -$sheet-section-margin-bottom;

		@include clay-scale-component {
			margin-bottom: -$sheet-section-margin-bottom-mobile;
		}
	}

	&::after {
		clear: both;
		content: '';
		display: block;
	}
}

fieldset {
	+ .sheet-footer {
		margin-top: 0;
	}
}

.sheet-footer {
	display: flex;
	margin-bottom: $sheet-footer-margin-bottom;
	margin-left: $sheet-footer-margin-left;
	margin-right: $sheet-footer-margin-right;
	margin-top: $sheet-footer-margin-top;

	@include clay-scale-component {
		margin-bottom: $sheet-footer-margin-bottom-mobile;
		margin-left: $sheet-footer-margin-left-mobile;
		margin-right: $sheet-footer-margin-right-mobile;
		margin-top: $sheet-footer-margin-top-mobile;
	}

	&::after {
		clear: both;
		content: '';
		display: block;
	}
}

.sheet-footer-btn-block-sm-down {
	@include sheet-footer-btn-block($sheet-footer-btn-block-sm-down);
}

// Sheet Sizes

.sheet-lg {
	margin-left: auto;
	margin-right: auto;
	max-width: $sheet-lg-max-width;
}

// Sheet Title

.sheet-title {
	color: $sheet-title-color;
	display: block;
	font-size: $sheet-title-font-size;
	font-weight: $sheet-title-font-weight;
	line-height: $sheet-title-line-height;
	margin-bottom: $sheet-title-margin-bottom;
	word-wrap: break-word;

	@include clay-scale-component {
		font-size: $sheet-title-font-size-mobile;
		margin-bottom: $sheet-title-margin-bottom-mobile;
	}
}

// Sheet Subtitle

.sheet-subtitle {
	border-color: $sheet-subtitle-border-color;
	border-style: $sheet-subtitle-border-style;
	border-width: $sheet-subtitle-border-width;
	color: $sheet-subtitle-color;
	display: block;
	font-size: $sheet-subtitle-font-size;
	font-weight: $sheet-subtitle-font-weight;
	line-height: $sheet-subtitle-line-height;
	margin-bottom: $sheet-subtitle-margin-bottom;
	padding-bottom: $sheet-subtitle-padding-y;
	padding-left: $sheet-subtitle-padding-x;
	padding-right: $sheet-subtitle-padding-x;
	padding-top: $sheet-subtitle-padding-y;
	position: relative;
	text-transform: $sheet-subtitle-text-transform;
	word-wrap: break-word;

	@include clay-scale-component {
		font-size: $sheet-subtitle-font-size-mobile;
		margin-bottom: $sheet-subtitle-margin-bottom-mobile;
	}

	&.autofit-row {
		padding-bottom: 0;

		.autofit-col {
			margin-bottom: $sheet-subtitle-padding-y;
		}
	}

	&.collapse-icon {
		padding-left: $sheet-subtitle-collapse-icon-padding-left;
		padding-right: $sheet-subtitle-collapse-icon-padding-right;
	}

	.collapse-icon-closed,
	.collapse-icon-open {
		bottom: $sheet-subtitle-collapse-icon-bottom;
		left: $sheet-subtitle-collapse-icon-left;
		right: $sheet-subtitle-collapse-icon-right;
		top: $sheet-subtitle-collapse-icon-top;
	}

	.heading-text {
		margin-bottom: $sheet-subtitle-heading-text-margin-bottom;
		margin-top: $sheet-subtitle-heading-text-margin-top;
	}

	a,
	.btn {
		text-transform: none;
	}
}

a.sheet-subtitle {
	color: $sheet-subtitle-link-color;
	text-decoration: $sheet-subtitle-link-text-decoration;

	&:hover {
		color: $sheet-subtitle-link-hover-color;
		text-decoration: $sheet-subtitle-link-hover-text-decoration;
	}
}

// Sheet Tertiary Title

.sheet-tertiary-title {
	color: $sheet-tertiary-title-color;
	display: block;
	font-size: $sheet-tertiary-title-font-size;
	font-weight: $sheet-tertiary-title-font-weight;
	line-height: $sheet-tertiary-title-line-height;
	margin-bottom: $sheet-tertiary-title-margin-bottom;
	padding-bottom: $sheet-tertiary-title-padding-y;
	padding-left: $sheet-tertiary-title-padding-x;
	padding-right: $sheet-tertiary-title-padding-x;
	padding-top: $sheet-tertiary-title-padding-y;
	text-transform: $sheet-tertiary-title-text-transform;
	word-wrap: break-word;

	@include clay-scale-component {
		font-size: $sheet-tertiary-title-font-size-mobile;
		margin-bottom: $sheet-tertiary-title-margin-bottom-mobile;
	}
}

// Sheet Text

.sheet-text {
	color: $sheet-text-color;
	font-size: $sheet-text-font-size;
	font-weight: $sheet-text-font-weight;
	margin-bottom: $sheet-text-margin-bottom;
	word-wrap: break-word;

	@include clay-scale-component {
		font-size: $sheet-text-font-size-mobile;
		margin-bottom: $sheet-text-margin-bottom-mobile;
	}
}
.container-fluid-1280.sidenav-container {
	padding-left: floor(($grid-gutter-width / 2));
	padding-right: floor(($grid-gutter-width / 2));
}

.sidenav-container {
	position: relative;

	> .sidenav-menu-slider {
		visibility: hidden;
		width: 0;
	}

	> .sidenav-content {
		left: 0;
	}
}

.sidenav-container.open {
	&.sidenav-transition {
		> .sidenav-menu-slider {
			overflow: hidden;
		}
	}

	> .sidenav-menu-slider {
		overflow: visible;
		visibility: visible;
	}
}

.sidenav-content {
	position: relative;

	@include media-breakpoint-up(md) {
		position: static;

		&::after {
			clear: both;
			content: '';
			display: block;
		}
	}
}

.sidenav-menu {
	height: 100%;
	position: relative;
}

.sidenav-menu-slider {
	overflow: hidden;
	position: absolute;
	width: $sidenav-width;
	z-index: 10;
}

.sidenav-fixed > .sidenav-menu-slider {
	bottom: 0;
	left: 0;
	position: fixed;
	top: 0;
	z-index: $zindex-sidenav;
}

.sidenav-right {
	> .sidenav-content {
		left: auto;
		right: 0;
	}

	> .sidenav-menu-slider {
		left: auto;
		right: 0;

		.sidenav-menu {
			right: 0;
		}
	}
}

.sidenav-js-fouc > .sidenav-menu-slider {
	opacity: 0;
	visibility: hidden;
}

// JS API Transition

.sidenav-transition {
	.sidenav-content,
	.sidenav-menu,
	.sidenav-menu-slider {
		transition: $sidenav-transition;
	}
}

// Simple Sidenav Transition

.sidenav-transition {
	transition: $sidenav-transition;
}

// Simple Sidenav

.sidenav-fixed.sidenav-menu-slider {
	bottom: 0;
	left: 0;
	position: fixed;
	top: 0;
	visibility: hidden;
	width: 0;

	&.open {
		visibility: visible;
		width: $sidenav-width;
	}

	.sidenav-menu {
		position: absolute;
	}
}

.sidenav-menu-slider {
	.sidenav-menu {
		width: $sidenav-width;
	}

	&.sidenav-right {
		left: auto;
		right: 0;

		.sidenav-menu {
			right: 0;
		}
	}
}
.sidebar {
	height: 100%;
	overflow: auto;

	-webkit-overflow-scrolling: touch;

	.container-fluid {
		padding-left: $sidebar-padding-left;
		padding-right: $sidebar-padding-right;
	}
}

// Sidebar Header / Footer

.sidebar-header,
.sidebar-footer {
	padding-bottom: $sidebar-padding-bottom;
	padding-left: $sidebar-padding-left;
	padding-right: $sidebar-padding-right;
	padding-top: $sidebar-padding-top;
}

.sidebar-header {
	.component-title {
		@include clay-text-typography($sidebar-header-component-title);
	}

	.component-subtitle {
		@include clay-text-typography($sidebar-header-component-subtitle);
	}
}

// Sidebar Body

.sidebar-body {
	overflow: auto;

	-webkit-overflow-scrolling: touch;

	padding-bottom: $sidebar-padding-bottom;
	padding-left: $sidebar-padding-left;
	padding-right: $sidebar-padding-right;
	padding-top: $sidebar-padding-top;

	> .sidebar-section {
		margin-bottom: 2rem;

		&:last-child {
			margin-bottom: 0;
		}
	}
}

// Sidebar Section

.sidebar-section {
	position: relative;
	word-wrap: break-word;
}

// Sidebar List Group

.sidebar-list-group {
	display: flex;
	flex-direction: column;
	font-size: $sidebar-list-group-font-size;
	margin-bottom: 0;
	padding-left: 0;

	@extend %#{$sidebar-list-group-type} !optional;

	.autofit-col {
		padding-bottom: $sidebar-list-group-autofit-col-padding-y;
		padding-left: $sidebar-list-group-autofit-col-padding-x;
		padding-right: $sidebar-list-group-autofit-col-padding-x;
		padding-top: $sidebar-list-group-autofit-col-padding-y;

		.list-group-title:only-child {
			height: map-get($sidebar-list-group-sticker-size, size);
		}
	}

	.list-group-item {
		background-color: $sidebar-list-group-bg;
		border-color: $sidebar-list-group-border-color;
		padding: $sidebar-list-group-item-padding;
	}

	.sticker {
		@include clay-sticker-size($sidebar-list-group-sticker-size);
	}
}

// Sidebar Panel

.sidebar-panel {
	margin-bottom: $sidebar-panel-margin-bottom;
	position: relative;
}

// Sidebar Definition List (dl dt dd)

.sidebar-dt {
	@include clay-text-typography($sidebar-dt);
}

.sidebar-dd {
	@include clay-text-typography($sidebar-dd);
}

// Sidebar Variants

.sidebar-light {
	@include clay-sidebar-variant($sidebar-light);
}

.sidebar-light .component-navigation-bar {
	@include clay-navbar-variant($sidebar-light-navigation-bar);
}
table {
	border-collapse: separate;
}

th {
	height: 20px;
}

.table-head-title {
	.inline-item-before {
		margin-right: $table-head-title-inline-item-spacer-x;

		+ .text-truncate-inline {
			max-width: $table-head-title-text-truncate-max-width;
		}
	}

	.inline-item-after {
		margin-left: $table-head-title-inline-item-spacer-x;
	}
}

.table {
	border-collapse: collapse;
	font-size: $table-font-size;
	margin-bottom: $table-margin-bottom;

	thead {
		td,
		th {
			// Webkit rendering issue with responsive-tables
			background-color: $table-head-bg;
			border-bottom-width: $table-head-border-bottom-width;
			border-top-width: $table-head-border-top-width;
		}

		th a {
			@include clay-link($table-head-link);
		}
	}

	th {
		color: $table-head-color;
		font-size: $table-head-font-size;
		font-weight: $table-head-font-weight;
		height: $table-head-height;
		position: relative;
	}

	td {
		border-bottom-width: $table-data-border-bottom-width;
		border-left-width: $table-data-border-left-width;
		border-right-width: $table-data-border-right-width;
		border-top-width: $table-data-border-top-width;

		border-color: $table-data-border-color;
		border-style: $table-data-border-style;
		position: relative;
		vertical-align: $table-data-vertical-align;
	}

	td:first-child,
	th:first-child,
	.table-cell-start {
		padding-left: $table-cell-gutters;
	}

	td:last-child,
	th:last-child,
	.table-cell-end {
		padding-right: $table-cell-gutters;
	}

	tbody,
	tfoot {
		td,
		th {
			// Webkit rendering issue with responsive-tables
			background-color: $table-bg;
		}
	}

	.autofit-col {
		justify-content: center;
		padding-left: $table-cell-padding;
		padding-right: $table-cell-padding;

		&:first-child {
			padding-left: 0;
		}

		&:last-child {
			padding-right: 0;
		}
	}

	.custom-control,
	.form-check {
		margin-bottom: 0;
	}
}

.table-column-text-start {
	text-align: left;
}

.table-column-text-center {
	text-align: center;
}

.table-column-text-end {
	text-align: right;
}

%table-cell-expand {
	display: table-cell;
	max-width: $table-cell-expand-min-width;
	min-width: $table-cell-expand-min-width;
	width: auto;
	word-wrap: break-word;
}

%table-cell-contract {
	display: table-cell;
	width: 1%;
}

// Table Bordered

.table-bordered {
	thead {
		td,
		th {
			@if ($table-head-border-top-width == 0 and $table-head-border-top-width) {
				border-top-width: $table-border-width;
			}
		}
	}

	td,
	th {
		border-width: $table-bordered-border-width;
	}
}

// Table Striped

.table-striped {
	tbody tr:nth-of-type(odd) {
		td,
		th {
			background-color: $table-accent-bg;
		}
	}
}

// Table Hover

.table-hover {
	tbody tr {
		&:hover {
			td,
			th {
				background-color: $table-hover-bg;
			}
		}
	}
}

// Table Active

.table .table-active {
	> td,
	> th {
		background-color: $table-active-bg;
	}
}

// Table Disabled

.table-disabled {
	color: $table-disabled-color;

	> td,
	> th {
		background-color: $table-disabled-bg;
		cursor: $table-disabled-cursor;

		a {
			color: $table-disabled-color;
			pointer-events: $table-disabled-pointer-events;
		}
	}

	.table-title,
	.table-list-title {
		color: $table-disabled-color;
	}
}

.table-hover .table-disabled:hover {
	> td,
	> th {
		background-color: $table-disabled-bg;
	}
}

.table-striped {
	tbody .table-disabled:nth-of-type(odd) {
		td,
		th {
			background-color: $table-disabled-bg;
		}
	}
}

// Table Title

.table-title {
	@include clay-text-typography($table-title);
}

.table-title a {
	@include clay-link($table-title-link);
}

// Table Link

.table-link {
	@include clay-link($table-link);
}

// Table Action Link

.table-action-link {
	@include clay-link($table-action-link);
}

// Table List Skin

.table-list {
	@include border-radius($table-list-border-radius);

	color: $table-list-color;
	font-size: $table-list-font-size;
	margin-bottom: $table-list-margin-bottom;
	margin-top: $table-list-margin-top;

	thead,
	tbody,
	tfoot {
		&:first-child {
			tr:first-child {
				th:first-child,
				td:first-child,
				.table-cell-start {
					@if $enable-rounded {
						border-top-left-radius: $table-list-border-radius;
					}
				}

				th:last-child,
				td:last-child,
				.table-cell-end {
					@if $enable-rounded {
						border-top-right-radius: $table-list-border-radius;
					}
				}
			}
		}

		&:last-child {
			tr:last-child {
				th:first-child,
				td:first-child,
				.table-cell-start {
					@if $enable-rounded {
						border-bottom-left-radius: $table-list-border-radius;
					}
				}

				th:last-child,
				td:last-child,
				.table-cell-end {
					@if $enable-rounded {
						border-bottom-right-radius: $table-list-border-radius;
					}
				}
			}
		}
	}

	.table-row-start {
		.table-cell-start {
			@if $enable-rounded {
				border-top-left-radius: $table-list-border-radius;
			}
		}

		.table-cell-end {
			@if $enable-rounded {
				border-top-right-radius: $table-list-border-radius;
			}
		}
	}

	.table-row-end {
		.table-cell-start {
			@if $enable-rounded {
				border-bottom-left-radius: $table-list-border-radius;
			}
		}

		.table-cell-end {
			@if $enable-rounded {
				border-bottom-right-radius: $table-list-border-radius;
			}
		}
	}

	th,
	td {
		box-shadow: inset 0 #{$table-list-border-y-width} $table-list-border-color, // top
					0 #{$table-list-border-y-width} $table-list-border-color; // bottom
		padding-top: $table-list-border-y-width + $table-cell-padding;

		&:first-child {
			box-shadow: inset 0 #{$table-list-border-y-width} $table-list-border-color, // top
						0 #{$table-list-border-y-width} $table-list-border-color, // bottom
						inset #{$table-list-border-x-width} 0 $table-list-border-color; // left
			padding-left: $table-list-border-x-width + $table-cell-padding;
			padding-top: $table-list-border-y-width + $table-cell-padding;
		}

		&:last-child {
			box-shadow: inset 0 #{$table-list-border-y-width} $table-list-border-color, // top
						inset #{-$table-list-border-x-width} 0 $table-list-border-color, // right
						0 #{$table-list-border-y-width} $table-list-border-color; // bottom
			padding-right: $table-list-border-x-width + $table-cell-padding;
			padding-top: $table-list-border-y-width + $table-cell-padding;
		}

		&:only-child {
			box-shadow: inset 0 #{$table-list-border-y-width} $table-list-border-color, // top
						inset #{-$table-list-border-x-width} 0 $table-list-border-color, // right
						0 #{$table-list-border-y-width} $table-list-border-color, // bottom
						inset #{$table-list-border-x-width} 0 $table-list-border-color; // left
			padding-left: $table-list-border-x-width + $table-cell-padding;
			padding-right: $table-list-border-x-width + $table-cell-padding;
			padding-top: $table-list-border-y-width + $table-cell-padding;
		}
	}

	.table-cell-start {
		box-shadow: inset 0 #{$table-list-border-y-width} $table-list-border-color, // top
					0 #{$table-list-border-y-width} $table-list-border-color, // bottom
					inset #{$table-list-border-x-width} 0 $table-list-border-color; // left
		padding-left: $table-list-border-x-width + $table-cell-padding;
		padding-top: $table-list-border-y-width + $table-cell-padding;
	}

	.table-cell-end {
		box-shadow: inset 0 #{$table-list-border-y-width} $table-list-border-color, // top
					inset #{-$table-list-border-x-width} 0 $table-list-border-color, // right
					0 #{$table-list-border-y-width} $table-list-border-color; // bottom
		padding-right: $table-list-border-x-width + $table-cell-padding;
		padding-top: $table-list-border-y-width + $table-cell-padding;
	}

	thead {
		td,
		th {
			// Webkit rendering issue with responsive-tables
			background-color: $table-list-head-bg;
			border-width: 0;
			font-size: $table-list-head-font-size;
			font-weight: $table-list-head-font-weight;
			height: $table-list-head-height;
			vertical-align: $table-list-head-vertical-alignment;
		}

		th a {
			@include clay-link($table-list-head-link);
		}
	}

	tbody,
	tfoot {
		td,
		th {
			// Webkit rendering issue with responsive-tables
			background-color: $table-list-bg;
			border-width: 0;
			vertical-align: middle;
		}
	}
}

.table-list.table-bordered {
	border-width: 0;

	th,
	td {
		box-shadow: inset 0 #{$table-list-border-y-width} #{$table-list-border-color}, // top
					inset #{-$table-list-border-x-width} 0 #{$table-list-border-color}, // right
					0 #{$table-list-border-y-width} #{$table-list-border-color}; // bottom
		padding-right: $table-list-border-x-width + $table-cell-padding;
		padding-top: $table-list-border-y-width + $table-cell-padding;

		&:first-child {
			box-shadow: inset 0 #{$table-list-border-y-width} #{$table-list-border-color}, // top
						inset #{-$table-list-border-x-width} 0 #{$table-list-border-color}, // right
						0 #{$table-list-border-y-width} #{$table-list-border-color}, // bottom
						inset #{$table-list-border-x-width} 0 #{$table-list-border-color}; // left
			padding-left: $table-list-border-x-width + $table-cell-padding;
			padding-right: $table-list-border-x-width + $table-cell-padding;
			padding-top: $table-list-border-y-width + $table-cell-padding;
		}
	}
}

// Table List Striped

.table-list.table-striped {
	tbody tr:nth-of-type(odd) {
		td,
		th {
			background-color: $table-list-accent-bg;
		}
	}
}

// Table List Hover

.table-list.table-hover {
	tbody tr {
		&:hover {
			td,
			th {
				background-color: $table-list-hover-bg;
			}
		}
	}
}

// Table List Active

.table-list.table-hover {
	.table-active {
		&:hover {
			background-color: $table-list-active-bg;

			> th,
			> td {
				background-color: $table-list-active-bg;
			}
		}
	}
}

.table-list .table-active {
	&,
	> th,
	> td {
		background-color: $table-list-active-bg;
	}
}

// Table List Disabled

.table-list .table-disabled {
	color: $table-list-disabled-color;

	> td,
	> th {
		background-color: $table-list-disabled-bg;
		cursor: $table-list-disabled-cursor;

		a {
			color: $table-list-disabled-color;
			pointer-events: $table-list-disabled-pointer-events;
		}
	}

	.table-title,
	.table-list-title {
		color: $table-list-disabled-color;
	}
}

.table-list.table-hover .table-disabled:hover {
	> td,
	> th {
		background-color: $table-list-disabled-bg;
	}
}

.table-list.table-striped {
	tbody .table-disabled:nth-of-type(odd) {
		td,
		th {
			background-color: $table-list-disabled-bg;
		}
	}
}

// Table List Title

.table-list-title {
	@include clay-text-typography($table-list-title);
}

.table-list-title a {
	@include clay-link($table-list-title-link);
}

// Table List Link

.table-list-link {
	@include clay-link($table-list-link);
}

// Table List Action Link

.table-list-action-link {
	@include clay-link($table-list-action-link);
}

// Table Helpers

.table-autofit {
	td,
	th {
		width: 1%;
	}

	.table-cell-expand {
		@extend %table-cell-expand;
	}

	.table-cell-expand-small {
		max-width: $table-cell-expand-small-max-width;
		width: $table-cell-expand-small-width;
		word-wrap: break-word;
	}

	.table-cell-expand-smaller {
		max-width: $table-cell-expand-smaller-max-width;
		width: $table-cell-expand-smaller-width;
		word-wrap: break-word;
	}

	.table-cell-expand-smallest {
		max-width: $table-cell-expand-smallest-max-width;
		width: $table-cell-expand-smallest-width;
		word-wrap: break-word;
	}
}

.table-nowrap {
	td,
	th {
		white-space: nowrap;
	}
}

.table-heading-nowrap thead {
	td,
	th {
		white-space: nowrap;
	}
}

.table .table-divider {
	td,
	th {
		background-color: $table-divider-bg;
		color: $table-divider-color;
		font-size: $table-divider-font-size;
		font-weight: $table-divider-font-weight;
		padding: $table-divider-padding;
		text-transform: $table-divider-text-transform;
	}
}

.table-list .table-divider {
	td,
	th {
		padding-bottom: $table-list-divider-padding-y;
		padding-left: $table-list-border-x-width + $table-list-divider-padding-x;
		padding-right: $table-list-border-x-width + $table-list-divider-padding-x;
		padding-top: $table-list-border-y-width + $table-list-divider-padding-y;
	}
}

// Table Vertical Align

.table-valign-bottom {
	tbody,
	tfoot,
	thead {
		td,
		th {
			vertical-align: bottom;
		}
	}

	tbody {
		td,
		th {
			padding-bottom: $table-valign-bottom-body-cell-padding-bottom;
		}
	}

	&.show-quick-actions-on-hover {
		.quick-action-menu {
			align-items: flex-end;
		}
	}
}

.table-valign-middle {
	tbody,
	tfoot,
	thead {
		td,
		th {
			vertical-align: middle;
		}
	}
}

.table-valign-top {
	tbody,
	tfoot,
	thead {
		td,
		th {
			vertical-align: top;
		}
	}

	tbody {
		td,
		th {
			padding-top: $table-valign-top-body-cell-padding-top;
		}
	}

	&.show-quick-actions-on-hover {
		.quick-action-menu {
			align-items: flex-start;
		}
	}
}

// Tbody Vertical Align

.tbody-valign-bottom {
	tbody {
		td,
		th {
			padding-bottom: $table-valign-bottom-body-cell-padding-bottom;
			vertical-align: bottom;
		}
	}

	&.show-quick-actions-on-hover {
		.quick-action-menu {
			align-items: flex-end;
		}
	}
}

.tbody-valign-middle {
	tbody td {
		vertical-align: middle;
	}
}

.tbody-valign-top {
	tbody {
		td,
		th {
			padding-top: $table-valign-top-body-cell-padding-top;
			vertical-align: top;
		}
	}

	&.show-quick-actions-on-hover {
		.quick-action-menu {
			align-items: flex-start;
		}
	}
}

// Thead Vertical Align

.thead-valign-bottom {
	thead {
		td,
		th {
			vertical-align: bottom;
		}
	}
}

.thead-valign-middle {
	thead {
		td,
		th {
			vertical-align: middle;
		}
	}
}

.thead-valign-top {
	thead {
		td,
		th {
			vertical-align: top;
		}
	}
}

// Show Quick Action

.show-quick-actions-on-hover {
	tr:not(.table-active):not(.table-disabled) {
		&:hover {
			.quick-action-menu {
				display: flex;
			}
		}
	}

	.table-focus:not(.table-active):not(.table-disabled) {
		.quick-action-menu {
			display: flex;
		}
	}
}

.table {
	.quick-action-menu {
		align-items: $table-quick-action-menu-align-items;
		background-color: $table-quick-action-menu-bg;
		padding-bottom: $table-cell-padding;
		padding-top: $table-cell-padding;
	}
}

.table-striped {
	tbody tr:nth-of-type(odd) {
		.quick-action-menu {
			background-color: $table-quick-action-menu-accent-bg;
		}
	}

	tbody .table-active:nth-of-type(odd) {
		.quick-action-menu {
			background-color: $table-quick-action-menu-accent-active-bg;
		}
	}
}

.table-hover {
	tbody tr {
		&:hover {
			.quick-action-menu {
				background-color: $table-quick-action-menu-hover-bg;
			}
		}
	}

	tbody .table-active {
		&:hover {
			.quick-action-menu {
				background-color: $table-quick-action-menu-active-bg;
			}
		}
	}
}

.table-active {
	.quick-action-menu {
		background-color: $table-quick-action-menu-active-bg;
	}
}

.table-list {
	.quick-action-menu {
		align-items: $table-list-quick-action-menu-align-items;
		background-color: $table-list-quick-action-menu-bg;
		bottom: 0;
		top: $table-list-border-y-width;
	}
}

.table-list.table-striped {
	tbody tr:nth-of-type(odd) {
		.quick-action-menu {
			background-color: $table-list-quick-action-menu-accent-bg;
		}
	}

	tbody .table-active:nth-of-type(odd) {
		.quick-action-menu {
			background-color: $table-list-quick-action-menu-accent-active-bg;
		}
	}
}

.table-list.table-hover {
	tbody tr {
		&:hover {
			.quick-action-menu {
				background-color: $table-list-quick-action-menu-hover-bg;
			}
		}
	}

	tbody .table-active {
		&:hover {
			.quick-action-menu {
				background-color: $table-list-quick-action-menu-active-bg;
			}
		}
	}
}

.table-list .table-active {
	.quick-action-menu {
		background-color: $table-list-quick-action-menu-active-bg;
	}
}

// Table Responsive

.table-responsive {
	@each $breakpoint in map-keys($grid-breakpoints) {
		$next: breakpoint-next($breakpoint, $grid-breakpoints);
		$infix: breakpoint-infix($next, $grid-breakpoints);

		&#{$infix} {
			margin-bottom: $table-responsive-margin-bottom;
		}
	}
}

// Table Utilities

.table {
	// Min Width

	.table-cell-minw-50 {
		min-width: 50px;
	}

	.table-cell-minw-75 {
		min-width: 75px;
	}

	.table-cell-minw-100 {
		min-width: 100px;
	}

	.table-cell-minw-150 {
		min-width: 150px;
	}

	.table-cell-minw-200 {
		min-width: 200px;
	}

	.table-cell-minw-250 {
		min-width: 250px;
	}

	.table-cell-minw-300 {
		min-width: 300px;
	}

	.table-cell-minw-350 {
		min-width: 350px;
	}

	.table-cell-minw-400 {
		min-width: 400px;
	}

	// White Space

	.table-cell-ws-normal {
		white-space: normal;
	}

	.table-cell-ws-nowrap {
		white-space: nowrap;
	}
}
.tbar {
	display: flex;

	> .container,
	> .container-fluid {
		display: flex;
	}
}

.tbar-nav {
	display: flex;
	flex-grow: 1;
	flex-shrink: 1;
	flex-wrap: nowrap;
	list-style: none;
	margin-bottom: 0;
	min-width: 3.125rem;
	padding-left: 0;
	word-wrap: break-word;

	> .tbar-item {
		justify-content: center;
	}
}

.tbar-nav-shrink {
	flex-grow: 0;
	flex-shrink: 0;
	width: auto;
}

.tbar-nav-wrap {
	flex-wrap: wrap;
}

.tbar-item {
	@extend %autofit-col;

	max-width: 100%;
	padding-bottom: $tbar-item-padding-y;
	padding-left: $tbar-item-padding-x;
	padding-right: $tbar-item-padding-x;
	padding-top: $tbar-item-padding-y;

	&:first-child {
		padding-left: 0;
	}

	&:last-child {
		padding-right: 0;
	}
}

.tbar-item-expand {
	@extend %autofit-col-expand;

	text-align: center;
}

.tbar-section {
	@extend %autofit-section;
}

.tbar-link {
	display: inline-block;
}

.tbar-btn-monospaced,
.tbar-link-monospaced {
	align-items: center;
	display: inline-flex;
	flex-direction: column;
	justify-content: center;
	overflow: hidden;
	padding: 0;
	text-align: center;

	.inline-item .lexicon-icon,
	.lexicon-icon {
		margin-top: 0;
	}
}

// Tbar Inline {xs|sm|md|lg|xl} Down

.tbar-inline-xs-down {
	@include clay-tbar-inline-down($tbar-inline-xs-down);
}

.tbar-inline-sm-down {
	@include clay-tbar-inline-down($tbar-inline-sm-down);
}

.tbar-inline-md-down {
	@include clay-tbar-inline-down($tbar-inline-md-down);
}

.tbar-inline-lg-down {
	@include clay-tbar-inline-down($tbar-inline-lg-down);
}

.tbar-inline-xl-down {
	@include clay-tbar-inline-down($tbar-inline-xl-down);
}

// Component Tbar

.component-tbar {
	@include clay-tbar-variant($component-tbar);
}

// Subnav Tbar

.subnav-tbar {
	.btn-unstyled {
		color: $link-color;
		text-decoration: $link-decoration;

		&:hover {
			color: $link-hover-color;
			text-decoration: $link-hover-decoration;
		}
	}

	@include clay-tbar-variant($subnav-tbar);
}

// Subnav Tbar Variants

.subnav-tbar-primary {
	@include clay-tbar-variant($subnav-tbar-primary);

	&.subnav-tbar-disabled {
		@include clay-tbar-variant($subnav-tbar-primary-disabled);
	}
}

.subnav-tbar-light {
	@include clay-tbar-variant($subnav-tbar-light);
}
.timeline {
	@include list-unstyled;

	padding-left: $timeline-outer-spacing;

	.panel,
	.panel-group {
		margin-bottom: 0;
	}
}

.timeline-icon {
	background-color: $timeline-icon-bg;
	border: $timeline-icon-border-width solid $timeline-icon-border-color;
	border-radius: $timeline-icon-border-radius;
	display: block;

	@include clay-monospace($timeline-icon-size);
}

.timeline-increment {
	background-color: $timeline-increment-bg;
	left: -($timeline-inner-spacing - $timeline-border-modifier);
	position: absolute;
	text-align: center;
	top: 50%;
	-ms-transform: translate(-50%, -50%);
	transform: translate(-50%, -50%);
	z-index: 1;
}

.timeline-increment-text {
	display: block;
	max-width: $timeline-inner-spacing + $timeline-outer-spacing;
}

.timeline-item-label {
	color: $timeline-item-label-color;
}

.timeline-item {
	padding-bottom: $timeline-item-padding-bottom;
	padding-left: $timeline-inner-spacing;
	padding-top: $timeline-item-padding-top;
	position: relative;

	&:before {
		background-color: $timeline-border-color;
		bottom: 0;
		content: '';
		display: block;
		left: 0;
		position: absolute;
		top: 0;
		width: $timeline-border-width;
	}

	&.active {
		.timeline-icon {
			background-color: $timeline-icon-active-bg;
			border-color: $timeline-icon-active-border-color;
		}
	}

	.panel,
	.panel-heading {
		position: relative;
	}

	.panel {
		.timeline-increment {
			margin-left: -$card-border-width;
		}
	}
}

// Timeline Right

.timeline-right {
	padding-left: 0;
	padding-right: $timeline-outer-spacing;

	.timeline-item {
		@include clay-timeline-item-reverse;
	}
}

.timeline-right-xs-only {
	@include media-breakpoint-down(xs) {
		padding-left: 0;
		padding-right: $timeline-outer-spacing;

		.timeline-item {
			@include clay-timeline-item-reverse;
		}
	}
}

// Timeline Center

.timeline-center {
	@include media-breakpoint-up(md) {
		padding-left: 0;

		.timeline-item {
			margin-left: 50%;
			width: 50%;

			.timeline-item-label {
				left: -100%;
				margin-left: -($timeline-inner-spacing * 2);
				position: absolute;
				text-align: right;
				top: 50%;
				-ms-transform: translateY(-50%);
				transform: translateY(-50%);
				width: 100%;
			}
		}

		.timeline-item.timeline-item-reverse {
			@include clay-timeline-item-reverse;

			margin-left: 0;

			.timeline-item-label {
				margin-left: auto;
				margin-right: -($timeline-inner-spacing * 2);
				right: -100%;
				text-align: left;
			}
		}
	}
}

.timeline-even .timeline-item:nth-of-type(even),
.timeline-odd .timeline-item:nth-of-type(odd) {
	@include media-breakpoint-up(md) {
		@include clay-timeline-item-reverse;

		margin-left: 0;

		.timeline-item-label {
			margin-left: auto;
			margin-right: -($timeline-inner-spacing * 2);
			right: -100%;
			text-align: left;
		}
	}
}

.timeline-spacing-xl {
	@include clay-timeline-spacing($timeline-outer-spacing-xl, $timeline-inner-spacing-xl, $timeline-item-padding-y-xl);

	.timeline-increment-text {
		max-width: $timeline-inner-spacing-xl + $timeline-outer-spacing-xl;
	}
}
.toggle-switch {
	cursor: pointer;
}

.toggle-switch-bar {
	.toggle-switch-handle {
		display: block;
		float: left;
		min-width: $toggle-switch-bar-width;
		text-transform: uppercase;
	}

	.toggle-switch-icon {
		font-size: $toggle-switch-bar-font-size;

		.lexicon-icon {
			margin-top: -0.2em;
		}
	}

	.button-icon {
		font-size: $toggle-switch-button-font-size;
	}
}

.toggle-switch-check {
	font-size: 62.5%;
	opacity: 0;
	position: absolute;

	&:empty ~ .toggle-switch-bar {
		cursor: pointer;
		display: block;
		float: left;
		font-size: 0.75rem;
		height: $toggle-switch-bar-height;
		line-height: $toggle-switch-bar-height;
		position: relative;
		text-indent: 0;

		-ms-user-select: none;
		user-select: none;

		&:after {
			background-color: $toggle-switch-button-bg;
			border-color: $toggle-switch-button-border-color;

			@include border-radius($toggle-switch-button-border-radius);

			border-style: solid;
			border-width: $toggle-switch-button-border-width;
			bottom: $toggle-switch-bar-padding;
			content: '';
			display: block;
			height: $toggle-switch-button-width;
			left: $toggle-switch-bar-padding;
			position: absolute;
			top: $toggle-switch-bar-padding;
			transition: $toggle-switch-transition;
			width: $toggle-switch-button-width;
		}

		&:before {
			background-color: $toggle-switch-bar-bg;
			border-color: $toggle-switch-bar-border-color;

			@include border-radius($toggle-switch-bar-border-radius);

			border-style: solid;
			border-width: $toggle-switch-bar-border-width;
			bottom: 0;
			content: ' ';
			display: block;
			left: 0;
			position: absolute;
			top: 0;
			transition: $toggle-switch-transition;
			width: $toggle-switch-bar-width;
		}

		.toggle-switch-handle {
			&:after {
				content: attr(data-label-off);
				margin-left: clay-data-label-text-position($toggle-switch-bar-width, $toggle-switch-bar-padding);
				transition: $toggle-switch-transition;
				white-space: nowrap;
			}

			&:before {
				transition: $toggle-switch-transition;
			}
		}

		.toggle-switch-icon {
			color: $toggle-switch-bar-icon-color;
			left: $toggle-switch-bar-padding;
			line-height: $toggle-switch-button-width;
			position: absolute;
			text-align: center;
			text-indent: 0;
			top: $toggle-switch-bar-padding;
			transition: $toggle-switch-transition;
			width: $toggle-switch-button-width;
			z-index: 1;
		}

		.toggle-switch-icon-on {
			left: $toggle-switch-bar-padding;
			opacity: 0;
		}

		.toggle-switch-icon-off {
			left: $toggle-switch-bar-width - $toggle-switch-bar-padding - $toggle-switch-button-width;
		}

		.button-icon {
			color: $toggle-switch-button-icon-color;
		}

		.button-icon-on {
			opacity: 0;
		}
	}

	&:checked ~ .toggle-switch-bar {
		&:after {
			background-color: $toggle-switch-button-on-bg;
			border-color: $toggle-switch-button-on-border-color;

			@include border-radius($toggle-switch-button-on-border-radius);

			border-style: solid;
			border-width: $toggle-switch-button-border-width;
			left: $toggle-switch-bar-width - $toggle-switch-bar-padding - $toggle-switch-button-width;
		}

		&:before {
			background-color: $toggle-switch-bar-on-bg;
			border-color: $toggle-switch-bar-on-border-color;

			@include border-radius($toggle-switch-bar-border-radius);

			border-style: solid;
			border-width: $toggle-switch-bar-border-width;
		}

		.toggle-switch-handle:after {
			content: attr(data-label-on);
		}

		.toggle-switch-icon {
			color: $toggle-switch-bar-on-icon-color;
		}

		.button-icon {
			color: $toggle-switch-button-on-icon-color;
			left: $toggle-switch-bar-width - $toggle-switch-bar-padding - $toggle-switch-button-width;
		}

		.button-icon-on,
		.toggle-switch-icon-on {
			opacity: 1;
		}

		.button-icon-off,
		.toggle-switch-icon-off {
			opacity: 0;
		}
	}

	&:disabled,
	&.disabled {
		~ .toggle-switch-bar {
			cursor: $toggle-switch-disabled-cursor;
			opacity: $toggle-switch-disabled-opacity;
		}
	}

	&:focus ~ .toggle-switch-bar:before {
		@include box-shadow($toggle-switch-bar-focus-box-shadow);
	}
}

.toggle-switch-label {
	display: block;
	margin-bottom: 2px;
}

.toggle-switch-text {
	clear: both;
	display: block;
	font-size: 0.75rem;
}

.toggle-switch-text-left {
	float: left;
	line-height: $toggle-switch-bar-height;
	margin-right: 8px;
}

.toggle-switch-text-right {
	clear: none;
	float: left;
	line-height: $toggle-switch-bar-height;
	margin-left: 8px;
}

@include clay-scale-component {
	.toggle-switch-bar {
		.toggle-switch-handle {
			min-width: $toggle-switch-bar-width-mobile;
		}

		.toggle-switch-icon {
			font-size: $toggle-switch-bar-font-size-mobile;
		}

		.button-icon {
			font-size: $toggle-switch-button-font-size-mobile;
		}
	}

	.toggle-switch-check {
		&:empty ~ .toggle-switch-bar {
			height: $toggle-switch-bar-height-mobile;
			line-height: $toggle-switch-bar-height-mobile;
			text-indent: 0;

			&:after {
				bottom: $toggle-switch-bar-padding-mobile;
				height: $toggle-switch-button-width-mobile;
				left: $toggle-switch-bar-padding-mobile;
				top: $toggle-switch-bar-padding-mobile;
				width: $toggle-switch-button-width-mobile;
			}

			&:before {
				width: $toggle-switch-bar-width-mobile;
			}

			.toggle-switch-handle:after {
				margin-left: clay-data-label-text-position($toggle-switch-bar-width-mobile, $toggle-switch-bar-padding-mobile);
			}

			.toggle-switch-icon {
				left: $toggle-switch-bar-padding-mobile;
				line-height: $toggle-switch-button-width-mobile;
				top: $toggle-switch-bar-padding-mobile;
				width: $toggle-switch-button-width-mobile;
			}

			.toggle-switch-icon-on {
				left: $toggle-switch-bar-padding-mobile;
			}

			.toggle-switch-icon-off {
				left: $toggle-switch-bar-width-mobile - $toggle-switch-bar-padding-mobile - $toggle-switch-button-width-mobile;
			}
		}

		&:checked ~ .toggle-switch-bar {
			&:after {
				left: $toggle-switch-bar-width-mobile - $toggle-switch-bar-padding-mobile - $toggle-switch-button-width-mobile;
			}

			.toggle-switch-handle:after {
				margin-left: clay-data-label-text-position($toggle-switch-bar-width-mobile, $toggle-switch-bar-padding-mobile);
			}

			.button-icon {
				left: $toggle-switch-bar-width-mobile - $toggle-switch-bar-padding-mobile - $toggle-switch-button-width-mobile;
			}
		}
	}

	.toggle-switch-text-left,
	.toggle-switch-text-right {
		line-height: $toggle-switch-bar-height-mobile;
	}
}
.tooltip-inner {
	@include box-shadow($tooltip-box-shadow);
}

// Tooltip Positions

.clay-tooltip-bottom,
.clay-tooltip-top {
	.arrow {
		left: 50%;
		margin-left: -($tooltip-arrow-width / 2);
	}
}

.clay-tooltip-bottom-left,
.clay-tooltip-top-left {
	.arrow {
		left: $tooltip-arrow-offset;
	}
}

.clay-tooltip-bottom-right,
.clay-tooltip-top-right {
	.arrow {
		right: $tooltip-arrow-offset;
	}
}

.clay-tooltip-left,
.clay-tooltip-right {
	.arrow {
		margin-top: -($tooltip-arrow-width / 2);
		top: 50%;
	}
}

.clay-tooltip-left-bottom,
.clay-tooltip-right-bottom {
	.arrow {
		bottom: $tooltip-arrow-offset;
	}
}

.clay-tooltip-left-top,
.clay-tooltip-right-top {
	.arrow {
		top: $tooltip-arrow-offset;
	}
}

// Bottom

.clay-tooltip-bottom,
.clay-tooltip-bottom-left,
.clay-tooltip-bottom-right {
	padding-top: $tooltip-arrow-height;

	.arrow {
		top: 0;

		&::before {
			border-bottom-color: $tooltip-arrow-color;
			border-width: 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
			bottom: 0;
		}
	}
}

// Left

.clay-tooltip-left,
.clay-tooltip-left-bottom,
.clay-tooltip-left-top {
	padding-right: $tooltip-arrow-height;

	.arrow {
		height: $tooltip-arrow-width;
		right: 0;
		width: $tooltip-arrow-height;

		&::before {
			border-left-color: $tooltip-arrow-color;
			border-width: ($tooltip-arrow-width / 2) 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
			left: 0;
		}
	}
}

// Right

.clay-tooltip-right,
.clay-tooltip-right-bottom,
.clay-tooltip-right-top {
	padding-left: $tooltip-arrow-height;

	.arrow {
		height: $tooltip-arrow-width;
		left: 0;
		width: $tooltip-arrow-height;

		&::before {
			border-right-color: $tooltip-arrow-color;
			border-width: ($tooltip-arrow-width / 2) $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
			right: 0;
		}
	}
}

// Top

.clay-tooltip-top,
.clay-tooltip-top-left,
.clay-tooltip-top-right {
	padding-bottom: $tooltip-arrow-height;

	.arrow {
		bottom: 0;

		&::before {
			border-top-color: $tooltip-arrow-color;
			border-width: $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
			top: 0;
		}
	}
}
body {
	-moz-osx-font-smoothing: $body-moz-osx-font-smoothing;
	-ms-overflow-style: scrollbar;
	-webkit-font-smoothing: $body-webkit-font-smoothing;

	@include clay-scale-component {
		font-size: $font-size-base-mobile;
	}
}

a {
	@if ($link-cursor != pointer) {
		cursor: $link-cursor;
	}
}

// Headings

h1,
.h1 {
	@include clay-scale-component {
		font-size: $h1-font-size-mobile;
	}
}

h2,
.h2 {
	@include clay-scale-component {
		font-size: $h2-font-size-mobile;
	}
}

h3,
.h3 {
	@include clay-scale-component {
		font-size: $h3-font-size-mobile;
	}
}

h4,
.h4 {
	@include clay-scale-component {
		font-size: $h4-font-size-mobile;
	}
}

h5,
.h5 {
	@include clay-scale-component {
		font-size: $h5-font-size-mobile;
	}
}

h6,
.h6 {
	@include clay-scale-component {
		font-size: $h6-font-size-mobile;
	}
}

b {
	font-weight: $b-font-weight;
}

strong {
	font-weight: $strong-font-weight;
}

// Reference Mark

.reference-mark {
	display: inline-block;
	font-size: $reference-mark-font-size;
	position: relative;
	vertical-align: $reference-mark-vertical-align;
}

// Marked Text

mark,
.mark {
	@include clay-highlight-text($mark-bg, $mark-color);
}

// Text Truncate

.text-truncate {
	display: block;
}

.text-truncate-inline {
	display: inline-flex;
	max-width: 100%;

	.text-truncate {
		display: inline-block;
		max-width: 100%;
		overflow: hidden;
		text-overflow: ellipsis;
		vertical-align: bottom;
		white-space: nowrap;
		word-wrap: normal;
	}
}
// Background

.bg-checkered {
	@include clay-bg-checkered($bg-checkered-fg);
}

// Rounded

.rounded {
	border-radius: $rounded-border-radius !important;
}

.rounded-circle {
	border-radius: $rounded-circle-border-radius !important;
}

.rounded-0 {
	border-radius: $rounded-0-border-radius !important;
}

// Close

.close {
	cursor: $link-cursor;
	float: none;

	@include clay-link($close);

	&:disabled,
	&.disabled {
		cursor: $disabled-cursor;
	}
}

// Autofit Row

%autofit-row {
	display: flex;
	flex-wrap: nowrap;
	width: 100%;

	@at-root {
		ul#{&} {
			@include list-unstyled;
		}
	}
}

.autofit-row {
	@extend %autofit-row;
}

// Autofit Row Center

%autofit-row-center {
	> .autofit-col {
		justify-content: center;
	}
}

.autofit-row-center {
	@extend %autofit-row-center;
}

// Autofit Row End

%autofit-row-end {
	> .autofit-col {
		justify-content: flex-end;
	}
}

.autofit-row-end {
	@extend %autofit-row-end;
}

// Autofit Padded

.autofit-padded {
	> .autofit-col {
		padding-bottom: $autofit-padded-col-padding-y;
		padding-left: $autofit-padded-col-padding-x;
		padding-right: $autofit-padded-col-padding-x;
		padding-top: $autofit-padded-col-padding-y;
	}
}

.autofit-padded-no-gutters-x {
	margin-left: math-sign($autofit-padded-col-padding-x);
	margin-right: math-sign($autofit-padded-col-padding-x);
	width: auto;

	> .autofit-col {
		padding-bottom: $autofit-padded-col-padding-y;
		padding-left: $autofit-padded-col-padding-x;
		padding-right: $autofit-padded-col-padding-x;
		padding-top: $autofit-padded-col-padding-y;
	}
}

.autofit-padded-no-gutters-y {
	margin-bottom: math-sign($autofit-padded-col-padding-y);
	margin-top: math-sign($autofit-padded-col-padding-y);
	width: auto;

	> .autofit-col {
		padding-bottom: $autofit-padded-col-padding-y;
		padding-left: $autofit-padded-col-padding-x;
		padding-right: $autofit-padded-col-padding-x;
		padding-top: $autofit-padded-col-padding-y;
	}
}

.autofit-padded-no-gutters {
	margin-bottom: math-sign($autofit-padded-col-padding-y);
	margin-left: math-sign($autofit-padded-col-padding-x);
	margin-right: math-sign($autofit-padded-col-padding-x);
	margin-top: math-sign($autofit-padded-col-padding-y);
	width: auto;

	> .autofit-col {
		padding-bottom: $autofit-padded-col-padding-y;
		padding-left: $autofit-padded-col-padding-x;
		padding-right: $autofit-padded-col-padding-x;
		padding-top: $autofit-padded-col-padding-y;
	}
}

// Autofit Columns

%autofit-col {
	display: flex;
	flex-direction: column;
	flex-shrink: 0;
	min-height: 0;
	position: relative;
}

.autofit-col {
	@extend %autofit-col;
}

%autofit-col-expand {
	flex-grow: 1;
	flex-shrink: 1;
	min-width: $autofit-col-expand-min-width;
	word-wrap: break-word;
}

.autofit-col-expand {
	@extend %autofit-col-expand;
}

// Autofit Section

%autofit-section {
	max-width: 100%;
}

.autofit-section {
	@extend %autofit-section;
}

// Autofit Float

%autofit-float {
	@include clay-autofit-float;
}

.autofit-float {
	@extend %autofit-float;
}

%autofit-float-sm-down {
	@include media-breakpoint-down(sm) {
		@include clay-autofit-float;
	}
}

.autofit-float-sm-down {
	@extend %autofit-float-sm-down;
}

// Autofit Float Md Down

%autofit-float-md-down {
	@include media-breakpoint-down(md) {
		@include clay-autofit-float;
	}
}

.autofit-float-md-down {
	@extend %autofit-float-md-down;
}

// Autofit Float End

%autofit-float-end {
	@include clay-autofit-float;

	justify-content: flex-end;
}

.autofit-float-end {
	@extend %autofit-float-end;
}

%autofit-float-end-sm-down {
	@include media-breakpoint-down(sm) {
		@include clay-autofit-float;

		justify-content: flex-end;
	}
}

.autofit-float-end-sm-down {
	@extend %autofit-float-end-sm-down;
}

%autofit-float-end-md-down {
	@include media-breakpoint-down(md) {
		@include clay-autofit-float;

		justify-content: flex-end;
	}
}

.autofit-float-end-md-down {
	@extend %autofit-float-end-md-down;
}

// Headings (h1-6)

.heading-start {
	margin-right: $heading-spacer-x;
}

.heading-end {
	margin-left: $heading-spacer-x;
}

.heading-text {
	margin-bottom: $heading-text-margin-bottom;
	margin-top: $heading-text-margin-top;
}

// Inline Scroller

.inline-scroller {
	list-style: none;
	margin: 0;
	max-height: $inline-scroller-max-height;
	overflow: auto;

	-webkit-overflow-scrolling: touch;

	padding: 0;
}

// Inline Item

.inline-item {
	align-items: center;
	display: inline-flex;
	vertical-align: middle;

	.inline-item {
		display: inline;
	}

	.lexicon-icon {
		margin-top: $inline-item-lexicon-icon-margin-top;
	}
}

.inline-item-before {
	margin-right: $inline-item-spacer-x;
}

.inline-item-middle {
	margin-left: $inline-item-spacer-x;
	margin-right: $inline-item-spacer-x;

	+ .inline-item-middle {
		margin-left: 0;
	}
}

.inline-item-after {
	margin-left: $inline-item-spacer-x;
}

// Page Header

.page-header {
	background-color: $page-header-bg;
}
.loading-animation {
	display: block;
	font-size: $loading-icon-font-size;
	height: 1em;
	margin-left: auto;
	margin-right: auto;
	position: relative;
	text-align: left;
	vertical-align: middle;
	width: 1em;
}

// Loading Icon Dotted

%loading-animation {
	@include clay-loading-animation-variant($loading-animation);
}

%loading-animation-light {
	@include clay-loading-animation-variant($loading-animation-light);
}

.loading-animation {
	@extend %loading-animation !optional;
}

.loading-animation-light {
	@extend %loading-animation-light !optional;
}

// Loading Icon Sizes

.loading-animation.loading-animation-sm {
	font-size: $loading-icon-font-size-sm;
}